/********************* ROLES **********************/

CREATE ROLE RRR_CAJERO;
CREATE ROLE RRR_DOCTOR;
CREATE ROLE RRR_GERENTE;
CREATE ROLE RRR_PADRE;
CREATE ROLE RRR_RRHH;
CREATE ROLE RRR_SECRETARIA;
CREATE ROLE RRR_SOFTSURENA;
CREATE ROLE RRR_VENDEDOR;
/********************* UDFS ***********************/

/********************* FUNCTIONS ***********************/

/****************** SEQUENCES ********************/

CREATE SEQUENCE GEN_CONTACTOS_DIRECCIONES_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE GEN_FACTURAS_ID ;
CREATE SEQUENCE G_ID_DIRECCIONES START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE G_ID_PERSONA START WITH 1 INCREMENT BY 1;
/******************** DOMAINS *********************/

CREATE DOMAIN D_APELLIDOS
 AS VARCHAR(40)
 DEFAULT ''
 CHECK (value similar to '[[:ALPHA:]-'' .ÑñÁáÉéÍíÓóÚú]*' escape '@')
 COLLATE UTF8;
CREATE DOMAIN D_BLOB_BINARIO
 AS BLOB SUB_TYPE 0
;
CREATE DOMAIN D_BLOB_TEXTO
 AS BLOB SUB_TYPE 1
 COLLATE UTF8;
CREATE DOMAIN D_BOOLEAN_F
 AS BOOLEAN
 DEFAULT FALSE
 NOT NULL
;
CREATE DOMAIN D_BOOLEAN_T
 AS BOOLEAN
 DEFAULT TRUE
;
CREATE DOMAIN D_CEDULA
 AS CHAR(13)
 CHECK (value similar to '[[:DIGIT:]]{3}[-][[:DIGIT:]]{7}[-][[:DIGIT:]]{1}')
 COLLATE UTF8;
CREATE DOMAIN D_CLAVE
 AS VARCHAR(30)
 COLLATE UTF8;
CREATE DOMAIN D_CODIGO
 AS VARCHAR(20)
 COLLATE UTF8;
CREATE DOMAIN D_CODIGO_CUENTA_CONTABLE
 AS VARCHAR(14)
 DEFAULT '-1'
 NOT NULL
 COLLATE UTF8;
CREATE DOMAIN D_CODIGO_PAI
 AS CHAR(7)
 COLLATE UTF8;
CREATE DOMAIN D_CORREO
 AS VARCHAR(100)
 CHECK (trim(VALUE) SIMILAR TO '[[:ALNUM:]-_.]*@[[:ALNUM:]-_]*.[[:ALPHA:].]*' and 
     ascii_val(SUBSTRING(VALUE FROM 1 FOR 1)) > 65 and ascii_val(SUBSTRING(VALUE FROM 1 FOR 1)) < 90 or 
     ascii_val(SUBSTRING(VALUE FROM 1 FOR 1)) > 97 and ascii_val(SUBSTRING(VALUE FROM 1 FOR 1)) < 122)
 COLLATE UTF8;
CREATE DOMAIN D_DEDO
 AS CHAR(2)
 DEFAULT 'IN'
 NOT NULL
 CHECK (value in('PU', 'IN', 'MA', 'AN', 'ME'))
 COLLATE UTF8;
CREATE DOMAIN D_DESCUENTO
 AS NUMERIC(5,2)
 DEFAULT 0.00
 CHECK(VALUE >= 0 AND VALUE <= 100)
;
CREATE DOMAIN D_DIA
 AS CHAR(2)
 DEFAULT 'LU'
 CHECK (value in('LU', 'MA', 'MI', 'JU', 'VI', 'SA', 'DO'))
 COLLATE UTF8;
CREATE DOMAIN D_DINERO
 AS NUMERIC(18,2)
 DEFAULT 0.00
;
CREATE DOMAIN D_DOBLE_PRESICION
 AS DOUBLE PRECISION
;
CREATE DOMAIN D_EDAD
 AS SMALLINT
 DEFAULT 0
 NOT NULL
 CHECK (VALUE >= 0)
;
CREATE DOMAIN D_ESTADO_CIVIL
 AS CHAR(1)
 DEFAULT 'S'
 CHECK (VALUE IN ('S', 'C', 'D', 'V', 'U', 'X'))
 COLLATE UTF8;
CREATE DOMAIN D_ESTADO_C_I_P_A_N_T
 AS CHAR(1)
 DEFAULT 'i'
 CHECK (LOWER(VALUE) IN('c','i', 'p', 'a', 'n', 't'))
 COLLATE UTF8;
CREATE DOMAIN D_ESTADO_MENSAJES
 AS CHAR(1)
 DEFAULT 'N'
 NOT NULL
 CHECK (VALUE IN('N', 'L', 'R', 'B'))
 COLLATE UTF8;
CREATE DOMAIN D_FECHA
 AS DATE
 DEFAULT CURRENT_DATE
;
CREATE DOMAIN D_FECHA_HORA
 AS TIMESTAMP
 DEFAULT CURRENT_TIMESTAMP
;
CREATE DOMAIN D_HORA
 AS TIME
 DEFAULT CURRENT_TIME
;
CREATE DOMAIN D_ID
 AS INTEGER
 DEFAULT NULL
 CHECK (VALUE >= -1)
;
CREATE DOMAIN D_INSERT_DELETE
 AS CHAR(1)
 DEFAULT 'I'
 NOT NULL
 CHECK (UPPER(value) in('I', 'D'))
 COLLATE UTF8;
CREATE DOMAIN D_MEDIDA
 AS NUMERIC(18,2)
 DEFAULT 0.00
;
CREATE DOMAIN D_NIVEL_CUENTA
 AS CHAR(1)
 DEFAULT 'X'
 NOT NULL
 CHECK (VALUE IN('D', 'G'))
 COLLATE UTF8;
CREATE DOMAIN D_NOMBRES
 AS VARCHAR(40)
 DEFAULT ''
 CHECK (value similar to '[[:ALPHA:]-'' .ÑñÁáÉéÍíÓóÚú]*' escape '@')
 COLLATE UTF8;
CREATE DOMAIN D_PERSONA
 AS CHAR(1)
 DEFAULT 'F'
 CHECK (VALUE in ('F', 'J', 'X'))
 COLLATE UTF8;
CREATE DOMAIN D_PUNTO_CARDINALES
 AS VARCHAR(5)
 DEFAULT 'N/A'
 CHECK (VALUE IN('Norte', 'Este', 'Sur', 'Oeste', 'N/A'))
 COLLATE UTF8;
CREATE DOMAIN D_ROL
 AS CHAR(31)
 DEFAULT CURRENT_ROLE
 NOT NULL
 COLLATE UTF8;
CREATE DOMAIN D_SANGRE_SIMBOLOS
 AS VARCHAR(3)
 DEFAULT 'N/A'
 CHECK (VALUE in('N/A','O-','O+', 'A-', 'A+', 'B-', 'B+', 'AB-', 'AB+'))
 COLLATE UTF8;
CREATE DOMAIN D_SEXO
 AS CHAR(1)
 DEFAULT 'M'
 CHECK (UPPER(value) = 'M' or UPPER(value) = 'F' or UPPER(value) = 'X')
 COLLATE UTF8;
CREATE DOMAIN D_TELEFONO
 AS CHAR(16)
 CHECK (value similar to '[+][1][(][[:digit:]]{3}[)][ ][[:digit:]]{3}[-][[:digit:]]{4}')
 COLLATE UTF8;
CREATE DOMAIN D_TIEMPO_GESTACION
 AS NUMERIC(4,2)
 DEFAULT 4
 NOT NULL
 CHECK (VALUE > 1 AND VALUE < 10)
;
CREATE DOMAIN D_TIPO_CUENTAS
 AS VARCHAR(2)
 DEFAULT 'XX'
 NOT NULL
 CHECK (VALUE IN('A', 'PA', 'PT', 'I', 'G', 'CC', 'CO'))
/*
     A  = ACTIVO,
     PA = PASIVO, 
     PT = PATRIMONIO, 
     I  = INGRESOS, 
     G  = GASTOS, 
     CC = CUENTAS DE CIERRE, 
     CO = CUENTAS DE ORDEN.
*/
 COLLATE UTF8;
CREATE DOMAIN D_TURNO
 AS SMALLINT
 DEFAULT 0
 CHECK (value >= 1)
;
CREATE DOMAIN D_USER_NAME
 AS VARCHAR(31)
 DEFAULT CURRENT_USER
 NOT NULL
 COLLATE UTF8;
CREATE DOMAIN D_VARCHAR_1024
 AS VARCHAR(1024)
 COLLATE UTF8;
CREATE DOMAIN D_VARCHAR_15
 AS VARCHAR(15)
 COLLATE UTF8;
CREATE DOMAIN D_VARCHAR_25
 AS VARCHAR(25)
 COLLATE UTF8;
CREATE DOMAIN D_VARCHAR_255
 AS VARCHAR(255)
 COLLATE UTF8;
CREATE DOMAIN D_VARCHAR_45
 AS VARCHAR(45)
 COLLATE UTF8;
CREATE DOMAIN D_VARCHAR_70
 AS VARCHAR(70)
 COLLATE UTF8;
/******************* PROCEDURES ******************/

SET TERM ^ ;
CREATE PROCEDURE ACTUALIZAR_ESTADISTICAS_INDICES
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE ACTUALIZAR_TABLA_PIVOT (
    TCTABLAPIVOT VARCHAR(28),
    TCVISTA VARCHAR(28),
    TCPRIMERACOLUMNACABECERA VARCHAR(64),
    TCOTRASCOLUMNASCABECERA VARCHAR(4096),
    TCCOLUMNADATOS VARCHAR(28),
    TCVALORESDATOS VARCHAR(1024) )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE ADMIN_HABILITAR_TURNO (
    I_USER_NAME D_USER_NAME )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE CREAR_TABLA_PIVOT (
    TCNOMBRETABLA VARCHAR(28),
    TCVISTA VARCHAR(28),
    TCPRIMERACOLUMNACABECERA VARCHAR(64),
    TCOTRASCOLUMNASCABECERA VARCHAR(4096),
    TCCOLUMNADATOS VARCHAR(28),
    TCTIPODATOS VARCHAR(64) )
SQL SECURITY INVOKER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE PARSER (
    TCTEXTO D_BLOB_TEXTO,
    TCSEPARADOR D_VARCHAR_15 )
RETURNS (
    FTCNOMBRE D_VARCHAR_1024 )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE PRO_PERMISOS (
    CONSULTAR D_BOOLEAN_F,
    INSERTAR D_BOOLEAN_F,
    ACTUALIZAR D_BOOLEAN_F,
    BORRAR D_BOOLEAN_F,
    REFERENCIA D_BOOLEAN_F,
    VISTA D_VARCHAR_45,
    USER_NAME D_USER_NAME )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_ARS (
    V_ID D_ID,
    ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_CATEGORIAS (
    V_ID D_ID,
    ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_CLIENTE_CC (
    ID D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_CLIENTE_SB (
    V_ID D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_ESTUDIANTE (
    V_ID D_ID,
    I_ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_PACIENTE (
    V_ID D_ID,
    I_ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_HALLAR_PALABRAS (
    FTCTEXTO D_BLOB_TEXTO )
RETURNS (
    FTCPALABRA D_VARCHAR_45 )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_ARS (
    DESCRIPCION D_VARCHAR_45,
    COVER_CONSULTA_POR_C D_DESCUENTO,
    ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_CARTON_BINGO (
    I_CARTON_HASH D_ID,
    I_MATRIZ_OBJ D_BLOB_TEXTO )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_CATEGORIAS (
    DESCRIPCION D_VARCHAR_25,
    IMAGEN_TEXTO D_BLOB_TEXTO,
    ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_CLIENTE (
    I_ID D_ID,
    I_ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_CLIENTE_CC (
    PNOMBRE D_NOMBRES,
    SNOMBRE D_NOMBRES,
    APELLIDOS D_APELLIDOS,
    SEXO D_SEXO,
    CORREO D_CORREO,
    SALDO D_DINERO )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_CLIENTE_SB (
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
RETURNS (
    V_ID D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_DIRECCIONES (
    I_ID_PERSONA D_ID,
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_ID_CODIGO_POSTAL D_ID,
    I_DIRECCION D_VARCHAR_255 )
RETURNS (
    O_ID D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_DOCTOR (
    I_USER_NAME D_USER_NAME,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ROL D_ROL,
    I_COD_EXEQUATUR D_VARCHAR_70,
    I_ESPECIALIDAD D_VARCHAR_70,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F )
RETURNS (
    O_SQL D_BLOB_TEXTO )
SQL SECURITY INVOKER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_ENTRADA_PRODUCTOS (
    ID_PROVEEDOR D_ID,
    COD_FACTURA D_CODIGO,
    LINEA D_ID,
    ID_PRODUCTO D_ID,
    ENTRADA D_DINERO,
    FECHA_VECIMIENTO D_FECHA )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_ESTUDIANTE (
    I_ID_ARS D_ID,
    I_NO_NSS D_VARCHAR_25,
    I_ID_TIPO_SANGRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_MATRICULA D_VARCHAR_15,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_FACTURA (
    I_ID_CLIENTE D_ID,
    I_ID_CONTACTOS_TEL D_ID,
    I_ID_CONTACTOS_DIRECCIONES D_ID,
    I_ID_CONTACTOS_EMAIL D_ID,
    I_ID_TURNO D_ID,
    I_TOTAL D_DINERO,
    I_EFECTIVO D_DINERO,
    I_ESTADO_FACTURA D_ESTADO_C_I_P_A_N_T,
    I_NOMBRE_TEMP D_NOMBRES )
RETURNS (
    O_ID D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_PACIENTE (
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_ID_ARS D_ID,
    I_NO_NSS D_VARCHAR_25,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ID_TIPO_SANGRE D_ID,
    I_ESTADO D_BOOLEAN_T )
RETURNS (
    V_ID D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_PADRES (
    I_ID_HIJO D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ID_TIPO_SANGRE D_ID,
    I_ESTADO_CIVIL D_ESTADO_CIVIL,
    I_ESTADO D_BOOLEAN_T )
RETURNS (
    O_ID D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_PERSONA (
    I_PERSONA D_PERSONA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T )
RETURNS (
    V_ID D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_PERSONA_CLIENTES_ID (
    I_ID D_ID )
SQL SECURITY INVOKER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_PROVEEDOR (
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_DIRECCION D_VARCHAR_255,
    I_ESTADO D_BOOLEAN_T,
    I_CODIGO_PROVEEDOR D_CODIGO )
RETURNS (
    V_ID D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_TURNO (
    I_TURNO_USUARIO D_USER_NAME )
SQL SECURITY INVOKER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_USUARIOS (
    I_USER_NAME D_USER_NAME,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F,
    I_DESCRIPCION D_BLOB_TEXTO )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_RECCOUNT (
    TCOPERAC TYPE OF D_INSERT_DELETE,
    TCTABLAX TYPE OF D_VARCHAR_45 )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_RECCOUNT_ESTADO (
    TCOPERAC TYPE OF D_INSERT_DELETE,
    TCTABLAX TYPE OF D_VARCHAR_45,
    ESTADO TYPE OF D_BOOLEAN_F )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_SELECT_USUARIOS_TAGS (
    I_USER_NAME D_USER_NAME NOT NULL DEFAULT 'all' )
RETURNS (
    O_USER_NAME D_USER_NAME,
    O_PRIMER_NOMBRE D_NOMBRES,
    O_SEGUNDO_NOMBRE D_NOMBRES,
    O_APELLIDOS D_APELLIDOS,
    O_ESTADO_ACTIVO D_BOOLEAN_T,
    O_ADMINISTRADOR D_BOOLEAN_T,
    O_TAG_NOMBRE D_VARCHAR_255,
    O_TAG_VALOR D_VARCHAR_255,
    O_DESCRIPCION D_VARCHAR_255 )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_CANTIDAD_FILAS (
    TNCODSUC D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_CLIENTE_CC (
    ID D_ID,
    PNOMBRE D_NOMBRES,
    SNOMBRE D_NOMBRES,
    APELLIDOS D_APELLIDOS,
    SEXO D_SEXO,
    CORREO D_CORREO,
    SALDO D_DINERO )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_CLIENTE_SB (
    I_ID D_ID,
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
SQL SECURITY INVOKER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_DEUDA_ESTADO (
    E_ID_DEUDA D_ID NOT NULL,
    E_OBJ D_ESTADO_C_I_P_A_N_T NOT NULL )
RETURNS (
    S_SALIDA D_VARCHAR_15 )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_DIRECCION_CLIENTE (
    I_ID D_ID,
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_DIRECCION D_VARCHAR_255,
    I_ESTADO D_BOOLEAN_T,
    I_POR_DEFECTO D_BOOLEAN_T )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_ESTUDIANTE (
    I_ID D_ID,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_OR_INSERT_FACTURA (
    I_ID D_ID,
    I_ID_CLIENTE D_ID,
    I_ID_CONTACTOS_TEL D_ID,
    I_ID_CONTACTOS_DIRECCIONES D_ID,
    I_ID_CONTACTOS_EMAIL D_ID,
    I_ID_TURNO D_ID,
    I_TOTAL D_DINERO,
    I_EFECTIVO D_DINERO,
    I_ESTADO_FACTURA D_ESTADO_C_I_P_A_N_T,
    I_NOMBRE_TEMP D_NOMBRES )
RETURNS (
    O_ID D_ID )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_PACIENTE (
    I_ID_PACIENTE D_ID,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ID_TIPO_SANGRE D_ID,
    I_ID_ARS D_ID,
    I_NONSS D_VARCHAR_25,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_ARS D_BOOLEAN_T )
SQL SECURITY INVOKER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_PADRES (
    I_ID D_ID,
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_ID_CODIGOPOSTAL D_ID,
    I_ID_TIPO_SANGRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_DIRECCION D_VARCHAR_70,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_PROVEEDORES (
    I_ID D_ID,
    I_CODIGO_PROVEEDOR D_CODIGO,
    I_PERSONA D_PERSONA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T )
SQL SECURITY INVOKER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_USUARIOS (
    I_USER_NAME D_USER_NAME,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F,
    I_DESCRIPCION D_BLOB_TEXTO )
SQL SECURITY INVOKER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_VALIDAR_USUARIO (
    I_USER_NAME D_USER_NAME )
RETURNS (
    O_USER_NAME D_USER_NAME )
SQL SECURITY INVOKER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SYSTEM_ENCRIPTAR (
    TCTEXTO D_BLOB_TEXTO,
    TCACCION CHAR(1),
    TCNUMEROENCRIPTACION D_VARCHAR_255,
    TCNUMEROREPETICION D_VARCHAR_255 )
RETURNS (
    FTCNUEVOTEXTO D_BLOB_TEXTO )
SQL SECURITY DEFINER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SYSTEM_SET_LICENCIA (
    E_FCHV CHAR(10),
    E_IDMAC VARCHAR(80),
    CLAVE1 CHAR(7),
    CLAVE2 CHAR(7) )
SQL SECURITY INVOKER
AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

/******************* PACKAGES ******************/

/******************** TABLES **********************/

CREATE TABLE ANALISIS
(
  ID D_ID NOT NULL,
  ID_PACIENTE D_ID DEFAULT 0 NOT NULL,
  FECHA_HORA_CREADA D_FECHA_HORA NOT NULL,
  FECHA_HORA_VISTA D_FECHA_HORA NOT NULL,
  T_BHCG D_BOOLEAN_F,
  T_EMB_ORINA D_BOOLEAN_F,
  T_EMB_SANGRE D_BOOLEAN_F,
  T_ANT_AUSTRALIANO_BBSAG D_BOOLEAN_F,
  T_CLAMIDIA_IGA D_BOOLEAN_F,
  T_FTA_ABS D_BOOLEAN_F,
  T_HIV D_BOOLEAN_F,
  T_VDRL D_BOOLEAN_F,
  T_ACIDO_URICO D_BOOLEAN_F,
  T_ANT_FEBRILES D_BOOLEAN_F,
  T_ASO_LATEX D_BOOLEAN_F,
  T_BILIRRUBINA D_BOOLEAN_F,
  T_COLESTEROL_TOTAL D_BOOLEAN_F,
  T_COLESTEROL_HDL D_BOOLEAN_F,
  T_COLESTEROL_HDL_LDL D_BOOLEAN_F,
  T_COPROLOGICO D_BOOLEAN_F,
  T_CREATININA_SUERO D_BOOLEAN_F,
  T_CULTIVO_FARINGE D_BOOLEAN_F,
  T_CULTIVO_HECES D_BOOLEAN_F,
  T_CULTIVO_HERIDA_AEROBICO D_BOOLEAN_F,
  T_CULTIVO_OIDO D_BOOLEAN_F,
  T_CULTIVO_SANGRE D_BOOLEAN_F,
  T_CULTIVO_SEMEN D_BOOLEAN_F,
  T_CULTIVO_URETRA D_BOOLEAN_F,
  T_CULTIVO_VAGINA D_BOOLEAN_F,
  T_ELECTRO_HEMOGLOBINA D_BOOLEAN_F,
  T_ERITROSEDIMENTACION D_BOOLEAN_F,
  T_ESPERMATOGRAMA D_BOOLEAN_F,
  T_ESTRADIOL D_BOOLEAN_F,
  T_ESTROGENO_TOTALES D_BOOLEAN_F,
  T_FACTOR_REUMATOIDE D_BOOLEAN_F,
  T_FALCEMIA D_BOOLEAN_F,
  T_FOSFATASA_ALCALINA D_BOOLEAN_F,
  T_FSH D_BOOLEAN_F,
  T_GLICEMIA D_BOOLEAN_F,
  T_HEMOGLO_GLUCOSILADA D_BOOLEAN_F,
  T_HEMOGRAMA D_BOOLEAN_F,
  T_HEPATITIS_A D_BOOLEAN_F,
  T_HEPATITIS_C D_BOOLEAN_F,
  T_KOH D_BOOLEAN_F,
  T_LH D_BOOLEAN_F,
  T_ORINA D_BOOLEAN_F,
  T_PCR D_BOOLEAN_F,
  T_PROGESTERONA D_BOOLEAN_F,
  T_PROLACTINA D_BOOLEAN_F,
  T_PROTEINAS_TOTALES D_BOOLEAN_F,
  T_PSA_TOTAL D_BOOLEAN_F,
  T_PSA_LIBRE D_BOOLEAN_F,
  T_SANG_OCULT_HECES D_BOOLEAN_F,
  T_SGOT_TGO D_BOOLEAN_F,
  T_SGOT_TGP D_BOOLEAN_F,
  T_T3 D_BOOLEAN_F,
  T_T4 D_BOOLEAN_F,
  T_T4_LIBRE D_BOOLEAN_F,
  T_COOMBS_DIRECTO D_BOOLEAN_F,
  T_COOMBS_INDIRECTO D_BOOLEAN_F,
  T_TESTOSTERONA D_BOOLEAN_F,
  T_TIPIFICACION_SANGUINEA D_BOOLEAN_F,
  T_TOXOPLAS_IGG D_BOOLEAN_F,
  T_TOXOPLAS_IGM D_BOOLEAN_F,
  T_TRIGLICERIDOS D_BOOLEAN_F,
  T_TSH D_BOOLEAN_F,
  T_TUBERCULINA D_BOOLEAN_F,
  T_UREA D_BOOLEAN_F,
  OTROS D_VARCHAR_255,
  ROL D_ROL,
  USER_NAME D_USER_NAME,
  CONSTRAINT INTEG_1 PRIMARY KEY (ID)
);
CREATE TABLE ANTECEDENTES
(
  ID D_ID NOT NULL,
  ID_CONSULTA D_ID NOT NULL,
  DESCRIPCION D_VARCHAR_1024 NOT NULL,
  CONSTRAINT INTEG_5 PRIMARY KEY (ID)
);
CREATE TABLE ARS
(
  ID D_ID NOT NULL,
  DESCRIPCION D_VARCHAR_45 NOT NULL,
  COVERCONSULTAPORC D_DESCUENTO NOT NULL,
  ESTADO D_BOOLEAN_T NOT NULL,
  CANTIDAD_REGISTRO D_ID,
  USER_NAME D_USER_NAME,
  ROL D_ROL NOT NULL,
  CONSTRAINT INTEG_10 PRIMARY KEY (ID),
  CONSTRAINT INTEG_2405 UNIQUE (DESCRIPCION)
);
CREATE TABLE ASEGURADOS
(
  ID_PERSONA D_ID NOT NULL,
  ID_ARS D_ID,
  NO_NSS D_VARCHAR_25,
  ESTADO D_BOOLEAN_T NOT NULL,
  CONSTRAINT PK_ASEGURADOS_0 PRIMARY KEY (ID_PERSONA),
  CONSTRAINT UNQ_ASEGURADOS_0 UNIQUE (NO_NSS)
);
CREATE TABLE CARTONES_BINGO
(
  ID D_ID NOT NULL,
  CARTON_HASH D_ID NOT NULL,
  FECHA_CREACCION D_FECHA_HORA NOT NULL,
  MATRIZ_OBJ D_BLOB_TEXTO NOT NULL,
  ESTADO D_BOOLEAN_T,
  CONSTRAINT PK_CARTONES_BINGO_0 PRIMARY KEY (ID),
  CONSTRAINT UNQ_CARTONES_BINGO_0 UNIQUE (CARTON_HASH)
);
CREATE TABLE CATEGORIAS
(
  ID D_ID NOT NULL,
  DESCRIPCION D_VARCHAR_25 NOT NULL,
  IMAGEN_TEXTO D_BLOB_TEXTO,
  FECHA_CREACION D_FECHA NOT NULL,
  ESTADO D_BOOLEAN_T NOT NULL,
  USER_NAME D_USER_NAME,
  CONSTRAINT INTEG_16 PRIMARY KEY (ID),
  CONSTRAINT UNQ_CATEGORIAS_0 UNIQUE (DESCRIPCION)
);
CREATE TABLE CODIGOS_POSTALES
(
  ID D_ID NOT NULL,
  IDPROVINCIA D_ID,
  LOCALIDAD D_VARCHAR_45,
  CODIGO_POSTAL D_ID,
  CONSTRAINT INTEG_21 PRIMARY KEY (ID)
);
CREATE TABLE CONSULTAS
(
  ID D_ID NOT NULL,
  ID_PACIENTE D_ID,
  ID_CONTROL_CONSULTA D_ID,
  FECHA D_FECHA,
  TURNO D_TURNO,
  ESTADO D_BOOLEAN_T,
  USER_NAME D_USER_NAME,
  CONSTRAINT INTEG_22 PRIMARY KEY (ID)
);
CREATE TABLE CONSULTAS_APROBADAS
(
  ID D_ID NOT NULL,
  COD_AUTORIZACION D_VARCHAR_15 NOT NULL,
  COSTO D_DINERO NOT NULL,
  DESCUENTO D_DESCUENTO NOT NULL,
  USER_NAME D_USER_NAME,
  CONSTRAINT INTEG_24 PRIMARY KEY (ID),
  CONSTRAINT INTEG_2417 UNIQUE (COD_AUTORIZACION)
);
CREATE TABLE CONTACTOS_DIRECCIONES
(
  ID D_ID NOT NULL,
  ID_PERSONA D_ID NOT NULL,
  ID_PROVINCIA D_ID DEFAULT 0 NOT NULL,
  ID_MUNICIPIO D_ID DEFAULT 0 NOT NULL,
  ID_DISTRITO_MUNICIPAL D_ID DEFAULT 0 NOT NULL,
  ID_CODIGO_POSTAL D_ID DEFAULT 0 NOT NULL,
  DIRECCION D_VARCHAR_255 DEFAULT 'Sin direccion ingresada',
  FECHA D_FECHA NOT NULL,
  ESTADO D_BOOLEAN_F NOT NULL,
  POR_DEFECTO D_BOOLEAN_F NOT NULL,
  CONSTRAINT PK_CONTACTOS_DIRECCIONES_0 PRIMARY KEY (ID)
);
CREATE TABLE CONTACTOS_EMAIL
(
  ID D_ID NOT NULL,
  ID_PERSONA D_ID NOT NULL,
  EMAIL D_CORREO NOT NULL,
  FECHA D_FECHA NOT NULL,
  ESTADO D_BOOLEAN_T NOT NULL,
  POR_DEFECTO D_BOOLEAN_T NOT NULL,
  CONSTRAINT INTEG_28 PRIMARY KEY (ID),
  CONSTRAINT UNQ_CONTACTOS_EMAIL_0 UNIQUE (ID_PERSONA,EMAIL),
  CONSTRAINT UNQ_CONTACTOS_EMAIL_1 UNIQUE (EMAIL)
);
CREATE TABLE CONTACTOS_TEL
(
  ID D_ID NOT NULL,
  ID_PERSONA D_ID NOT NULL,
  TELEFONO D_TELEFONO NOT NULL,
  TIPO D_VARCHAR_15 NOT NULL,
  FECHA D_FECHA NOT NULL,
  ESTADO D_BOOLEAN_T NOT NULL,
  POR_DEFECTO D_BOOLEAN_T NOT NULL,
  CONSTRAINT INTEG_32 PRIMARY KEY (ID)
);
CREATE TABLE CONTROL_CONSULTA
(
  ID D_ID NOT NULL,
  USER_NAME D_USER_NAME,
  CANTIDADPACIENTE D_TURNO,
  DIA D_DIA,
  INICIAL D_HORA,
  FINAL D_HORA,
  ESTADO D_BOOLEAN_T,
  USER_NAME_ D_USER_NAME,
  CONSTRAINT INTEG_37 PRIMARY KEY (ID)
);
CREATE TABLE DEUDAS
(
  ID D_ID NOT NULL,
  ID_CLIENTE D_ID NOT NULL,
  ID_FACTURA D_ID NOT NULL,
  CONCEPTO D_VARCHAR_255 NOT NULL,
  MONTO D_DINERO DEFAULT 0.00 NOT NULL,
  FECHA D_FECHA NOT NULL,
  HORA D_HORA NOT NULL,
  ESTADO D_ESTADO_C_I_P_A_N_T NOT NULL,
  CONSTRAINT INTEG_188 PRIMARY KEY (ID)
);
CREATE TABLE DISTRITOS_MUNICIPALES
(
  ID D_ID NOT NULL,
  NOMBRE D_VARCHAR_45,
  IDMUNICIPIO D_ID,
  CONSTRAINT INTEG_59 PRIMARY KEY (ID)
);
CREATE TABLE D_DEUDAS_PAGAS
(
  ID D_ID NOT NULL,
  ID_DEUDAS D_ID NOT NULL,
  MONTO_PAGO D_DINERO NOT NULL,
  FECHA_HORA D_FECHA_HORA DEFAULT CURRENT_TIMESTAMP NOT NULL,
  CONSTRAINT INTEG_60 PRIMARY KEY (ID)
);
CREATE TABLE D_FACTURAS
(
  ID_FACTURA D_ID NOT NULL,
  ID_LINEA D_ID NOT NULL,
  ID_PRODUCTO D_ID NOT NULL,
  PRECIO D_DINERO NOT NULL,
  CANTIDAD D_DINERO NOT NULL,
  CONSTRAINT PK_D_FACTURAS_01 PRIMARY KEY (ID_FACTURA,ID_LINEA)
);
CREATE TABLE D_GUIA_VIGILANCIA_DESARROLLO
(
  ID_GVD D_ID NOT NULL,
  ID_PACIENTE D_ID NOT NULL,
  FECHA D_FECHA_HORA,
  CONSTRAINT INTEG_96 PRIMARY KEY (ID_GVD,ID_PACIENTE)
);
CREATE TABLE D_MOTIVO_CONSULTA
(
  IDCONSULTA D_ID NOT NULL,
  IDMCONSULTA D_ID NOT NULL,
  CONSTRAINT PK_D_MOTIVO_CONSULTA_0 PRIMARY KEY (IDCONSULTA,IDMCONSULTA)
);
CREATE TABLE D_RECETAS
(
  ID_RECETA D_ID NOT NULL,
  LINEA D_TURNO NOT NULL,
  ID_MEDICAMENTO D_ID NOT NULL,
  CANTIDAD D_MEDIDA,
  D_DOSIS D_VARCHAR_255,
  CONSTRAINT CON_DETALLERECETAS PRIMARY KEY (ID_RECETA,LINEA)
);
CREATE TABLE ENTRADA_PRODUCTOS
(
  ID D_ID NOT NULL,
  IDPROVEDOR D_ID NOT NULL,
  COD_FACTURA D_CODIGO NOT NULL,
  LINEA D_ID NOT NULL,
  IDPRODUCTO D_ID NOT NULL,
  ENTRADA D_DINERO NOT NULL,
  FECHAVECIMIENTO D_FECHA,
  ESTADO D_BOOLEAN_T NOT NULL,
  USER_NAME D_USER_NAME NOT NULL,
  ROL D_ROL,
  CONSTRAINT INTEG_72 PRIMARY KEY (ID),
  CONSTRAINT UNQ_ENTRADA_PRODUCTOS_0 UNIQUE (IDPROVEDOR,COD_FACTURA,IDPRODUCTO)
);
CREATE TABLE E_S_SYS
(
  ID_E_S_SYS D_ID NOT NULL,
  NOMBRE D_NOMBRES,
  TELEFONOS D_VARCHAR_255,
  FCHI D_VARCHAR_25 NOT NULL,
  FCHA D_VARCHAR_25 NOT NULL,
  FCHV D_VARCHAR_25 NOT NULL,
  IDMAC D_VARCHAR_70 NOT NULL,
  DIRECCION D_VARCHAR_255,
  MENSAJE_FOOTER D_VARCHAR_255,
  LOGO D_BLOB_TEXTO,
  CONSTRAINT INTEG_86 PRIMARY KEY (ID_E_S_SYS)
);
CREATE TABLE FACTURAS
(
  ID D_ID NOT NULL,
  ID_CLIENTE D_ID NOT NULL,
  ID_CONTACTOS_TEL D_ID,
  ID_CONTACTOS_DIRECCIONES D_ID,
  ID_CONTACTOS_EMAIL D_ID,
  ID_TURNO D_ID NOT NULL,
  FECHA_HORA D_FECHA_HORA NOT NULL,
  TOTAL D_DINERO,
  EFECTIVO D_DINERO NOT NULL,
  ESTADO_FACTURA D_ESTADO_C_I_P_A_N_T,
  NOMBRE_TEMP D_NOMBRES DEFAULT 'N A',
  USER_NAME D_USER_NAME NOT NULL,
  CONSTRAINT INTEG_91 PRIMARY KEY (ID)
);
CREATE TABLE GENERALES
(
  ID_PERSONA D_ID NOT NULL,
  CEDULA D_CEDULA NOT NULL,
  ID_TIPO_SANGRE D_ID,
  ESTADO_CIVIL D_ESTADO_CIVIL,
  CONSTRAINT PK_GENERALES_0 PRIMARY KEY (ID_PERSONA),
  CONSTRAINT UNQ_GENERALES_0 UNIQUE (CEDULA)
);
CREATE TABLE GUIA_VIGILANCIA_DESARROLLO
(
  ID D_ID NOT NULL,
  EDAD D_EDAD,
  CARACT_DESARR_EVALUAR D_VARCHAR_255,
  CONSTRAINT INTEG_103 PRIMARY KEY (ID)
);
CREATE TABLE HUELLAS
(
  ID D_ID NOT NULL,
  TIPO_DEDO D_DEDO NOT NULL,
  IMAGEN_TEXTO D_BLOB_TEXTO,
  CONSTRAINT INTEG_107 PRIMARY KEY (ID)
);
CREATE TABLE INSCRIPCIONES
(
  ID D_ID NOT NULL,
  ID_ESTUDIANTE D_ID NOT NULL,
  ID_TANDA D_ID NOT NULL,
  PAGO D_DINERO NOT NULL,
  FECHA_INSCRIPCION D_FECHA_HORA NOT NULL,
  ROL D_ROL NOT NULL,
  USER_NAME D_USER_NAME NOT NULL,
  CONSTRAINT INTEG_173 PRIMARY KEY (ID)
);
CREATE TABLE MENSAJES
(
  ID D_ID NOT NULL,
  ID_DOCTOR D_USER_NAME NOT NULL,
  ID_PACIENTE D_ID DEFAULT 0 NOT NULL,
  HORA D_HORA NOT NULL,
  FECHA D_FECHA NOT NULL,
  MENSAJE D_BLOB_TEXTO NOT NULL,
  ESTADO D_ESTADO_MENSAJES NOT NULL,
  CONSTRAINT INTEG_117 PRIMARY KEY (ID)
);
CREATE TABLE METRICAS
(
  ID D_ID NOT NULL,
  IDCONSULTA D_ID,
  FECHA D_FECHA_HORA,
  PESOKG D_MEDIDA,
  ESTATURAMETRO D_MEDIDA,
  ESCEFALO D_MEDIDA,
  ENF_DETECT D_VARCHAR_255,
  HALLAZGOS_POS D_VARCHAR_255,
  ID_DIAG D_VARCHAR_255,
  TX D_VARCHAR_255,
  COMPLEMENTO D_VARCHAR_255,
  IMAGEN_TEXTO D_BLOB_TEXTO,
  USER_NAME D_USER_NAME,
  CONSTRAINT INTEG_124 PRIMARY KEY (ID)
);
CREATE TABLE MOTIVO_CONSULTA
(
  ID D_ID NOT NULL,
  DESCRIPCION D_VARCHAR_45 NOT NULL,
  CONSTRAINT INTEG_125 PRIMARY KEY (ID),
  CONSTRAINT INTEG_2565 UNIQUE (DESCRIPCION)
);
CREATE TABLE MUNICIPIOS
(
  ID D_ID NOT NULL,
  NOMBRE D_VARCHAR_45,
  IDPROVINCIA D_ID,
  CONSTRAINT INTEG_127 PRIMARY KEY (ID)
);
CREATE TABLE PERSONAS
(
  ID D_ID NOT NULL,
  PERSONA D_PERSONA NOT NULL,
  PNOMBRE D_NOMBRES NOT NULL,
  SNOMBRE D_NOMBRES NOT NULL,
  APELLIDOS D_APELLIDOS NOT NULL,
  SEXO D_SEXO NOT NULL,
  FECHA_NACIMIENTO D_FECHA NOT NULL,
  FECHA_INGRESO D_FECHA_HORA NOT NULL,
  FECHA_HORA_ULTIMO_UPDATE D_FECHA_HORA NOT NULL,
  ESTADO D_BOOLEAN_T NOT NULL,
  USER_NAME D_USER_NAME,
  ROL_USUARIO D_ROL NOT NULL,
  CONSTRAINT INTEG_132 PRIMARY KEY (ID)
);
CREATE TABLE PERSONAS_CLIENTES
(
  ID D_ID NOT NULL,
  CONSTRAINT PK_PERSONAS_CLIENTES_0 PRIMARY KEY (ID)
);
CREATE TABLE PERSONAS_CLIENTES_ATR
(
  ID D_ID NOT NULL,
  TOTAL_FACTURADO D_DINERO,
  TOTAL_DEUDA D_DINERO,
  CANTIDAD_FACTURA D_ID,
  FECHA_ULTIMA_COMPRA D_FECHA,
  SALDO D_DINERO,
  CONSTRAINT PK_PERSONAS_CLIENTES_ATR_0 PRIMARY KEY (ID)
);
CREATE TABLE PERSONAS_ESTUDIANTES
(
  ID D_ID NOT NULL,
  CONSTRAINT PK_PERSONAS_ESTUDIANTES_0 PRIMARY KEY (ID)
);
CREATE TABLE PERSONAS_ESTUDIANTES_ATR
(
  ID D_ID NOT NULL,
  MATRICULA D_VARCHAR_15 NOT NULL,
  CONSTRAINT PK_PERSONAS_ESTUDIANTES_ATR_0 PRIMARY KEY (ID),
  CONSTRAINT UNQ_PERSONAS_ESTUDIANTES_0 UNIQUE (MATRICULA)
);
CREATE TABLE PERSONAS_PACIENTES
(
  ID D_ID NOT NULL,
  CONSTRAINT PK_PERSONAS_PACIENTES_0 PRIMARY KEY (ID)
);
CREATE TABLE PERSONAS_PACIENTES_ATR
(
  ID_PACIENTE D_ID NOT NULL,
  PESO_NACIMIENTO_KG D_MEDIDA,
  ALTURA D_MEDIDA,
  PERIMETRO_CEFALICO D_MEDIDA,
  CESAREA D_BOOLEAN_T,
  TIEMPO_GESTACION D_TIEMPO_GESTACION,
  USER_NAME D_USER_NAME,
  CONSTRAINT PK_PERSONAS_PACIENTES_ART_0 PRIMARY KEY (ID_PACIENTE)
);
CREATE TABLE PERSONAS_PADRES
(
  ID D_ID NOT NULL,
  CONSTRAINT PK_PERSONAS_PADRES_0 PRIMARY KEY (ID)
);
CREATE TABLE PERSONAS_PROVEEDORES
(
  ID D_ID NOT NULL,
  CONSTRAINT PK_PERSONAS_PROVEEDORES_0 PRIMARY KEY (ID)
);
CREATE TABLE PERSONAS_PROVEEDORES_ATR
(
  ID D_ID NOT NULL,
  CODIGO D_CODIGO NOT NULL,
  CONSTRAINT PK_PERSONAS_PROVEEDORES_ATR_0 PRIMARY KEY (ID),
  CONSTRAINT UNQ_PERSONAS_PROVEEDORES_ATR_0 UNIQUE (CODIGO)
);
CREATE TABLE PLAN_CUENTA_CONTABLE
(
  ID D_ID NOT NULL,
  PAIS D_VARCHAR_15 NOT NULL,
  CODIGO_CUENTA_CONTABLE D_CODIGO_CUENTA_CONTABLE,
  NOMBRE_CUENTA D_VARCHAR_255 NOT NULL,
  TIPO_CUENTA D_TIPO_CUENTAS NOT NULL,
  NIVEL_CUENTA D_NIVEL_CUENTA NOT NULL,
  USA_TERCERO D_BOOLEAN_F NOT NULL,
  CENTRO_COSTOS D_BOOLEAN_F NOT NULL,
  PORCENTAJE_BASE D_DESCUENTO DEFAULT 0 NOT NULL,
  MONTO_BASE_MIN D_DINERO DEFAULT 0 NOT NULL,
  DETALLE_CUENTA D_BLOB_TEXTO DEFAULT 'NO PROPORCIONADO',
  CONSTRAINT INTEG_286 PRIMARY KEY (ID),
  CONSTRAINT UNQ_PLAN_CUENTA_CONTABLE_0 UNIQUE (PAIS,CODIGO_CUENTA_CONTABLE)
);
CREATE TABLE PRODUCTOS
(
  ID D_ID NOT NULL,
  ID_CATEGORIA D_ID NOT NULL,
  CODIGO D_VARCHAR_25 NOT NULL,
  DESCRIPCION D_VARCHAR_70 NOT NULL,
  IMAGEN_TEXTO D_BLOB_TEXTO,
  NOTA D_VARCHAR_1024 DEFAULT 'N/A',
  FECHA_CREACION D_FECHA,
  ESTADO D_BOOLEAN_T,
  USER_NAME D_USER_NAME,
  ROL D_ROL,
  CONSTRAINT INTEG_143 PRIMARY KEY (ID),
  CONSTRAINT INTEG_2475 UNIQUE (CODIGO),
  CONSTRAINT INTEG_2477 UNIQUE (DESCRIPCION)
);
CREATE TABLE PROVINCIAS
(
  ID D_ID NOT NULL,
  NOMBRE D_VARCHAR_45 NOT NULL,
  ZONA D_PUNTO_CARDINALES,
  CONSTRAINT INTEG_149 PRIMARY KEY (ID)
);
CREATE TABLE RECCOUNT
(
  ID D_ID NOT NULL,
  TABLA D_VARCHAR_45 NOT NULL,
  CANTIDAD D_ID NOT NULL,
  CONSTRAINT INTEG_151 PRIMARY KEY (ID),
  CONSTRAINT UNQ_RECCOUNT_0 UNIQUE (TABLA)
);
CREATE TABLE RECETAS
(
  ID D_ID NOT NULL,
  IDCONSULTA D_ID NOT NULL,
  FECHA D_FECHA_HORA NOT NULL,
  USER_NAME D_USER_NAME NOT NULL,
  CONSTRAINT INTEG_154 PRIMARY KEY (ID)
);
CREATE TABLE RELACION_PADRE_ESTUDIANTE
(
  ID_PADRE_O_MADRE D_ID DEFAULT 0 NOT NULL,
  ID_ESTUDIANTE D_ID DEFAULT 0 NOT NULL,
  CONSTRAINT PK_RELACION_PADRE_ESTUDIANTE_0 PRIMARY KEY (ID_PADRE_O_MADRE,ID_ESTUDIANTE)
);
CREATE TABLE RELACION_PADRE_PACIENTE
(
  ID_PADRE_O_MADRE D_ID DEFAULT 0 NOT NULL,
  ID_PACIENTE D_ID DEFAULT 0 NOT NULL,
  CONSTRAINT PK_RELACION_PADRE_PACIENTE_0 PRIMARY KEY (ID_PADRE_O_MADRE,ID_PACIENTE)
);
CREATE TABLE SINTOMAS
(
  ID D_ID NOT NULL,
  ID_PACIENTE D_ID DEFAULT 0 NOT NULL,
  SINTOMAS D_VARCHAR_255,
  FECHA D_FECHA,
  HORA D_HORA,
  NOTA D_VARCHAR_255,
  USER_NAME D_USER_NAME,
  CONSTRAINT INTEG_158 PRIMARY KEY (ID)
);
CREATE TABLE TANDAS
(
  ID D_ID NOT NULL,
  ANNO_INICIAL D_FECHA DEFAULT CURRENT_DATE NOT NULL,
  ANNO_FINAL D_FECHA NOT NULL,
  HORA_INICIO D_HORA NOT NULL,
  HORA_FINAL D_HORA NOT NULL,
  LUNES D_BOOLEAN_F,
  MARTES D_BOOLEAN_F,
  MIERCOLES D_BOOLEAN_F,
  JUEVES D_BOOLEAN_F,
  VIERNES D_BOOLEAN_F,
  SABADOS D_BOOLEAN_F,
  DOMINGOS D_BOOLEAN_F,
  CANTIDAD_ESTUDIANTES D_TURNO,
  CON_EDAD D_BOOLEAN_T,
  EDAD_MINIMA D_TURNO,
  EDAD_MAXIMA D_TURNO,
  ESTADO D_BOOLEAN_T,
  CONSTRAINT INTEG_160 PRIMARY KEY (ID)
);
CREATE TABLE TIPOS_SANGRE
(
  ID D_ID NOT NULL,
  DESCRIPCION D_SANGRE_SIMBOLOS,
  CONSTRAINT INTEG_165 PRIMARY KEY (ID)
);
CREATE TABLE TURNOS
(
  ID D_ID NOT NULL,
  TURNO_USUARIO D_USER_NAME,
  FECHA_HORA_INICIO D_FECHA_HORA NOT NULL,
  FECHA_HORA_FINAL D_FECHA_HORA,
  ESTADO D_BOOLEAN_T NOT NULL,
  MONTO_FACTURADO D_DINERO,
  MONTO_DEVUELTO D_DINERO,
  MONTO_EFECTIVO D_DINERO,
  MONTO_CREDITO D_DINERO,
  ROL D_ROL,
  USER_NAME D_USER_NAME,
  CONSTRAINT INTEG_166 PRIMARY KEY (ID)
);
/********************* VIEWS **********************/

CREATE VIEW GET_CAJEROS (USER_NAME, ROL, PNOMBRE, SNOMBRE, APELLIDOS, ESTADO, DESCRIPCION)
AS SELECT r.USER_NAME, r.ROL, u.PNOMBRE, u.SNOMBRE, u.APELLIDOS, u.ESTADO, u.DESCRIPCION
FROM GET_ROL r 
INNER JOIN V_USUARIOS u ON TRIM(u.USERNAME) LIKE TRIM(r.USER_NAME)
WHERE r.ROL LIKE 'RRR_CAJERO' AND r.USER_NAME NOT STARTING 'SYSDBA'
/*
     Esta vista permite obtener la lista de los cajeros del sistema, la cual han sido asignado al rol de 
     RRR_CAJERO. 
     
     Se evita en esta consulta de obtener el usuario SYSDBA por cuestiones logica, ya que es el super 
     usuario del sistema. 
*/;
CREATE VIEW GET_CAJEROS_DISPONIBLES (USER_NAME, ROL, PNOMBRE, SNOMBRE, APELLIDOS, ESTADO, DESCRIPCION)
AS SELECT r.USER_NAME, r.ROL, r.PNOMBRE, r.SNOMBRE, r.APELLIDOS, r.ESTADO, r.DESCRIPCION
FROM GET_CAJEROS r
INNER JOIN V_TURNOS t ON TRIM(t.TURNO_USUARIO) LIKE TRIM(r.USER_NAME) AND t.ESTADO IS FALSE
/*
     Esta consulta nos permite obtener los usuarios de sistema con el rol de RRR_CAJERO, lo cuales son
     utilizado para hacer facturas en el sistema.
     
     Los campos ESTADOS de las tablas pueden prestarse a confuccion. 
     El primero r.ESTADO es el estado del usuario en el sistema y el segundo t.ESTADO define si un usuario 
     tiene un turno activo, siendo true para indicar si lo tiene y false para indicar que ha sido cerrado. 
*/;
CREATE VIEW GET_CATEGORIA_ACTIVAS (ID, DESCRIPCION, IMAGEN_TEXTO)
AS WITH V_PRODUCTOS_CTE AS (
     SELECT p.ID_CATEGORIA, p.ESTADO
     FROM V_PRODUCTOS p
     WHERE p.ID >= 0 AND p.ESTADO
)
SELECT c.ID, c.DESCRIPCION, c.IMAGEN_TEXTO
FROM V_CATEGORIAS c
RIGHT JOIN V_PRODUCTOS_CTE p ON c.ID = p.ID_CATEGORIA AND p.ESTADO
WHERE c.ID >= 0
/*
     De la tabla de PRODUCTOS traemos las clases de las CATEGORIAS que estan en uso en la tabla.
*/;
CREATE VIEW GET_CLIENTES (ID, ID_PROVINCIA, ID_MUNICIPIO, ID_DISTRITO_MUNICIPAL, ID_CODIGO_POSTAL, ID_TIPO_SANGRE, 
     PERSONA, CEDULA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, DIRECCION, FECHA_NACIMIENTO, FECHA_INGRESO, 
     FECHA_HORA_ULTIMO_UPDATE, ESTADO, ESTADO_CIVIL)
AS /*
     Consulta a la base de datos.
*/
SELECT r.ID, d.ID_PROVINCIA, d.ID_MUNICIPIO, d.ID_DISTRITO_MUNICIPAL, 
     d.ID_CODIGO_POSTAL, g.ID_TIPO_SANGRE, r.PERSONA, g.CEDULA, r.PNOMBRE, 
     r.SNOMBRE, r.APELLIDOS, r.SEXO, d.DIRECCION, r.FECHA_NACIMIENTO,
     r.FECHA_INGRESO, r.FECHA_HORA_ULTIMO_UPDATE, r.ESTADO, g.ESTADO_CIVIL
FROM V_PERSONAS_CLIENTES c 
INNER JOIN V_PERSONAS r ON r.ID = c.ID
INNER JOIN V_CONTACTOS_DIRECCIONES d ON d.ID_PERSONA = c.ID
INNER JOIN V_GENERALES g ON g.ID_PERSONA = c.ID;
CREATE VIEW GET_CLIENTES_CC (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, CORREO, SALDO)
AS SELECT c.ID, p.PERSONA, p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, 
     CASE p.SEXO
          WHEN 'M' THEN 'Masculino'
          WHEN 'F' THEN 'Femenino' 
          ELSE 'No definido'
     END, e.EMAIL, COALESCE(a.SALDO, 0.00) AS SALDO
FROM V_PERSONAS_CLIENTES c 
LEFT JOIN V_PERSONAS_CLIENTES_ATR a ON a.ID = c.ID
LEFT JOIN V_PERSONAS p ON p.ID = c.ID
LEFT JOIN V_CONTACTOS_EMAIL e ON e.ID_PERSONA = c.ID
WHERE p.ESTADO AND e.POR_DEFECTO and e.ESTADO AND c.ID > 0;
CREATE VIEW GET_CLIENTES_SB (ID, CEDULA, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, FECHA_NACIMIENTO, ESTADO_CIVIL, 
     FECHA_INGRESO, ESTADO)
AS SELECT r.ID, g.CEDULA, r.PERSONA, r.PNOMBRE, r.SNOMBRE, r.APELLIDOS, r.SEXO,  
          r.FECHA_NACIMIENTO, g.ESTADO_CIVIL, r.FECHA_INGRESO, r.ESTADO
FROM V_PERSONAS_CLIENTES c 
INNER JOIN V_PERSONAS r ON r.ID = c.ID
INNER JOIN V_GENERALES g ON g.ID_PERSONA = c.ID
WHERE c.ID >= 0;
CREATE VIEW GET_DEUDAS (ID, ID_CLIENTE, ID_FACTURA, CONCEPTO, MONTO, FECHA, HORA, ESTADO, P_NOMBRE, S_NOMBRE, 
     APELLIDOS, CEDULA)
AS SELECT d.ID, d.ID_CLIENTE, d.ID_FACTURA, d.CONCEPTO, d.MONTO, d.FECHA, d.HORA, 
          DECODE(d.ESTADO, 'i', 'Inicial', 'p', 'Pagada', 'a', 'Abonada', 'n','Nula','No Definida') AS ESTADO,
          p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, 
          g.CEDULA
FROM V_DEUDAS d
INNER JOIN V_PERSONAS p ON p.ID = d.ID_CLIENTE
INNER JOIN V_GENERALES g ON g.ID_PERSONA = d.ID_CLIENTE
WHERE d.ESTADO IN('c', 'i', 'a');
CREATE VIEW GET_DIRECCION_BY_ID (ID, ID_PERSONA, ID_PROVINCIA, PROVINCIA, ID_MUNICIPIO, MUNICIPIO, 
     ID_DISTRITO_MUNICIPAL, DISTRITO_MUNICIPAL, ID_CODIGO_POSTAL, CODIGO_POSTAL, DIRECCION, FECHA, ESTADO, POR_DEFECTO)
AS SELECT r.ID, r.ID_PERSONA, 
     r.ID_PROVINCIA, p.NOMBRE, 
     r.ID_MUNICIPIO, m.NOMBRE,
     r.ID_DISTRITO_MUNICIPAL, d.NOMBRE, 
     r.ID_CODIGO_POSTAL, c.CODIGO_POSTAL, 
     r.DIRECCION, r.FECHA, r.ESTADO, r.POR_DEFECTO
FROM V_CONTACTOS_DIRECCIONES r
LEFT JOIN V_PROVINCIAS p ON p.ID = r.ID_PROVINCIA
LEFT JOIN V_MUNICIPIOS m ON m.ID = r.ID_MUNICIPIO
LEFT JOIN V_DISTRITOS_MUNICIPALES d ON d.ID = r.ID_DISTRITO_MUNICIPAL
LEFT JOIN V_CODIGOS_POSTALES c ON c.ID = r.ID_CODIGO_POSTAL
WHERE r.ID >= 0 AND p.ID >= 0 AND m.ID >= 0 AND d.ID >= 0 AND c.ID >= 0;
CREATE VIEW GET_D_FACTURAS (ID_FACTURA, ID_LINEA, ID_PRODUCTO, DESCRIPCION, CANTIDAD)
AS SELECT r.ID_FACTURA, r.ID_LINEA, r.ID_PRODUCTO, p.DESCRIPCION, r.CANTIDAD
FROM V_D_FACTURAS r 
LEFT JOIN V_PRODUCTOS p ON p.ID = r.ID_PRODUCTO
WHERE r.ID_FACTURA >= 0 AND p.ID >= 0
/*
     SELECT Anterior:
      SELECT r.ID_FACTURA, r.ID_LINEA, r.ID_PRODUCTO, p.DESCRIPCION, r.PRECIO, r.CANTIDAD, (r.PRECIO * r.CANTIDAD) AS TOTAL
      FROM V_D_FACTURAS r 
      LEFT JOIN V_PRODUCTOS p ON p.ID = r.ID_PRODUCTO
      WHERE r.ID_FACTURA >= 0 AND p.ID >= 0


     He eliminado el campo precio y total porque este campo deberia de vinir de otra tabla, dicha tabla es la 
     ENTRADA_PRODUCTOS que debe contenerlo. 
*/;
CREATE VIEW GET_ESTUDIANTES_SV (ID, MATRICULA, CEDULA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, FECHA_NACIMIENTO, ESTADO)
AS SELECT r.ID, e.MATRICULA, g.CEDULA, r.PNOMBRE, r.SNOMBRE, 
     r.APELLIDOS, r.SEXO, r.FECHA_NACIMIENTO, r.ESTADO
FROM V_PERSONAS_ESTUDIANTES_ATR e 
INNER JOIN V_PERSONAS r ON r.ID = e.ID
INNER JOIN V_GENERALES g ON g.ID_PERSONA = e.ID
/*
     Debe de obtenerse las relaciones entre padre he hijo de la tabla RELACION_FAMILIAR.
*/;
CREATE VIEW GET_PACIENTES (ID, ID_ARS, NONSS, ID_TIPO_SANGRE, CEDULA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
     FECHA_NACIMIENTO, FECHA_INGRESO, FECHA_HORA_ULTIMO_UPDATE, ESTADO)
AS SELECT r.ID, a.ID_ARS, a.NO_NSS, g.ID_TIPO_SANGRE, 
     g.CEDULA, p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, p.SEXO, p.FECHA_NACIMIENTO, 
     p.FECHA_INGRESO, p.FECHA_HORA_ULTIMO_UPDATE, p.ESTADO
FROM V_PERSONAS_PACIENTES r 
INNER JOIN V_PERSONAS p ON p.ID = r.ID
INNER JOIN V_ASEGURADOS a ON a.ID_PERSONA = r.ID
INNER JOIN V_GENERALES g ON g.ID_PERSONA = r.ID
WHERE r.ID >= 0 AND p.ID >= 0 AND a.ID_PERSONA >= 0 AND g.ID_PERSONA >= 0 
/*
     Debe de obtenerse las relaciones entre padre he hijo de la tabla RELACION_FAMILIAR.
*/;
CREATE VIEW GET_PERSONAS_ID (ID, CEDULA, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, FECHA_NACIMIENTO, ESTADO_CIVIL, 
     FECHA_INGRESO, ESTADO)
AS SELECT ID, CEDULA, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, FECHA_NACIMIENTO, 
     ESTADO_CIVIL, FECHA_INGRESO, ESTADO
FROM V_PERSONAS 
INNER JOIN V_GENERALES ON ID_PERSONA = ID
WHERE ID >= 0
/*
     Este procedimiento fue creado con la necesidad de obtener los datos de la personas sin
     la necesidad de estar ligado a otra tabla de entidades. Por ejemplo PERSONAS_CLIENTES
     PERSONAS_ESTUDIANTES, PERSONAS_PROVEEDORES entre otras. Ya que se tiene la necesidad de 
     obtener los atributos de estas entidades sin mediar con este tipo de tabla. 
*/;
CREATE VIEW GET_PRIVILEGIOS (USER_NAME, CEDENTE, PRIVILEGIO, OPCION_PERMISO, NOMBRE_RELACION, NOMBRE_CAMPO, 
     TIPO_USUARIO, TIPO_OBJECTO)
AS SELECT r.RDB$USER, r.RDB$GRANTOR, r.RDB$PRIVILEGE, r.RDB$GRANT_OPTION, 
       r.RDB$RELATION_NAME, r.RDB$FIELD_NAME, r.RDB$USER_TYPE, r.RDB$OBJECT_TYPE
FROM RDB$USER_PRIVILEGES r;
CREATE VIEW GET_PRODUCTOS (ID, ID_CATEGORIA, DESC_CATEGORIA, IMAGEN_CATEGORIA, CODIGO, DESCRIPCION, IMAGEN_PRODUCTO, 
     NOTA, FECHA_CREACION, ESTADO)
AS /*
     Esta consulta nos permite obtener un listado de producto, del cual al unirla con la tabla de categoria podemos
     obtener el nombre o descripcion de la categoria y la imagen de la categoria, ademas de los atributos del 
     producto como identificador, codigo, descripcion, imagen del producto, nota, fecha de creacion y estado.
*/
SELECT r.ID, r.ID_CATEGORIA, c.DESCRIPCION, c.IMAGEN_TEXTO, r.CODIGO, 
       r.DESCRIPCION, r.IMAGEN_TEXTO, r.NOTA, r.FECHA_CREACION, r.ESTADO
FROM V_PRODUCTOS r
INNER JOIN V_CATEGORIAS c ON c.ID = r.ID_CATEGORIA;
CREATE VIEW GET_ROL (USER_NAME, ROL)
AS SELECT UPPER(TRIM(p.RDB$USER)) AS USER_NAME, TRIM(p.RDB$RELATION_NAME) AS ROL
FROM RDB$USER_PRIVILEGES p
WHERE p.RDB$PRIVILEGE = 'M';
CREATE VIEW GET_ROLES (ROL, PROPIETARIO, DESCRIPCION)
AS SELECT RDB$ROLE_NAME, r.RDB$OWNER_NAME, r.RDB$DESCRIPTION 
FROM RDB$ROLES r
WHERE r.RDB$ROLE_NAME STARTING WITH 'R' AND TRIM(r.RDB$ROLE_NAME) NOT LIKE 'RRR_SOFTSURENA';
CREATE VIEW GET_TANDAS_DETALLADAS (ID, HORARIO)
AS SELECT t.id, trim( case lunes when 1 then 'Lunes ' else trim('') end || 
                   case martes when 1 then 'Martes ' else trim('') end ||           
                   case miercoles when 1 then 'Miercoles ' else trim('') end ||           
                   case jueves when 1 then 'Jueves ' else trim('') end ||            
                   case viernes when 1 then 'Viernes ' else trim('') end ||           
                   case sabados when 1 then 'Sabados ' else trim('') end||           
                   case domingos when 1 then 'Domingos ' else trim('') end) || ' De ' ||           
                   subString(t.Hora_Inicio FROM 1 for 8) ||' Hasta '||              
                   subString(t.Hora_Final FROM 1 for 8) AS HORARIO 
FROM V_TANDAS t;
CREATE VIEW GET_TEMPORALES (ID_FACTURA, NOMBRE_TEMP, PNOMBRE, SNOMBRE, APELLIDOS, ID_TURNO, EFECTIVO, CAMBIO, 
     FECHA_HORA, ESTADO_FACTURA, ID_CLIENTE, USER_NAME)
AS SELECT f.ID, f.NOMBRE_TEMP, p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, 
      f.ID_TURNO, f.EFECTIVO, f.CAMBIO, f.FECHA_HORA, f.ESTADO_FACTURA, f.ID_CLIENTE, f.USER_NAME
FROM V_FACTURAS f     
LEFT JOIN V_PERSONAS_CLIENTES c on c.ID = f.ID_CLIENTE 
LEFT JOIN V_PERSONAS p ON p.ID = f.ID_CLIENTE
LEFT JOIN V_D_FACTURAS d on d.ID_FACTURA = f.ID 
WHERE f.ESTADO_FACTURA = 't' 
GROUP by f.ID, f.NOMBRE_TEMP, p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, 
          f.ID_TURNO, f.EFECTIVO, f.CAMBIO, f.FECHA_HORA, f.ESTADO_FACTURA, f.ID_CLIENTE, f.USER_NAME
/*
     SELECT Anterior: 
          SELECT f.ID, f.NOMBRE_TEMP, p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, 
                f.ID_TURNO, f.EFECTIVO, f.CAMBIO, f.FECHA_HORA, f.ESTADO_FACTURA,
                    cast(sum((d.CANTIDAD * d.PRECIO )) as D_DINERO) as MONTO, f.ID_CLIENTE, f.USER_NAME
          FROM V_FACTURAS f     
          LEFT JOIN V_PERSONAS_CLIENTES c on c.ID = f.ID_CLIENTE 
          LEFT JOIN V_PERSONAS p ON p.ID = f.ID_CLIENTE
          LEFT JOIN V_D_FACTURAS d on d.ID_FACTURA = f.ID 
          WHERE f.ESTADO_FACTURA = 't' 
          GROUP by f.ID, f.NOMBRE_TEMP, p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, 
                    f.ID_TURNO, f.EFECTIVO, f.CAMBIO, f.FECHA_HORA, f.ESTADO_FACTURA, f.ID_CLIENTE, f.USER_NAME
     Se han eliminado los campos precio de aqui, ya que ese campo debe venir de otra tabla como ENTRADA_PRODUCTOS,
*/;
CREATE VIEW V_ANALISIS (ID, ID_PACIENTE, FECHA_HORA_CREADA, FECHA_HORA_VISTA, T_BHCG, T_EMB_ORINA, T_EMB_SANGRE, 
     T_ANT_AUSTRALIANO_BBSAG, T_CLAMIDIA_IGA, T_FTA_ABS, T_HIV, T_VDRL, T_ACIDO_URICO, T_ANT_FEBRILES, T_ASO_LATEX, 
     T_BILIRRUBINA, T_COLESTEROL_TOTAL, T_COLESTEROL_HDL, T_COLESTEROL_HDL_LDL, T_COPROLOGICO, T_CREATININA_SUERO, 
     T_CULTIVO_FARINGE, T_CULTIVO_HECES, T_CULTIVO_HERIDA_AEROBICO, T_CULTIVO_OIDO, T_CULTIVO_SANGRE, T_CULTIVO_SEMEN, 
     T_CULTIVO_URETRA, T_CULTIVO_VAGINA, T_ELECTRO_HEMOGLOBINA, T_ERITROSEDIMENTACION, T_ESPERMATOGRAMA, T_ESTRADIOL, 
     T_ESTROGENO_TOTALES, T_FACTOR_REUMATOIDE, T_FALCEMIA, T_FOSFATASA_ALCALINA, T_FSH, T_GLICEMIA, 
     T_HEMOGLO_GLUCOSILADA, T_HEMOGRAMA, T_HEPATITIS_A, T_HEPATITIS_C, T_KOH, T_LH, T_ORINA, T_PCR, T_PROGESTERONA, 
     T_PROLACTINA, T_PROTEINAS_TOTALES, T_PSA_TOTAL, T_PSA_LIBRE, T_SANG_OCULT_HECES, T_SGOT_TGO, T_SGOT_TGP, T_T3, 
     T_T4, T_T4_LIBRE, T_COOMBS_DIRECTO, T_COOMBS_INDIRECTO, T_TESTOSTERONA, T_TIPIFICACION_SANGUINEA, T_TOXOPLAS_IGG, 
     T_TOXOPLAS_IGM, T_TRIGLICERIDOS, T_TSH, T_TUBERCULINA, T_UREA, OTROS, USER_NAME, ROL)
AS SELECT ID, ID_PACIENTE, FECHA_HORA_CREADA, FECHA_HORA_VISTA, T_BHCG, T_EMB_ORINA, T_EMB_SANGRE, 
     T_ANT_AUSTRALIANO_BBSAG, T_CLAMIDIA_IGA, T_FTA_ABS, T_HIV, T_VDRL, T_ACIDO_URICO,
     T_ANT_FEBRILES, T_ASO_LATEX, T_BILIRRUBINA, T_COLESTEROL_TOTAL, T_COLESTEROL_HDL, T_COLESTEROL_HDL_LDL, 
     T_COPROLOGICO, T_CREATININA_SUERO, T_CULTIVO_FARINGE, T_CULTIVO_HECES, T_CULTIVO_HERIDA_AEROBICO, T_CULTIVO_OIDO, 
     T_CULTIVO_SANGRE, T_CULTIVO_SEMEN, T_CULTIVO_URETRA, T_CULTIVO_VAGINA, T_ELECTRO_HEMOGLOBINA, 
     T_ERITROSEDIMENTACION, T_ESPERMATOGRAMA, T_ESTRADIOL, T_ESTROGENO_TOTALES, T_FACTOR_REUMATOIDE, T_FALCEMIA,
     T_FOSFATASA_ALCALINA, T_FSH, T_GLICEMIA, T_HEMOGLO_GLUCOSILADA, T_HEMOGRAMA, T_HEPATITIS_A, T_HEPATITIS_C, T_KOH, 
     T_LH, T_ORINA, T_PCR, T_PROGESTERONA, T_PROLACTINA, T_PROTEINAS_TOTALES, T_PSA_TOTAL, T_PSA_LIBRE, 
     T_SANG_OCULT_HECES, T_SGOT_TGO, T_SGOT_TGP, T_T3, T_T4, T_T4_LIBRE, T_COOMBS_DIRECTO, T_COOMBS_INDIRECTO, 
     T_TESTOSTERONA, T_TIPIFICACION_SANGUINEA, T_TOXOPLAS_IGG, T_TOXOPLAS_IGM, T_TRIGLICERIDOS, T_TSH, T_TUBERCULINA, 
     T_UREA, OTROS, USER_NAME,
     ROL
FROM ANALISIS 
WHERE ID >= 0;
CREATE VIEW V_ANTECEDENTES (ID, ID_CONSULTA, DESCRIPCION)
AS SELECT ID, ID_CONSULTA, DESCRIPCION
FROM ANTECEDENTES 
WHERE ID >= 0;
CREATE VIEW V_ARS (ID, DESCRIPCION, COVERTURA_CONSULTA_PORCIENTO, ESTADO, CANTIDAD_REGISTRO)
AS SELECT ID, DESCRIPCION, COVERCONSULTAPORC, ESTADO, CANTIDAD_REGISTRO
FROM ARS
WHERE ID >= 0;
CREATE VIEW V_ASEGURADOS (ID_PERSONA, ID_ARS, NO_NSS, ESTADO)
AS SELECT r.ID_PERSONA, r.ID_ARS, r.NO_NSS, r.ESTADO 
FROM ASEGURADOS r
WHERE ID_PERSONA >= 0;
CREATE VIEW V_CARTONES_BINGO (ID, CARTON_HASH, FECHA_CREACCION, MATRIZ_OBJ, ESTADO)
AS SELECT ID, CARTON_HASH, FECHA_CREACCION, MATRIZ_OBJ, ESTADO
FROM CARTONES_BINGO 
WHERE ID >= 0 AND CARTON_HASH <> 0;
CREATE VIEW V_CATEGORIAS (ID, DESCRIPCION, IMAGEN_TEXTO, FECHA_CREACION, ESTADO, USER_NAME)
AS SELECT r.ID, r.DESCRIPCION, r.IMAGEN_TEXTO, r.FECHA_CREACION, r.ESTADO, r.USER_NAME
FROM CATEGORIAS r
WHERE r.ID >= 0;
CREATE VIEW V_CODIGOS_POSTALES (ID, IDPROVINCIA, LOCALIDAD, CODIGO_POSTAL)
AS SELECT ID, IDPROVINCIA, LOCALIDAD, CODIGO_POSTAL
FROM CODIGOS_POSTALES 
WHERE ID >= 0;
CREATE VIEW V_CONSULTAS (ID, ID_PACIENTE, ID_CONTROL_CONSULTA, FECHA, TURNO, ESTADO, USER_NAME)
AS SELECT ID, ID_PACIENTE, ID_CONTROL_CONSULTA, FECHA, TURNO, ESTADO, USER_NAME
FROM CONSULTAS
WHERE ID >= 0;
CREATE VIEW V_CONSULTAS_APROBADAS (ID, COD_AUTORIZACION, COSTO, DESCUENTO, TOTALCOSTO, USER_NAME)
AS SELECT ID, COD_AUTORIZACION, COSTO, DESCUENTO, TOTALCOSTO, USER_NAME
FROM CONSULTAS_APROBADAS 
WHERE ID >= 0;
CREATE VIEW V_CONTACTOS_DIRECCIONES (ID, ID_PERSONA, ID_PROVINCIA, ID_MUNICIPIO, ID_DISTRITO_MUNICIPAL, 
     ID_CODIGO_POSTAL, DIRECCION, FECHA, ESTADO, POR_DEFECTO)
AS SELECT ID, ID_PERSONA, ID_PROVINCIA, ID_MUNICIPIO, ID_DISTRITO_MUNICIPAL, ID_CODIGO_POSTAL, 
     DIRECCION, FECHA, ESTADO, POR_DEFECTO
FROM CONTACTOS_DIRECCIONES
WHERE ID >= 0;
CREATE VIEW V_CONTACTOS_EMAIL (ID, ID_PERSONA, EMAIL, FECHA, ESTADO, POR_DEFECTO)
AS SELECT ID, ID_PERSONA, EMAIL, FECHA, ESTADO, POR_DEFECTO
FROM CONTACTOS_EMAIL
WHERE ID >= 0;
CREATE VIEW V_CONTACTOS_TEL (ID, ID_PERSONA, TELEFONO, TIPO, FECHA, ESTADO, POR_DEFECTO)
AS SELECT ID, ID_PERSONA, TELEFONO, TIPO, FECHA, ESTADO, POR_DEFECTO
FROM CONTACTOS_TEL 
WHERE ID >= 0;
CREATE VIEW V_CONTROL_CONSULTA (ID, USER_NAME, CANTIDAD_PACIENTE, DIA, INICIAL, FINAL, ESTADO, USER_NAME_)
AS SELECT ID, USER_NAME, CANTIDADPACIENTE, DIA, INICIAL, FINAL, ESTADO, USER_NAME_
FROM CONTROL_CONSULTA
WHERE ID >= 0;
CREATE VIEW V_DEUDAS (ID, ID_CLIENTE, ID_FACTURA, CONCEPTO, MONTO, FECHA, HORA, ESTADO)
AS SELECT ID, ID_CLIENTE, ID_FACTURA, CONCEPTO, MONTO, FECHA, HORA, ESTADO
FROM DEUDAS 
WHERE ID >= 0;
CREATE VIEW V_DISTRITOS_MUNICIPALES (ID, NOMBRE, IDMUNICIPIO)
AS SELECT ID, NOMBRE, IDMUNICIPIO
FROM DISTRITOS_MUNICIPALES 
WHERE ID >= 0;
CREATE VIEW V_D_DEUDAS_PAGAS (ID, ID_DEUDAS, MONTO_PAGO, FECHA_HORA)
AS SELECT ID, ID_DEUDAS, MONTO_PAGO, FECHA_HORA
FROM D_DEUDAS_PAGAS 
WHERE ID >= 0;
CREATE VIEW V_D_FACTURAS (ID_FACTURA, ID_LINEA, ID_PRODUCTO, CANTIDAD)
AS SELECT ID_FACTURA, ID_LINEA, ID_PRODUCTO, CANTIDAD
FROM D_FACTURAS 
WHERE ID_FACTURA >= 0;
CREATE VIEW V_D_GUIA_VIGILANCIA_DESARROLLO (ID_GVD, ID_PACIENTE, FECHA)
AS SELECT ID_GVD, ID_PACIENTE, FECHA
FROM D_GUIA_VIGILANCIA_DESARROLLO 
WHERE ID_GVD >= 0;
CREATE VIEW V_D_MOTIVO_CONSULTA (IDCONSULTA, IDMCONSULTA)
AS SELECT IDCONSULTA, IDMCONSULTA
FROM D_MOTIVO_CONSULTA 
WHERE IDCONSULTA >= 0 AND IDMCONSULTA >= 0;
CREATE VIEW V_D_RECETAS (ID_RECETA, LINEA, ID_MEDICAMENTO, CANTIDAD, D_DOSIS)
AS SELECT ID_RECETA, LINEA, ID_MEDICAMENTO, CANTIDAD, D_DOSIS
FROM D_RECETAS 
WHERE ID_RECETA >= 0;
CREATE VIEW V_ENTRADA_PRODUCTOS (ID, ID_PROVEDOR, COD_FACTURA, LINEA, ID_PRODUCTO, ENTRADA, FECHAVECIMIENTO, ESTADO, 
     ROL, USER_NAME)
AS SELECT ID, IDPROVEDOR, COD_FACTURA, LINEA, IDPRODUCTO, ENTRADA,
     FECHAVECIMIENTO, ESTADO, ROL, USER_NAME
FROM ENTRADA_PRODUCTOS
WHERE ID >= 0;
CREATE VIEW V_E_S_SYS (ID_E_S_SYS, NOMBRE, TELEFONOS, FCHI, FCHA, FCHV, IDMAC, DIRECCION, MENSAJE_FOOTER, LOGO)
AS SELECT ID_E_S_SYS, NOMBRE, TELEFONOS, FCHI, FCHA, FCHV, IDMAC,
     DIRECCION, MENSAJE_FOOTER, LOGO
FROM E_S_SYS
WHERE ID_E_S_SYS >= 0;
CREATE VIEW V_FACTURAS (ID, ID_CLIENTE, ID_CONTACTOS_TEL, ID_CONTACTOS_DIRECCIONES, ID_CONTACTOS_EMAIL, ID_TURNO, 
     FECHA_HORA, TOTAL, EFECTIVO, CAMBIO, ESTADO_FACTURA, NOMBRE_TEMP, USER_NAME)
AS SELECT ID, ID_CLIENTE, ID_CONTACTOS_TEL, ID_CONTACTOS_DIRECCIONES, ID_CONTACTOS_EMAIL,
     ID_TURNO, FECHA_HORA, TOTAL, EFECTIVO, (EFECTIVO - TOTAL) AS CAMBIO, 
     ESTADO_FACTURA, NOMBRE_TEMP, USER_NAME
FROM FACTURAS 
WHERE ID >= 0;
CREATE VIEW V_FCH_LC (I, A, V, ID)
AS --Vista para ver los datos de la Tabla E_S_SYS y usando el procedimiento como funcion
SELECT CAST(i.FTCNUEVOTEXTO as D_VARCHAR_70) as i, 
        CAST(a.FTCNUEVOTEXTO as D_VARCHAR_70) as a, 
        CAST(v.FTCNUEVOTEXTO as D_VARCHAR_70) as v,
        CAST(id.FTCNUEVOTEXTO as D_VARCHAR_255) as id
FROM V_E_S_SYS r
    LEFT JOIN SYSTEM_ENCRIPTAR(TRIM(r.FCHI), 'D', '2972015','8661203') i
        on 1=1
    LEFT JOIN SYSTEM_ENCRIPTAR(TRIM(r.FCHA), 'D', '2972015','8661203') a
        on 1=1
    LEFT JOIN SYSTEM_ENCRIPTAR(TRIM(r.FCHV), 'D', '2972015','8661203') v
        on 1=1
    LEFT JOIN SYSTEM_ENCRIPTAR(TRIM(r.IDMAC), 'D', '2972015','8661203') id
        on 1=1
WHERE r.ID_E_S_SYS >= 0;
CREATE VIEW V_GENERALES (ID_PERSONA, CEDULA, ID_TIPO_SANGRE, ESTADO_CIVIL)
AS SELECT ID_PERSONA, CEDULA, ID_TIPO_SANGRE, ESTADO_CIVIL
FROM GENERALES 
WHERE ID_PERSONA >= -1;
CREATE VIEW V_GUIA_VIGILANCIA_DESARROLLO (ID, EDAD, CARACT_DESARR_EVALUAR)
AS SELECT ID, EDAD, CARACT_DESARR_EVALUAR
FROM GUIA_VIGILANCIA_DESARROLLO
WHERE ID >= 0;
CREATE VIEW V_HUELLAS (ID, TIPO_DEDO, IMAGEN_TEXTO)
AS SELECT ID, TIPO_DEDO, IMAGEN_TEXTO
FROM HUELLAS
WHERE ID >= 0;
CREATE VIEW V_INSCRIPCION (ID, ID_ESTUDIANTE, ID_TANDA, PAGO, FECHA_INSCRIPCION, ROL, USER_NAME)
AS SELECT ID, ID_ESTUDIANTE, ID_TANDA, PAGO, FECHA_INSCRIPCION, ROL, USER_NAME
FROM INSCRIPCIONES
WHERE ID >= 0;
CREATE VIEW V_MENSAJES (ID, ID_DOCTOR, ID_PACIENTE, HORA, FECHA, MENSAJE, ESTADO)
AS SELECT ID, ID_DOCTOR, ID_PACIENTE, HORA, FECHA, MENSAJE, ESTADO
FROM MENSAJES 
WHERE ID >= 0;
CREATE VIEW V_METRICAS (ID, IDCONSULTA, FECHA, PESOKG, ESTATURAMETRO, ESCEFALO, NF_DETECT, HALLAZGOS_POS, ID_DIAG, TX, 
     COMPLEMENTO, IMAGEN_TEXTO, USER_NAME)
AS SELECT ID, IDCONSULTA, FECHA, PESOKG, ESTATURAMETRO, ESCEFALO, ENF_DETECT, HALLAZGOS_POS, ID_DIAG, TX, COMPLEMENTO,
     IMAGEN_TEXTO, USER_NAME
FROM METRICAS 
WHERE ID >= 0
WITH CHECK OPTION;
CREATE VIEW V_MOTIVO_CONSULTA (ID, DESCRIPCION)
AS SELECT ID, DESCRIPCION
FROM MOTIVO_CONSULTA
WHERE ID >= 0;
CREATE VIEW V_MUNICIPIOS (ID, NOMBRE, IDPROVINCIA)
AS SELECT ID, NOMBRE, IDPROVINCIA
FROM MUNICIPIOS 
WHERE ID >= 0;
CREATE VIEW V_PERSONAS (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, FECHA_NACIMIENTO, FECHA_INGRESO, 
     FECHA_HORA_ULTIMO_UPDATE, ESTADO)
AS SELECT ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, FECHA_NACIMIENTO, FECHA_INGRESO, 
     FECHA_HORA_ULTIMO_UPDATE, ESTADO
FROM PERSONAS 
WHERE ID >= 0
/*
     Es la tabla que almacena todas las informaciones de las entidades por debajo de ella.
     
     Estas entidades son:
          1) Los clientes
          2) Los estudiantes
          3) Los pacientes
          4) Los padres
          5) Los proveedores
          
     Reglas:
          Esta tabla no permite que se eliminen los registros de las entidades.
          
*/;
CREATE VIEW V_PERSONAS_CLIENTES (ID)
AS SELECT ID 
FROM PERSONAS_CLIENTES
WHERE ID >= 0
/*
     Tabla que almacena las claves primaria de los clientes.
     
     Para paginacion usar esto:
     
     ROWS (5 - 1) * 40 + 1 TO (5 + 1) * 40        donde 
     
     ROWS
     (nPaginaNro - 1) * nCantidadFilas + 1 TO (nPaginaNro + (nCantidadPaginas - 1)) * nCantidadFilas
     
     Utilizar el ORDER BY.
*/;
CREATE VIEW V_PERSONAS_CLIENTES_ATR (ID, TOTAL_FACTURADO, TOTAL_DEUDA, CANTIDAD_FACTURA, FECHA_ULTIMA_COMPRA, SALDO)
AS SELECT ID, TOTAL_FACTURADO, TOTAL_DEUDA, CANTIDAD_FACTURA, FECHA_ULTIMA_COMPRA, SALDO
FROM PERSONAS_CLIENTES_ATR
WHERE ID >= 0;
CREATE VIEW V_PERSONAS_ESTUDIANTES (ID)
AS SELECT ID
FROM PERSONAS_ESTUDIANTES 
WHERE ID >= 0
/*
     Tabla que almacenas las claves primarias de los estudiantes.
*/;
CREATE VIEW V_PERSONAS_ESTUDIANTES_ATR (ID, MATRICULA)
AS SELECT ID, MATRICULA
FROM PERSONAS_ESTUDIANTES_ATR 
WHERE ID >= 0 
/*

*/;
CREATE VIEW V_PERSONAS_ESTUDIANTES_VER (ID, MATRICULA, ESTADO)
AS SELECT  e.ID, ee.MATRICULA, p.ESTADO
FROM V_PERSONAS_ESTUDIANTES e 
INNER JOIN V_PERSONAS_ESTUDIANTES_ATR ee ON ee.ID = e.ID
INNER JOIN V_PERSONAS p ON p.ID = e.ID
/*
     Esta vista permite obtener el identificador, la matricula y el estado de un estudiante.
     Para verificar si un estudiante esta registrado en la base de datos por su matricula y que este en estado activo.
*/;
CREATE VIEW V_PERSONAS_PACIENTES (ID)
AS SELECT ID
FROM PERSONAS_PACIENTES
WHERE ID >= 0;
CREATE VIEW V_PERSONAS_PACIENTES_ART (ID_PACIENTE, PESO_NACIMIENTO_KG, ALTURA, PERIMETRO_CEFALICO, CESAREA, 
     TIEMPO_GESTACION, USER_NAME, MASA_CEFALICA)
AS SELECT ID_PACIENTE, PESO_NACIMIENTO_KG, ALTURA, PERIMETRO_CEFALICO, CESAREA, TIEMPO_GESTACION, USER_NAME, MASA_CEFALICA
FROM PERSONAS_PACIENTES_ATR
WHERE ID_PACIENTE >= 0
/*
     Vista que permite obtener los resultados de los paciente de aquellos atributos que lo caracterizan. 
*/;
CREATE VIEW V_PERSONAS_PADRES (ID)
AS SELECT ID 
FROM PERSONAS_PADRES
WHERE ID >= 0;
CREATE VIEW V_PERSONAS_PROVEEDORES (ID)
AS SELECT ID 
FROM PERSONAS_PROVEEDORES
WHERE ID >= 0;
CREATE VIEW V_PRODUCTOS (ID, ID_CATEGORIA, CODIGO, DESCRIPCION, IMAGEN_TEXTO, NOTA, FECHA_CREACION, ESTADO)
AS SELECT ID, ID_CATEGORIA, CODIGO, DESCRIPCION, IMAGEN_TEXTO, NOTA, FECHA_CREACION, ESTADO
FROM PRODUCTOS
WHERE ID >= 0;
CREATE VIEW V_PROVINCIAS (ID, NOMBRE, ZONA)
AS SELECT ID, NOMBRE, ZONA
FROM PROVINCIAS
WHERE ID >= 0;
CREATE VIEW V_RECCOUNT (ID, TABLA, CANTIDAD)
AS SELECT ID, TABLA, CANTIDAD
FROM RECCOUNT
WHERE ID >= 0;
CREATE VIEW V_RECETAS (ID, IDCONSULTA, FECHA)
AS SELECT ID, IDCONSULTA, FECHA
FROM RECETAS
WHERE ID >= 0;
CREATE VIEW V_SINTOMAS (ID, ID_PACIENTE, SINTOMAS, FECHA, HORA, NOTA)
AS SELECT ID, ID_PACIENTE, SINTOMAS, FECHA, HORA, NOTA
FROM SINTOMAS
WHERE ID >= 0;
CREATE VIEW V_TANDAS (ID, ANNO_INICIAL, ANNO_FINAL, HORA_INICIO, HORA_FINAL, LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, 
     SABADOS, DOMINGOS, CANTIDAD_ESTUDIANTES, CON_EDAD, EDAD_MINIMA, EDAD_MAXIMA, ESTADO)
AS SELECT ID, ANNO_INICIAL, ANNO_FINAL, HORA_INICIO, HORA_FINAL, LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADOS,
          DOMINGOS, CANTIDAD_ESTUDIANTES, CON_EDAD, EDAD_MINIMA, EDAD_MAXIMA, ESTADO
FROM TANDAS
WHERE ID >= 0;
CREATE VIEW V_TIME_LIC (ID, DIAS_RESTANTES)
AS --Vista para obtener los dias que falta de la licencia...
SELECT e.ID_E_S_SYS, DATEDIFF(DAY FROM CURRENT_DATE TO CAST(TRIM(s.FTCNUEVOTEXTO) as DATE)) as D
FROM E_S_SYS e
LEFT JOIN SYSTEM_ENCRIPTAR(e.FCHV, 'D', '2972015','8661203') s on 1=1
WHERE e.ID_E_S_SYS >= 0;
CREATE VIEW V_TIPOS_SANGRE (ID, DESCRIPCION)
AS SELECT ID, DESCRIPCION
FROM TIPOS_SANGRE 
WHERE ID >= 0;
CREATE VIEW V_TRANSACCION_ACTUAL (TNIDENTIFICADORTRANSACCION, TNIDENTIFICADORCONEXION, TCESTADOTRANSACCION, 
     TDFECHAHORA, TNULTIMATRANSACCION, TNOLDESTINTERESTINGTRANSACTION, TNOLDESTACTIVETRANSACTION, TCMODOAISLAMIENTO, 
     TCTIEMPOESPERA, TCREADONLY, TCAUTOCOMMIT, TCAUTOUNDO, TNIDENTIFICADORESTADISTICAS)
AS SELECT
   MON$TRANSACTION_ID             AS tnIdentificadorTransaccion,
   MON$ATTACHMENT_ID              AS tnIdentificadorConexion,
   IIF(MON$STATE = 1, 'ACTIVA', 'INACTIVA') AS tcEstadoTransaccion,
   MON$TIMESTAMP                  AS tdFechaHora,
   MON$TOP_TRANSACTION            AS tnUltimaTransaccion,
   MON$OLDEST_TRANSACTION         AS tnOldestInterestingTransaction,
   MON$OLDEST_ACTIVE              AS tnOldestActiveTransaction,
   DECODE(MON$ISOLATION_MODE, 
   0, 'Acceso exclusivo', 
   1, 'Lecturas repetidas', 
   2, 'Lee filas confirmadas inmediatamente', 
   3, 'No lee una fila si otra transacción la usa') AS tcModoAislamiento,
   DECODE(MON$LOCK_TIMEOUT, 
   -1, 'Espera por siempre', 
   0, 'No espera', 
   'Espera ' || MON$LOCK_TIMEOUT || ' segundos') AS tcTiempoEspera,
   IIF(MON$READ_ONLY = 1, 'Read Only', 'Read Write')               AS tcReadOnly,
   IIF(MON$AUTO_COMMIT = 1, 'Auto COMMIT', 'No auto COMMIT')       AS tcAutoCommit,
   IIF(MON$AUTO_UNDO = 1, 'Tiene savepoint', 'No tiene savepoint') AS tcAutoUndo,
   MON$STAT_ID                                                     AS tnIdentificadorEstadisticas
FROM
   MON$TRANSACTIONS
WHERE
   MON$ATTACHMENT_ID  = CURRENT_CONNECTION AND
   MON$TRANSACTION_ID = CURRENT_TRANSACTION;
CREATE VIEW V_TURNOS (ID, TURNO_USUARIO, FECHA_HORA_INICIO, FECHA_HORA_FINAL, ESTADO, MONTO_FACTURADO, MONTO_DEVUELTO, 
     MONTO_EFECTIVO, MONTO_CREDITO, ROL, USER_NAME)
AS SELECT ID, TURNO_USUARIO, FECHA_HORA_INICIO, FECHA_HORA_FINAL, ESTADO, MONTO_FACTURADO, MONTO_DEVUELTO,
       MONTO_EFECTIVO, MONTO_CREDITO, ROL, USER_NAME
FROM TURNOS
WHERE ID >= 0;
CREATE VIEW V_USUARIOS (USERNAME, PNOMBRE, SNOMBRE, APELLIDOS, ESTADO, ADMINISTRADOR, DESCRIPCION)
AS SELECT 
  CAST(U.SEC$USER_NAME AS D_USER_NAME)  AS USUARIO,
  U.SEC$FIRST_NAME                      AS PRIMER_NOMBRE,
  U.SEC$MIDDLE_NAME                     AS SEGUNDO_NOMBRE,
  U.SEC$LAST_NAME                       AS APELLIDO,
  U.SEC$ACTIVE                          AS ESTA_ACTIVO,
  U.SEC$ADMIN                           AS ES_ADMIN, 
  u.SEC$DESCRIPTION                     AS DESCRIPCION
FROM 
  SEC$USERS U;
/******************* EXCEPTIONS *******************/

CREATE EXCEPTION E_CAJERO_NO_REGISTRADO
'Este usuario no cuenta con el rol de cajero.';
CREATE EXCEPTION E_CAJERO_TURNO_ACTIVO
'Este cajero cuenta con un turno activo actualmente.';
CREATE EXCEPTION E_CAJERO_TURNO_INACTIVO
'Cajero no tiene turno Activo.';
CREATE EXCEPTION E_CLIENTE_ENCONTRADO
'Este cliente se encuentra registrado en el sistema.';
CREATE EXCEPTION E_CLIENTE_NO_ENCONTRADO
'El identificador de cliente no es valido.';
CREATE EXCEPTION E_CORREO_INACTIVO
'Correo inactivo del cliente';
CREATE EXCEPTION E_DELETE_GENERICO
'Registro generico no puede ser eliminado.';
CREATE EXCEPTION E_DEUDA_NO_ENCONTRADA
'Deuda no encontrada...!';
CREATE EXCEPTION E_DIRECCION_EN_USO
'La direccion se encuentra registrada en facturas.';
CREATE EXCEPTION E_DIRECCION_INACTIVO
'Direccion del cliente inactiva';
CREATE EXCEPTION E_DUPLICADO_CARTON_BINGO
'Este HASH ha sido encontrado.';
CREATE EXCEPTION E_DUPLICADO_CEDULA
'Cedula registrada en el sistema.';
CREATE EXCEPTION E_EFECTIVO_MENOR_TOTAL
'Efectivo es menor que el total de la factura.';
CREATE EXCEPTION E_FACTURA_NO_NULA
'La factura no puede ser eliminada porque su estado no es nula.';
CREATE EXCEPTION E_FECHA_ACTUAL_INCORRECTA
'La fecha actual que intenta registrar es mayor que la actual en el servidor.';
CREATE EXCEPTION E_FECHA_INICIAL_INCORRECTA
'La fecha inicial registrada es mayor que la actual en el servidor.';
CREATE EXCEPTION E_FECHA_VENCIMIENTO_INCORRECTA
'La fecha de vencimiento registrada es menor que la actual en el servidor.';
CREATE EXCEPTION E_LICENCIA_VENCIDA
'La licencia del software ha vencido. Llamar al 829-297-2015';
CREATE EXCEPTION E_OPER_NO_DEFINIDA
'Operacion no definida';
CREATE EXCEPTION E_ROL_NO_ENCONTRADO
'Rol no encontrado!';
CREATE EXCEPTION E_TELEFONO_INACTIVO
'Telefono inactivo del cliente';
CREATE EXCEPTION E_USUARIO_INACTIVO
'Usuario Inactivo';
CREATE EXCEPTION E_USUARIO_NO_ENCONTRADO
'No es un usuario del sistema.';
CREATE EXCEPTION E_USUARIO_REGISTRADO
'Usuario registrado!';
/******************** TRIGGERS ********************/

SET TERM ^ ;
CREATE TRIGGER CONTACTOS_DIRECCIONES_BI FOR CONTACTOS_DIRECCIONES ACTIVE
BEFORE INSERT POSITION 0

AS
DECLARE VARIABLE tmp DECIMAL(18,0);
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_CONTACTOS_DIRECCIONES_ID, 1);
  ELSE
  BEGIN
    tmp = GEN_ID(GEN_CONTACTOS_DIRECCIONES_ID, 0);
    if (tmp < new.ID) then
      tmp = GEN_ID(GEN_CONTACTOS_DIRECCIONES_ID, new.ID-tmp);
  END
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER FACTURAS_BD FOR FACTURAS ACTIVE
BEFORE DELETE POSITION 0

AS
BEGIN
     if ( old.ESTADO_FACTURA  <> 'n') THEN
          EXCEPTION E_FACTURA_NO_NULA; 
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER FACTURAS_BI FOR FACTURAS ACTIVE
BEFORE INSERT POSITION 0

AS
DECLARE VARIABLE tmp DECIMAL(18,0);
BEGIN
  IF (NEW.ID IS NULL or NEW.ID  in(-1, 0)) THEN
    NEW.ID = GEN_ID(GEN_FACTURAS_ID, 1);
  ELSE
  BEGIN
    tmp = GEN_ID(GEN_FACTURAS_ID, 0);
    if (tmp < new.ID) then
      tmp = GEN_ID(GEN_FACTURAS_ID, new.ID-tmp);
  END
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER PERSONAS_AIUD FOR PERSONAS ACTIVE
AFTER INSERT OR UPDATE OR DELETE POSITION 0

AS
BEGIN
     if(DELETING)THEN
          POST_EVENT 'del_persona';
     if(UPDATING)THEN
          POST_EVENT 'upd_persona';
     if(INSERTING)THEN
          POST_EVENT 'ins_persona';
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER PERSONAS_BI FOR PERSONAS ACTIVE
BEFORE INSERT POSITION 0

AS
DECLARE VARIABLE tmp DECIMAL(18,0);
BEGIN
  IF (NEW.ID IS NULL OR NEW.ID IN(-1, 0)) THEN
    NEW.ID = GEN_ID(G_ID_PERSONA, 1);
  ELSE
  BEGIN
    tmp = GEN_ID(G_ID_PERSONA, 0);
    if (tmp < new.ID) then
      tmp = GEN_ID(G_ID_PERSONA, new.ID-tmp);
  END
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER PERSONAS_CLIENTES_BIUD FOR PERSONAS_CLIENTES ACTIVE
BEFORE INSERT OR UPDATE OR DELETE POSITION 0

AS
BEGIN
     if(DELETING)THEN
          POST_EVENT 'del_persona_clientes';
     if(UPDATING)THEN
          POST_EVENT 'upd_persona_clientes';
     if(INSERTING)THEN
          POST_EVENT 'ins_persona_clientes';
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER PRODUCTOS_AIUD FOR PRODUCTOS ACTIVE
AFTER INSERT OR UPDATE OR DELETE POSITION 0

AS
BEGIN
     IF(INSERTING)THEN
          POST_EVENT 'addProducto';
     IF(UPDATING)THEN
          POST_EVENT 'del_Producto';
     IF(DELETING)THEN
          POST_EVENT 'upd_Producto';
END
^
SET TERM ; ^
/******************** DB TRIGGERS ********************/

SET TERM ^ ;
CREATE TRIGGER SYSTEM_SHAREWARE ACTIVE
ON CONNECT POSITION 0

AS
 DECLARE VARIABLE v_Fchi D_FECHA;
 DECLARE VARIABLE v_Fcha D_FECHA;
 DECLARE VARIABLE v_Fchv D_FECHA;
 DECLARE VARIABLE c_Fchi D_VARCHAR_70;
 DECLARE VARIABLE c_Fcha D_VARCHAR_70;
 DECLARE VARIABLE c_Fchv D_VARCHAR_70;
BEGIN    
    IF(CURRENT_ROLE <> 'RRR_SOFTSURENA')THEN
    BEGIN
        IF((SELECT (1) FROM V_FCH_LC) IS NULL)THEN
        BEGIN
            UPDATE E_S_SYS a
            SET 
                a.FCHI = (SELECT p.FTCNUEVOTEXTO
                          FROM SYSTEM_ENCRIPTAR (EXTRACT(DAY FROM CURRENT_DATE) ||'.'||
                          EXTRACT(MONTH FROM CURRENT_DATE) ||'.'|| EXTRACT(YEAR FROM CURRENT_DATE), 
                           'E', '2972015', '8661203') p), 
                a.FCHA = (SELECT p.FTCNUEVOTEXTO
                          FROM SYSTEM_ENCRIPTAR (EXTRACT(DAY FROM CURRENT_DATE) ||'.'||
                          EXTRACT(MONTH FROM CURRENT_DATE) ||'.'|| EXTRACT(YEAR FROM CURRENT_DATE), 
                           'E', '2972015', '8661203') p), 
                a.FCHV = (SELECT p.FTCNUEVOTEXTO
                          FROM SYSTEM_ENCRIPTAR (EXTRACT(DAY FROM CURRENT_DATE) ||'.'||
                          EXTRACT(MONTH FROM CURRENT_DATE) ||'.'|| EXTRACT(YEAR FROM CURRENT_DATE), 
                           'E', '2972015', '8661203') p), 
                a.IDMAC = '';
        END ELSE BEGIN        
            SELECT r.FCHI, r.FCHA, r.FCHV
              FROM E_S_SYS r
            INTO 
                :c_Fchi, :c_Fcha, :c_Fchv; 
                
            v_Fchi = (SELECT CAST(p.FTCNUEVOTEXTO as DATE)
                        FROM SYSTEM_ENCRIPTAR (:c_Fchi, 'D', '2972015', '8661203') p);
            v_Fcha = (SELECT CAST(p.FTCNUEVOTEXTO as DATE)
                        FROM SYSTEM_ENCRIPTAR (:c_Fcha, 'D', '2972015', '8661203') p);
            v_Fchv = (SELECT CAST(p.FTCNUEVOTEXTO as DATE)
                        FROM SYSTEM_ENCRIPTAR (:c_Fchv, 'D', '2972015', '8661203') p);

            IF(CURRENT_DATE < v_Fchi)THEN
            BEGIN
                EXCEPTION E_FECHA_INICIAL_INCORRECTA;
            END
            
            IF(CURRENT_DATE < v_Fcha)THEN
            BEGIN
                EXCEPTION E_FECHA_ACTUAL_INCORRECTA;
            END
            
            IF(CURRENT_DATE > v_Fchv)THEN
            BEGIN
                EXCEPTION E_FECHA_VENCIMIENTO_INCORRECTA;
            END
            
            IF((SELECT r.Dias_Restantes FROM V_TIME_LIC r) < 0) THEN
            BEGIN
                EXCEPTION E_LICENCIA_VENCIDA;
            END
            
            UPDATE E_S_SYS a SET a.FCHA = (SELECT p.FTCNUEVOTEXTO
                                            FROM SYSTEM_ENCRIPTAR (
                                              EXTRACT(DAY FROM CURRENT_DATE) ||'.'||
                                              EXTRACT(MONTH FROM CURRENT_DATE) ||'.'||
                                              EXTRACT(YEAR FROM CURRENT_DATE), 
                                              'E', '2972015', '8661203') p);
        END        
    END
END
^
SET TERM ; ^
/******************** DDL TRIGGERS ********************/


COMMENT ON ROLE RRR_CAJERO IS 'El rol de cajero es solo para uso de manejo de creacion de factruras.';
COMMENT ON ROLE RRR_SECRETARIA IS 'La secretaria es un rol que permite ingresar clientes al sistema de bebidas.';
COMMENT ON ROLE RRR_SOFTSURENA IS 'Es un rol que puede ser usado para hacer ajuste importante del sistema.';
COMMENT ON ROLE RRR_VENDEDOR IS 'El vendedor podrá hacer consultas a las tablas de productos para conocer las existencia de los productos que el surta a la empresa.';
COMMENT ON DOMAIN D_CEDULA IS 'Esto es una cedula por ejemplo: 000-0012345-2';
COMMENT ON DOMAIN D_ESTADO_CIVIL IS 'El dominio D_ESTADO_CIVIL admitirá una sola letra mayúscula la cual puede ser:
S(soltero)
C(casado)
D(divorciado)
V(viudo)
U(Union Libre)
';
COMMENT ON DOMAIN D_ESTADO_C_I_P_A_N_T IS 'Estado si es Deuda Inicial (i), Pagada (p), Abonada (a), Nulada (n), Temporal (t), Credito (c).';
COMMENT ON DOMAIN D_TIPO_CUENTAS IS '/*
     A  = ACTIVO,
     PA = PASIVO, 
     PT = PATRIMONIO, 
     I  = INGRESOS, 
     G  = GASTOS, 
     CC = CUENTAS DE CIERRE, 
     CO = CUENTAS DE ORDEN.
*/';
SET TERM ^ ;
ALTER PROCEDURE ACTUALIZAR_ESTADISTICAS_INDICES
SQL SECURITY DEFINER

AS
DECLARE VARIABLE o_index_name D_VARCHAR_45;
BEGIN
 
     FOR SELECT RDB$INDEX_NAME
          FROM RDB$INDICES 
          INTO :o_index_name DO 
               EXECUTE STATEMENT 'SET STATISTICS INDEX ' || :o_index_name || ';' ;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE ACTUALIZAR_TABLA_PIVOT (
    TCTABLAPIVOT VARCHAR(28),
    TCVISTA VARCHAR(28),
    TCPRIMERACOLUMNACABECERA VARCHAR(64),
    TCOTRASCOLUMNASCABECERA VARCHAR(4096),
    TCCOLUMNADATOS VARCHAR(28),
    TCVALORESDATOS VARCHAR(1024) )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE lcOtrasColumnasCabecera VARCHAR(4096);
DECLARE VARIABLE lcSelect VARCHAR(4096);
DECLARE VARIABLE lcColumna VARCHAR(28);
DECLARE VARIABLE lcGrupo VARCHAR(4096);
DECLARE VARIABLE lcInto1 VARCHAR(1024);
DECLARE VARIABLE lcInto2 VARCHAR(1024);
DECLARE VARIABLE lcInto3 VARCHAR(1024);
DECLARE VARIABLE lcActualizar VARCHAR(1024);
DECLARE VARIABLE lcTipoDatos VARCHAR(64);
BEGIN
   
   lcOtrasColumnasCabecera = tcOtrasColumnasCabecera;
   
   lcSelect = 'SELECT ' ||
              Left(tcPrimeraColumnaCabecera, Position(' ', tcPrimeraColumnaCabecera) - 1) || ', ' ;
   
   lcGrupo  = Left(tcPrimeraColumnaCabecera, Position(' ', tcPrimeraColumnaCabecera) - 1) || ', ' ;
   
   IF (Char_Length(lcOtrasColumnasCabecera) > 0) THEN BEGIN
     lcOtrasColumnasCabecera = lcOtrasColumnasCabecera || ',' ;
     WHILE (Char_Length(lcOtrasColumnasCabecera) > 0) DO BEGIN
        EXECUTE PROCEDURE Parser(lcOtrasColumnasCabecera, ',') RETURNING_VALUES :lcColumna;
        lcGrupo  = lcGrupo  || Left(lcColumna, Position(' ', lcColumna) - 1) || ',' ;
        lcOtrasColumnasCabecera = Replace(lcOtrasColumnasCabecera, lcColumna || ',', '') ;
     END
   END
   
   lcSelect = lcSelect || 
              tcColumnaDatos || ', ' ||
              tcValoresDatos ||
              ' FROM ' || tcVista || 
              ' GROUP BY ' || lcGrupo || 
              tcColumnaDatos ;
   
   FOR EXECUTE STATEMENT
      lcSelect 
   INTO 
      :lcInto1, 
      :lcInto2,
      :lcInto3
   DO BEGIN
      -- Aquí se insertan o actualizan la primera columna y los datos agrupados
      lcTipoDatos = SUBSTRING(tcPrimeraColumnaCabecera FROM Position(' ', tcPrimeraColumnaCabecera));
      lcTipoDatos = Upper(Trim(lcTipoDatos));
      IF (lcTipoDatos CONTAINING 'CHAR') THEN
         lcInto1 = '''' || lcInto1 || '''';
      lcInto2 = Left(lcInto2, 28);
      lcInto2 = Replace(lcInto2, ' ', '_');
      lcInto2 = Replace(lcInto2, '.', '_');
      lcInto2 = Replace(lcInto2, '/', '_');
      lcInto2 = Replace(lcInto2, '%', '_');
      lcActualizar = 'UPDATE OR INSERT INTO ' || 
                     tcTablaPivot || ' (' || 
                     Left(tcPrimeraColumnaCabecera, Position(' ', tcPrimeraColumnaCabecera) - 1) || ',' ||
                     lcInto2 || 
                     ') VALUES(' ||
                     lcInto1 || ',' ||
                     lcInto3 || ')' ;
      EXECUTE STATEMENT lcActualizar;
      IF (Char_Length(Trim(tcOtrasColumnasCabecera)) > 0) THEN BEGIN
        lcOtrasColumnasCabecera = tcOtrasColumnasCabecera || ',' ;
        lcActualizar = 'UPDATE ' || tcTablaPivot || ' SET ' ;
         WHILE (Char_Length(lcOtrasColumnasCabecera) > 0) DO BEGIN
            -- Aquí se actualizan todas las demás columnas de la cabecera
            EXECUTE PROCEDURE Parser(lcOtrasColumnasCabecera, ',') RETURNING_VALUES :lcColumna;
            lcActualizar = lcActualizar ||
                           Left(lcColumna, Position(' ', lcColumna) - 1) ||
                           ' = (SELECT ' || Left(lcColumna, Position(' ', lcColumna) - 1) || 
                           ' FROM ' || tcVista || 
                           ' WHERE ' ||
                           Left(tcPrimeraColumnaCabecera, Position(' ', tcPrimeraColumnaCabecera) - 1) || 
                           '=' || lcInto1 || 
                           ' ROWS 1),' ;
           lcOtrasColumnasCabecera = Replace(lcOtrasColumnasCabecera, lcColumna || ',', '') ;
         END
         lcActualizar = Left(lcActualizar, Char_Length(lcActualizar) - 1) ||
                        ' WHERE ' || 
                        Left(tcPrimeraColumnaCabecera, Position(' ', tcPrimeraColumnaCabecera) - 1) || '=' ||
                        lcInto1;
         EXECUTE STATEMENT lcActualizar;
      END
   END
   
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE ADMIN_HABILITAR_TURNO (
    I_USER_NAME D_USER_NAME )
SQL SECURITY DEFINER

AS
begin
     /*
          El siguiente select nos permite saber si un usuaio esta registrado en el sistema.
     */
     SELECT p.O_USER_NAME
     FROM SP_VALIDAR_USUARIO (UPPER(:I_USER_NAME)) p
     INTO :I_USER_NAME;
     
     
     /*
          La siguiente validación permite saber si es un usuario tiene el rol de cajero. 
     */
     IF((SELECT (1) 
          FROM GET_CAJEROS 
          WHERE USER_NAME STARTING WITH :I_USER_NAME) IS NULL)THEN BEGIN
          EXCEPTION E_CAJERO_NO_REGISTRADO;
     END
     
     /*
          El siguiente SELECT no permite saber si el usuario tiene un turno activo, 
          el turno es activo si el estado es verdadero del campo. 
     */
     IF((SELECT (1)
          FROM V_TURNOS
          WHERE TURNO_USUARIO STARTING WITH :I_USER_NAME AND ESTADO) = 1)THEN BEGIN
          EXCEPTION E_CAJERO_TURNO_ACTIVO;
     END
     
     insert into V_TURNOS (TURNO_USUARIO)
     values (UPPER(:I_USER_NAME));
end
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE CREAR_TABLA_PIVOT (
    TCNOMBRETABLA VARCHAR(28),
    TCVISTA VARCHAR(28),
    TCPRIMERACOLUMNACABECERA VARCHAR(64),
    TCOTRASCOLUMNASCABECERA VARCHAR(4096),
    TCCOLUMNADATOS VARCHAR(28),
    TCTIPODATOS VARCHAR(64) )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE lcCreate VARCHAR(4096);
DECLARE VARIABLE lcColumna VARCHAR(28);
DECLARE VARIABLE lcMensajeError VARCHAR(1024);
BEGIN
   
   -- Primero, creamos la tabla
   
   lcCreate = 'CREATE TABLE ' || tcNombreTabla || ' (';
   
   lcCreate = lcCreate || tcPrimeraColumnaCabecera || ' NOT NULL, ';
   
   IF (Char_Length(tcOtrasColumnasCabecera) > 0) THEN BEGIN
      tcOtrasColumnasCabecera = tcOtrasColumnasCabecera || ',';
      WHILE (Char_Length(tcOtrasColumnasCabecera) > 0) DO BEGIN
         EXECUTE PROCEDURE Parser(tcOtrasColumnasCabecera, ',') RETURNING_VALUES :lcColumna;
         lcCreate = lcCreate || Trim(lcColumna) || ' , ' ;
         tcOtrasColumnasCabecera = Replace(tcOtrasColumnasCabecera, lcColumna || ',', '');
      END
   END
   
   FOR EXECUTE STATEMENT
      'SELECT DISTINCT ' || tcColumnaDatos || ' FROM ' || tcVista
   INTO 
      :lcColumna 
   DO BEGIN
      lcColumna = Left(lcColumna, 28);
      lcColumna = Replace(lcColumna, ' ', '_');
      lcColumna = Replace(lcColumna, '.', '_');
      lcColumna = Replace(lcColumna, '/', '_');
      lcColumna = Replace(lcColumna, '%', '_');
      lcCreate  = lcCreate || lcColumna || ' ' || tcTipoDatos || ', ' ;
   END
   
   lcCreate = Left(lcCreate, Char_Length(lcCreate) - 2);
   
   lcCreate = lcCreate || ');';
   
   EXECUTE STATEMENT lcCreate;
   
   -- Segundo, le agregamos una Primary Key
   
   EXECUTE STATEMENT 
      'ALTER TABLE ' || tcNombreTabla || 
      ' ADD CONSTRAINT PK_' || tcNombreTabla || 
      ' PRIMARY KEY (' || Left(:tcPrimeraColumnaCabecera, Position(' ', :tcPrimeraColumnaCabecera)) || ')';
   
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE PARSER (
    TCTEXTO D_BLOB_TEXTO,
    TCSEPARADOR D_VARCHAR_15 )
RETURNS (
    FTCNOMBRE D_VARCHAR_1024 )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE lnPosicion D_EDAD;
BEGIN
 
   lnPosicion = Position(tcSeparador IN tcTexto);
 
   ftcNombre = Left(tcTexto, lnPosicion - 1) ;
 
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE PRO_PERMISOS (
    CONSULTAR D_BOOLEAN_F,
    INSERTAR D_BOOLEAN_F,
    ACTUALIZAR D_BOOLEAN_F,
    BORRAR D_BOOLEAN_F,
    REFERENCIA D_BOOLEAN_F,
    VISTA D_VARCHAR_45,
    USER_NAME D_USER_NAME )
SQL SECURITY DEFINER

AS
begin
     /*Procedimiento actualizado el 22 de abril del 2022*/
     execute statement 'revoke all on '||:VISTA||' from '||:USER_NAME;
     
     if (:INSERTAR) then
     begin
      execute statement 'grant insert on '||:VISTA||' to '||:USER_NAME;
     end

     if (:CONSULTAR) then
     begin
      execute statement 'grant select on '||:VISTA||' to '||:USER_NAME;
     end

     if (:ACTUALIZAR) then
     begin
      execute statement 'grant update on '||:VISTA||' to '||:USER_NAME;
     end

     if (:BORRAR) then
     begin
      execute statement 'grant delete on '||:VISTA||' to '||:USER_NAME;
     end
     
     if (:REFERENCIA) then
     begin
      execute statement 'grant REFERENCES on '||:VISTA||' to '||:USER_NAME;
     end
end
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_ARS (
    V_ID D_ID,
    ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER

AS
BEGIN
     /*Procedimiento actualizado el 22 de abril 2022*/
     
     DELETE FROM V_ARS a WHERE a.ID = :V_ID;

     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('D', 'V_ARS', :ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_ARS');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_CATEGORIAS (
    V_ID D_ID,
    ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER

AS
BEGIN
     /*Procedimiento revizado el 22 de abril 2022*/
     DELETE FROM V_CATEGORIAS a WHERE a.ID = :V_ID;

     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('D', 'V_CATEGORIAS', :ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_CATEGORIAS');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_CLIENTE_CC (
    ID D_ID )
SQL SECURITY DEFINER

AS
BEGIN
     DELETE FROM V_PERSONAS_CLIENTES
     WHERE
          ID = :ID;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_CLIENTE_SB (
    V_ID D_ID )
SQL SECURITY DEFINER

AS
BEGIN
     --No pueden eliminarse el cliente generico del sistema.
     IF (:V_ID = 0) THEN
          EXCEPTION E_DELETE_GENERICO;
     
     /*
          Eliminando el cliente de la tabla. 
     */
     DELETE FROM V_PERSONAS_CLIENTES a WHERE a.ID = :V_ID;
     
     /*
          Si no hubo registros afectos, lanzar la siguiente EXCEPTION. 
     */
     IF(ROW_COUNT < 1)THEN
          EXCEPTION E_CLIENTE_NO_ENCONTRADO;
     
     IF(( SELECT CANTIDAD 
          FROM V_RECCOUNT 
          WHERE TABLA LIKE 'V_PERSONAS_CLIENTES') > 0)THEN
               EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_PERSONAS_CLIENTES');     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_ESTUDIANTE (
    V_ID D_ID,
    I_ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER

AS
BEGIN
     DELETE FROM V_PERSONAS_ESTUDIANTES WHERE ID = :V_ID;
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('D', 'V_PERSONAS', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_PERSONAS_ESTUDIANTES');
     
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_PACIENTE (
    V_ID D_ID,
    I_ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER

AS
BEGIN          
          
     DELETE FROM V_PERSONAS_PACIENTES WHERE ID = :V_ID;
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS_PACIENTES');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_HALLAR_PALABRAS (
    FTCTEXTO D_BLOB_TEXTO )
RETURNS (
    FTCPALABRA D_VARCHAR_45 )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE lnI D_ID;
DECLARE VARIABLE lnInicio D_ID;
DECLARE VARIABLE lnLongitud D_ID;
BEGIN
 
   lnI        = 1;
   lnInicio   = 1;
   ftcTexto   = ftcTexto || ' ';
   lnLongitud = CHARACTER_LENGTH(ftcTexto);
 
   WHILE (lnI <= lnLongitud) DO BEGIN
      IF(CAST(SUBSTRING(ftcTexto FROM lnI FOR 1) AS D_VARCHAR_45) NOT SIMILAR TO '[[:ALNUM:]]' AND POSITION(SUBSTRING(ftcTexto FROM lnI FOR 1) IN 'áéíóúñÁÉÍÓÚÑ') = 0) THEN BEGIN
         IF(lnI > lnInicio) THEN BEGIN
            ftcPalabra = SUBSTRING(ftcTexto FROM lnInicio FOR lnI - lnInicio);
            SUSPEND;
         END
         lnInicio = lnI + 1;
      END
      lnI = lnI + 1;
   END
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_ARS (
    DESCRIPCION D_VARCHAR_45,
    COVER_CONSULTA_POR_C D_DESCUENTO,
    ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE V_ID D_ID;
BEGIN
     /*Procedimiento actualizado el 22 de abril 2022*/
     
     INSERT INTO V_ARS (DESCRIPCION, COVERTURA_CONSULTA_PORCIENTO, ESTADO)
     VALUES (:DESCRIPCION, :COVER_CONSULTA_POR_C, :ESTADO);
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_ARS', :ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_ARS');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_CARTON_BINGO (
    I_CARTON_HASH D_ID,
    I_MATRIZ_OBJ D_BLOB_TEXTO )
SQL SECURITY DEFINER

AS
BEGIN
     IF((SELECT (1) 
          FROM V_CARTONES_BINGO 
          WHERE CARTON_HASH = :I_CARTON_HASH) = 1)THEN
          EXCEPTION E_DUPLICADO_CARTON_BINGO;
          
     INSERT INTO V_CARTONES_BINGO (CARTON_HASH, MATRIZ_OBJ)
     VALUES (:I_CARTON_HASH, :I_MATRIZ_OBJ);
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_CATEGORIAS (
    DESCRIPCION D_VARCHAR_25,
    IMAGEN_TEXTO D_BLOB_TEXTO,
    ESTADO D_BOOLEAN_T )
SQL SECURITY INVOKER

AS
BEGIN
     /*Procedimiento revizado el 22 de abril 2022*/
     INSERT INTO V_CATEGORIAS (DESCRIPCION, IMAGEN_TEXTO, ESTADO)
     VALUES (:DESCRIPCION, :IMAGEN_TEXTO, :ESTADO);
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_CATEGORIAS', :ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_CATEGORIAS');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_CLIENTE (
    I_ID D_ID,
    I_ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER

AS
BEGIN
     --Ingresando el cliente
     INSERT INTO V_PERSONAS_CLIENTES(ID) VALUES(:I_ID);
     
     --Guardamos la cantidad de registro por tabla.
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS_CLIENTES');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_CLIENTE_CC (
    PNOMBRE D_NOMBRES,
    SNOMBRE D_NOMBRES,
    APELLIDOS D_APELLIDOS,
    SEXO D_SEXO,
    CORREO D_CORREO,
    SALDO D_DINERO )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE ID D_ID;
BEGIN
     INSERT INTO V_PERSONAS (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO)
     VALUES (NULL, 'F', :pNombre, :sNombre, :apellidos, :sexo)
     RETURNING ID 
     INTO :ID;
     
     INSERT INTO V_PERSONAS_CLIENTES (ID)
     VALUES (:ID);
     
     INSERT INTO V_CONTACTOS_EMAIL (ID_PERSONA, EMAIL)
     VALUES (:ID, :correo);
     
     INSERT INTO V_PERSONAS_CLIENTES_ATR (ID, SALDO)
     VALUES (:ID, :saldo);

     
END
^
SET TERM ; ^


COMMENT ON PROCEDURE SP_INSERT_CLIENTE_SB IS 'Es el procedimiento utilizado para almacenar un cliente en el sb.';
SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_CLIENTE_SB (
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
RETURNS (
    V_ID D_ID )
SQL SECURITY DEFINER

AS
BEGIN
     V_ID = GEN_ID(G_ID_PERSONA, 1);
     /*Validaciones de insercion*/
     INSERT INTO V_PERSONAS (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
     FECHA_NACIMIENTO, ESTADO) VALUES (
          :V_ID,
          :I_PERSONA,
          :I_PNOMBRE,
          :I_SNOMBRE,
          :I_APELLIDOS,
          :I_SEXO,
          :I_FECHA_NACIMIENTO,
          :I_ESTADO);
       
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);   
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     
     --Ingresando el cliente
     INSERT INTO V_PERSONAS_CLIENTES(ID) VALUES(:V_ID);
     
     --Guardamos cantidad de registros por estado
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS_CLIENTES');
     
     --Ingresando el cliente
     INSERT INTO V_GENERALES(ID_PERSONA, CEDULA, ID_TIPO_SANGRE, ESTADO_CIVIL) 
     VALUES(
          :V_ID,
          :I_CEDULA,
          0,
          :I_ESTADO_CIVIL
     );
     
     --Guardamos cantidad de registros por estado
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_GENERALES');
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_DIRECCIONES (
    I_ID_PERSONA D_ID,
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_ID_CODIGO_POSTAL D_ID,
    I_DIRECCION D_VARCHAR_255 )
RETURNS (
    O_ID D_ID )
SQL SECURITY DEFINER

AS
BEGIN
     /*Obtenemos el ID de la tabla */
     O_ID = GEN_ID(G_ID_DIRECCIONES, 1);
     
     INSERT INTO V_CONTACTOS_DIRECCIONES (ID, ID_PERSONA, ID_PROVINCIA, ID_MUNICIPIO,
          ID_DISTRITO_MUNICIPAL, ID_CODIGO_POSTAL, DIRECCION)
     VALUES (
          :O_ID,
          :I_ID_PERSONA, 
          :I_ID_PROVINCIA, 
          :I_ID_MUNICIPIO, 
          :I_ID_DISTRITO_MUNICIPAL, 
          :I_ID_CODIGO_POSTAL, 
          :I_DIRECCION
     );
     
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_DOCTOR (
    I_USER_NAME D_USER_NAME,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ROL D_ROL,
    I_COD_EXEQUATUR D_VARCHAR_70,
    I_ESPECIALIDAD D_VARCHAR_70,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F )
RETURNS (
    O_SQL D_BLOB_TEXTO )
SQL SECURITY INVOKER

AS
DECLARE VARIABLE V_ID D_ID; 
DECLARE VARIABLE V_SQL D_VARCHAR_255;
BEGIN
     IF((SELECT DISTINCT (1) FROM SP_SELECT_USUARIOS_TAGS (TRIM(:I_USER_NAME))) = 1)THEN
          EXCEPTION E_USUARIO_REGISTRADO;
     
     IF((SELECT r.ROL FROM GET_ROLES r WHERE TRIM(r.ROL) like TRIM(:i_rol)) IS NULL)THEN
          EXCEPTION E_ROL_NO_ENCONTRADO;
     
     V_ID = GEN_ID(G_ID_PERSONA, 1);
          
     V_SQL = 'CREATE USER '||:I_USER_NAME||' PASSWORD '''||i_clave||''' FIRSTNAME '''||i_pnombre||''' MIDDLENAME '''||i_snombre||''' LASTNAME '''||i_apellidos||''''||
     
     iif(i_estado, ' ACTIVE',' INACTIVE') ||
     
     iif(i_administrador, ' GRANT ',' REVOKE ') || 
     ' ADMIN ROLE USING PLUGIN Srp '||
     'TAGS(id='''||v_id||''', gui=''0'', uid=''0'', rol='''||TRIM(i_rol)||''', exe='''||i_cod_exequatur||''', esp='''||i_especialidad||''');';
     
     
     EXECUTE STATEMENT V_SQL;
     
     O_SQL = :V_ID;
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_ENTRADA_PRODUCTOS (
    ID_PROVEEDOR D_ID,
    COD_FACTURA D_CODIGO,
    LINEA D_ID,
    ID_PRODUCTO D_ID,
    ENTRADA D_DINERO,
    FECHA_VECIMIENTO D_FECHA )
SQL SECURITY DEFINER

AS
BEGIN
     
     INSERT INTO ENTRADA_PRODUCTOS (IDPROVEDOR, COD_FACTURA, LINEA, IDPRODUCTO,
     ENTRADA, FECHAVECIMIENTO)
     VALUES (:ID_PROVEEDOR, :COD_FACTURA, :LINEA, :ID_PRODUCTO, :ENTRADA, 
          :FECHA_VECIMIENTO
     );
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_ESTUDIANTE (
    I_ID_ARS D_ID,
    I_NO_NSS D_VARCHAR_25,
    I_ID_TIPO_SANGRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_MATRICULA D_VARCHAR_15,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE V_ID D_ID; 
BEGIN
     /*Obtenemos el ID de la tabla */
     V_ID = GEN_ID(G_ID_PERSONA, 1);
     
     --Campos de quedeberia de tener los estudiantes agregado.
     -- ID_ARS, NONSS, :I_ID_ARS, :I_NO_NSS, 
     
     INSERT INTO V_PERSONAS (ID, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
           FECHA_NACIMIENTO, ESTADO)
     VALUES (
          :V_ID, 
          :I_PNOMBRE, 
          :I_SNOMBRE, 
          :I_APELLIDOS, 
          :I_SEXO, 
          :I_FECHA_NACIMIENTO, 
          :I_ESTADO
     );
     
     INSERT INTO V_GENERALES (ID_PERSONA, CEDULA, ID_TIPO_SANGRE)
     VALUES (
          :V_ID, 
          :I_CEDULA, 
          :I_ID_TIPO_SANGRE
     );

     
     INSERT INTO V_ASEGURADOS (ID_PERSONA, ID_ARS, NO_NSS)
     VALUES (
          :V_ID, 
          :I_ID_ARS,
          :I_NO_NSS
     );
     
     /*Ingresar identificador en ESTUDIANTE*/
     INSERT INTO V_PERSONAS_ESTUDIANTES (ID)
     VALUES (
          :V_ID
     );
     
     INSERT INTO V_PERSONAS_ESTUDIANTES_ATR (ID, MATRICULA)
     VALUES (
          :V_ID, 
          :I_MATRICULA
     );
     
     /*
          Debe de obtenerse las relaciones entre padre he hijo de la tabla RELACION_FAMILIAR.
     */
     IF(:I_ID_PADRE > 0)THEN
          --INSERT INTO V_PADRES(ID, ID_HIJO) VALUES(:I_ID_PADRE, :V_ID);
     
     IF(:I_ID_MADRE > 0)THEN
          --INSERT INTO V_PADRES(ID, ID_HIJO) VALUES(:I_ID_MADRE, :V_ID);
     /*
          Debe de obtenerse las relaciones entre padre he hijo de la tabla RELACION_FAMILIAR.
     */

     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS_ESTUDIANTES');
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_FACTURA (
    I_ID_CLIENTE D_ID,
    I_ID_CONTACTOS_TEL D_ID,
    I_ID_CONTACTOS_DIRECCIONES D_ID,
    I_ID_CONTACTOS_EMAIL D_ID,
    I_ID_TURNO D_ID,
    I_TOTAL D_DINERO,
    I_EFECTIVO D_DINERO,
    I_ESTADO_FACTURA D_ESTADO_C_I_P_A_N_T,
    I_NOMBRE_TEMP D_NOMBRES )
RETURNS (
    O_ID D_ID )
SQL SECURITY DEFINER

AS
BEGIN
     /*
          * Validaciones del SP la cual debe validar que:
          
          Antes de validar un campo como son Telefono, Correo o Direccion estos deben ser diferente de 0;
          
          1) La factura se registre con un turno valido.
          2) Que el numero telefonico este asignado al cliente de la factura.
          3) Que el correo electronico este asignado al cliente de la factura.
          4) Que la direccion sea valida para dicho cliente.
          
          Nota: Cuando se registra una factura debe de llevarse un control de la facturas que se van guardando 
          en el sistema. Por ejemplo, Cantidad de total facturas, las cantidades de la facturas que se realizan en
          un dia, en una semana, en un mes y en un año para el sistema analitico, cantidad de facturas por estado.
     */
     IF(( SELECT (1) 
          FROM V_TURNOS t 
          WHERE t.ID = :I_ID_TURNO AND t.ESTADO) IS NULL)THEN
          EXCEPTION E_CAJERO_TURNO_INACTIVO;
     
     IF(:I_ID_CONTACTOS_TEL <> 0 AND (SELECT (1) 
          FROM V_CONTACTOS_TEL t 
          WHERE t.ID = :I_ID_CONTACTOS_TEL AND 
                t.ID_PERSONA = :I_ID_CLIENTE AND 
                t.ESTADO) IS NULL) THEN
          EXCEPTION E_TELEFONO_INACTIVO;
     
     IF(:I_ID_CONTACTOS_EMAIL <> 0 AND (SELECT (1) 
          FROM V_CONTACTOS_EMAIL e 
          WHERE e.ID = :I_ID_CONTACTOS_EMAIL AND 
                e.ID_PERSONA = :I_ID_CLIENTE AND 
                e.ESTADO) IS NULL) THEN
          EXCEPTION E_CORREO_INACTIVO;
          
     IF(:I_ID_CONTACTOS_DIRECCIONES <> 0 AND 
          (SELECT (1) 
               FROM V_CONTACTOS_DIRECCIONES e
               WHERE e.ID = :I_ID_CONTACTOS_DIRECCIONES AND 
                e.ID_PERSONA = :I_ID_CLIENTE AND 
                e.ESTADO) IS NULL) THEN
                              EXCEPTION E_DIRECCION_INACTIVO;
          
     INSERT INTO V_FACTURAS (ID, ID_CLIENTE, ID_CONTACTOS_TEL, ID_CONTACTOS_DIRECCIONES, ID_CONTACTOS_EMAIL, ID_TURNO, TOTAL, 
               EFECTIVO, ESTADO_FACTURA, NOMBRE_TEMP)
     VALUES (-1, :I_ID_CLIENTE, :I_ID_CONTACTOS_TEL, :I_ID_CONTACTOS_DIRECCIONES, :I_ID_CONTACTOS_EMAIL, :I_ID_TURNO, :I_TOTAL, 
               :I_EFECTIVO, :I_ESTADO_FACTURA, :I_NOMBRE_TEMP)
     RETURNING ID
     INTO O_ID;
     
     
     SUSPEND;
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_PACIENTE (
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_ID_ARS D_ID,
    I_NO_NSS D_VARCHAR_25,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ID_TIPO_SANGRE D_ID,
    I_ESTADO D_BOOLEAN_T )
RETURNS (
    V_ID D_ID )
SQL SECURITY DEFINER

AS
BEGIN
     
     /*Ingresando los datos general en persona...*/
     INSERT INTO V_PERSONAS (ID,  PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
          FECHA_NACIMIENTO, ESTADO)
     VALUES (
          :V_ID,
          :I_PNOMBRE, 
          :I_SNOMBRE, 
          :I_APELLIDOS, 
          :I_SEXO, 
          :I_FECHA_NACIMIENTO,
          :I_ESTADO
     )
     RETURNING ID
     INTO :V_ID ;
     
     /*Ingresando las generales del paciente*/
     INSERT INTO V_GENERALES (ID_PERSONA, ID_TIPO_SANGRE, CEDULA) 
     VALUES (
          :V_ID,
          :I_ID_TIPO_SANGRE, 
          :I_CEDULA
     );
     
     /*Datos del seguro medico.*/
     INSERT INTO V_ASEGURADOS (ID_PERSONA, ID_ARS, NO_NSS)
     VALUES (
          :V_ID, 
          :I_ID_ARS, 
          :I_NO_NSS
     );
     
     /*Actualizamos la cantidad de seguros medicos registrados por paciente.*/
     UPDATE ARS a
     SET 
          a.CANTIDAD_REGISTRO = COALESCE(a.CANTIDAD_REGISTRO, 0) + 1
     WHERE
          a.ID = :I_ID_ARS;
     
     
     /*Insertamos en la vista de pacientes*/
     INSERT INTO V_PERSONAS_PACIENTES (ID)
     VALUES (:V_ID);
     
     /*
          Debe de obtenerse las relaciones entre padre he hijo de la tabla RELACION_FAMILIAR.
     */
     IF(:I_ID_PADRE > 0)THEN
          --INSERT INTO V_PADRES(ID, ID_HIJO) VALUES(:I_ID_PADRE, :V_ID);
     
     IF(:I_ID_MADRE > 0)THEN
          --INSERT INTO V_PADRES(ID, ID_HIJO) VALUES(:I_ID_MADRE, :V_ID);
     /*
          Debe de obtenerse las relaciones entre padre he hijo de la tabla RELACION_FAMILIAR.
     */

     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS_PACIENTES');
     
     SUSPEND;

END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_PADRES (
    I_ID_HIJO D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ID_TIPO_SANGRE D_ID,
    I_ESTADO_CIVIL D_ESTADO_CIVIL,
    I_ESTADO D_BOOLEAN_T )
RETURNS (
    O_ID D_ID )
SQL SECURITY DEFINER

AS
BEGIN
     /*
     Validaciones del SP:
          1) La cedula no puede repetirse en el sistema.
     */
     if((SELECT (1) FROM V_GENERALES WHERE CEDULA LIKE :I_CEDULA) IS NOT NULL) THEN
          EXCEPTION E_DUPLICADO_CEDULA;
     
     
     INSERT INTO V_PERSONAS(ID, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
          FECHA_NACIMIENTO, ESTADO)
     VALUES(-1, :I_PNOMBRE, :I_SNOMBRE, :I_APELLIDOS, :I_SEXO,
          :I_FECHA_NACIMIENTO, :I_ESTADO)
     RETURNING ID 
     INTO :O_ID;
     
     
     INSERT INTO V_GENERALES (ID_PERSONA, ID_TIPO_SANGRE, CEDULA, ESTADO_CIVIL)
     VALUES ( :O_ID, :I_ID_TIPO_SANGRE,  :I_CEDULA, :I_ESTADO_CIVIL);
     
     

     /*Ingresar identificador en padres*/
     --INSERT INTO V_PADRES(ID, ID_HIJO) VALUES (:O_ID, :I_ID_HIJO);
     /*
          Debe de obtenerse las relaciones entre padre he hijo de la tabla RELACION_FAMILIAR.
     */
     SUSPEND;
     
     /*Guardamos cantidad de registros por estado
          Se debe tener encuenta que la tabla debe tener un campo de estado booleano.
     */
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PADRES');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_GENERALES');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_PERSONA (
    I_PERSONA D_PERSONA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T )
RETURNS (
    V_ID D_ID )
SQL SECURITY DEFINER

AS
BEGIN
     /*Validaciones de insercion*/
     INSERT INTO V_PERSONAS (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
               FECHA_NACIMIENTO, ESTADO)
     VALUES ( -1, :i_PERSONA, :i_PNOMBRE, :i_SNOMBRE, :i_APELLIDOS, :i_SEXO,
               :i_FECHA_NACIMIENTO, :i_ESTADO) 
     RETURNING ID
     INTO :V_ID ;
     
     /*Aqui se insertaba en la vista V_CLIENTES y en V_GENERALES*/
     
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_PERSONA_CLIENTES_ID (
    I_ID D_ID )
SQL SECURITY INVOKER

AS
BEGIN
     /*Validamos que el id se encuentre en la vista V_PERSONAS*/
     IF(
          (SELECT (1)
          FROM V_PERSONAS c
          WHERE c.ID = :I_ID) IS NULL
     
     )THEN EXCEPTION E_CLIENTE_NO_ENCONTRADO;
     
     IF(
          (SELECT (1)
          FROM V_PERSONAS_CLIENTES c
          WHERE c.ID = :I_ID) = 1
     
     )THEN EXCEPTION E_CLIENTE_ENCONTRADO;
     
     INSERT INTO V_PERSONAS_CLIENTES (ID) VALUES (:I_ID); 
  
     EXECUTE PROCEDURE SP_RECCOUNT ('I', 'V_PERSONAS_CLIENTES');
  
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_PROVEEDOR (
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_DIRECCION D_VARCHAR_255,
    I_ESTADO D_BOOLEAN_T,
    I_CODIGO_PROVEEDOR D_CODIGO )
RETURNS (
    V_ID D_ID )
SQL SECURITY DEFINER

AS
BEGIN
     /*Obtenemos el ID de la tabla */
     V_ID = GEN_ID(G_ID_PERSONA, 1);
     
     --La entidad persona que almacena datos generales.
     INSERT INTO V_PERSONAS (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
          ESTADO)
     VALUES (
          :V_ID, 
          :i_persona, 
          :i_pnombre, 
          :i_snombre, 
          :i_apellidos, 
          :i_sexo, 
          :i_estado
     );
          
     INSERT INTO V_GENERALES (ID_PERSONA, CEDULA) 
     VALUES (
          :V_ID,
          :i_cedula
     );
     
     --Direcion del proveedor.
     INSERT INTO V_CONTACTOS_DIRECCIONES (ID_PERSONA, ID_PROVINCIA, ID_MUNICIPIO, DIRECCION)
     VALUES (:V_ID, :i_id_provincia, :i_id_municipio, :i_direccion);
     
     --Almacenamos datos solo del proveedor. 
     INSERT INTO V_PERSONAS_PROVEEDORES (ID)
     VALUES (:V_ID);

      /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS_PROVEEDORES');
     
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_TURNO (
    I_TURNO_USUARIO D_USER_NAME )
SQL SECURITY DEFINER

AS
BEGIN
     IF((SELECT (1) FROM SP_SELECT_USUARIOS_TAGS (:I_TURNO_USUARIO)) IS NULL)THEN
          EXCEPTION E_USUARIO_NO_ENCONTRADO;
          
     IF((SELECT O_ESTADO_ACTIVO FROM SP_SELECT_USUARIOS_TAGS (:I_TURNO_USUARIO)) IS FALSE) THEN
          EXCEPTION E_USUARIO_INACTIVO;
     
     INSERT INTO V_TURNOS (TURNO_USUARIO, FECHA_HORA_FINAL)
     VALUES (
          :I_TURNO_USUARIO, 
          NULL
     );
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_USUARIOS (
    I_USER_NAME D_USER_NAME,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F,
    I_DESCRIPCION D_BLOB_TEXTO )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE V_SQL D_VARCHAR_255;
BEGIN
     IF((SELECT (1) FROM SEC$USERS r WHERE TRIM(r.SEC$USER_NAME) LIKE TRIM(:I_USER_NAME)) = 1)THEN
          EXCEPTION E_USUARIO_REGISTRADO;
     
          
     V_SQL = 'CREATE USER '||:I_USER_NAME 
          ||' PASSWORD '''||:I_CLAVE
          ||''' FIRSTNAME '''||:I_PNOMBRE
          ||''' MIDDLENAME '''||:I_SNOMBRE
          ||''' LASTNAME '''||:I_APELLIDOS
          ||''''|| iif(:I_ESTADO, ' ACTIVE ',' INACTIVE ') 
          || iif(:I_ADMINISTRADOR, ' GRANT ',' REVOKE ') 
          || ' ADMIN ROLE USING PLUGIN Srp;';
          
     
     EXECUTE STATEMENT V_SQL;
     
     EXECUTE STATEMENT 'COMMENT ON USER '||:I_USER_NAME||' is '''||:I_DESCRIPCION||'''';
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_RECCOUNT (
    TCOPERAC TYPE OF D_INSERT_DELETE,
    TCTABLAX TYPE OF D_VARCHAR_45 )
SQL SECURITY DEFINER

AS
declare variable LCCOMANDO D_VARCHAR_255;
declare variable LNCANTIDADFILAS D_ID;
DECLARE VARIABLE v_id D_ID;
BEGIN
/*
     Este RECCOUNT agrega la tabla tomando encuentra el estado del registro.
*/
     --Nos aseguramos que sea una operacion definida
     IF (UPPER(tcOperac) NOT IN('I', 'D')) THEN
      EXCEPTION E_OPER_NO_DEFINIDA;--FIN
     
     --Se trata de actualizar la tabla de RECCOUNT
     UPDATE V_RECCOUNT r
     SET
       r.CANTIDAD = r.CANTIDAD + IIF(:tcOperac = 'I', 1, -1)
     WHERE r.TABLA = :tcTablax;

 
     IF (ROW_COUNT = 0) THEN BEGIN -- No se encontró la tabla en RECCOUNT, por lo tanto hay que agregarla
      lcComando = 'SELECT COUNT(*) FROM ' || tcTablax;
      EXECUTE STATEMENT (lcComando) INTO :lnCantidadFilas;
      INSERT INTO V_RECCOUNT(tabla, cantidad)
          VALUES (:tcTablax, :lnCantidadFilas);
     END
 
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_RECCOUNT_ESTADO (
    TCOPERAC TYPE OF D_INSERT_DELETE,
    TCTABLAX TYPE OF D_VARCHAR_45,
    ESTADO TYPE OF D_BOOLEAN_F )
SQL SECURITY DEFINER

AS
declare variable LCCOMANDO D_VARCHAR_255;
declare variable LNCANTIDADFILAS D_ID;
BEGIN
/*
     Este RECCOUNT agrega la tabla tomando encuentra el estado del registro.
*/
     --Nos aseguramos que sea una operacion definida
     IF (tcOperac NOT IN('I', 'D')) THEN
      EXCEPTION E_OPER_NO_DEFINIDA;--FIN

     --Se trata de actualizar la tabla de RECCOUNT
     UPDATE V_RECCOUNT r
     SET
       r.CANTIDAD = r.CANTIDAD + IIF(:tcOperac = 'I', 1, -1)
     WHERE r.TABLA = :tcTablax||' '||:ESTADO;--FIN

     -- No se encontró la tabla en RECCOUNT, por lo tanto hay que agregarla
     IF (ROW_COUNT = 0) THEN BEGIN 
      lcComando = 'SELECT COUNT(*) FROM ' || tcTablax ||' WHERE ESTADO IS '||ESTADO;
      EXECUTE STATEMENT (lcComando) INTO :lnCantidadFilas;
      INSERT INTO V_RECCOUNT(tabla, cantidad)
          VALUES (:tcTablax||' '||:ESTADO , :lnCantidadFilas);
     END
 
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_SELECT_USUARIOS_TAGS (
    I_USER_NAME D_USER_NAME NOT NULL DEFAULT 'all' )
RETURNS (
    O_USER_NAME D_USER_NAME,
    O_PRIMER_NOMBRE D_NOMBRES,
    O_SEGUNDO_NOMBRE D_NOMBRES,
    O_APELLIDOS D_APELLIDOS,
    O_ESTADO_ACTIVO D_BOOLEAN_T,
    O_ADMINISTRADOR D_BOOLEAN_T,
    O_TAG_NOMBRE D_VARCHAR_255,
    O_TAG_VALOR D_VARCHAR_255,
    O_DESCRIPCION D_VARCHAR_255 )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE V_USER_NAME       D_USER_NAME;
     DECLARE VARIABLE V_PRIMER_NOMBRE   D_NOMBRES;
     DECLARE VARIABLE V_SEGUNDO_NOMBRE  D_NOMBRES;
     DECLARE VARIABLE V_APELLIDOS       D_APELLIDOS;
     DECLARE VARIABLE V_ESTADO_ACTIVO   D_BOOLEAN_T;
     DECLARE VARIABLE V_ADMINISTRADOR   D_BOOLEAN_T;
     DECLARE VARIABLE V_TAG_NOMBRE      D_VARCHAR_255;
     DECLARE VARIABLE V_TAG_VALOR       D_VARCHAR_255;
BEGIN
     /*
          Validacion no está funcionando. Debeido al Dominio del campo no permite 
          Nulos.
     */
     if(I_USER_NAME IS NULL) THEN I_USER_NAME = 'all';
     
     FOR SELECT 
            CAST(U.SEC$USER_NAME AS D_USER_NAME) AS USUARIO,
            U.SEC$FIRST_NAME                  AS PRIMER_NOMBRE,
            U.SEC$MIDDLE_NAME                 AS SEGUNDO_NOMBRE,
            U.SEC$LAST_NAME                   AS APELLIDO,
            U.SEC$ACTIVE                      AS ESTA_ACTIVO,
            U.SEC$ADMIN                       AS ES_ADMIN,
            '-' AS NoValor1, '-' AS NoValor2, 
            u.SEC$DESCRIPTION AS DESCRIPCION
          FROM 
            SEC$USERS U --Tabla que nos permite obtener los usuarios del sistema.
          WHERE TRIM(U.SEC$USER_NAME) STARTING WITH TRIM(UPPER(:i_user_name)) OR TRIM(:i_user_name) = 'all'
          INTO o_user_name, o_primer_nombre, o_segundo_nombre, o_apellidos, 
               o_estado_activo, o_administrador, o_tag_nombre, o_tag_valor, 
               o_descripcion
               
          DO BEGIN
               SUSPEND;
                         
               FOR SELECT r.SEC$USER_NAME,  r.SEC$KEY AS TAG_NOMBRE, 
                         r.SEC$VALUE AS TAG_VALOR
                    FROM SEC$USER_ATTRIBUTES r /*Tabla que nos brinda la informacion o
                    Atributos de los usuarios.*/
                    WHERE TRIM(r.SEC$USER_NAME) = TRIM(:o_user_name)
                    INTO v_user_name, v_tag_nombre, v_tag_valor
                    DO BEGIN
                         o_user_name         = v_user_name;
                         o_primer_nombre     = 'TAGS';
                         o_segundo_nombre    = 'TAGS';
                         o_apellidos         = 'TAGS';
                         o_estado_activo     = FALSE;
                         o_administrador     = FALSE;
                         o_tag_nombre        = v_tag_nombre;
                         o_tag_valor         = v_tag_valor;
                         o_descripcion       = 'TAGS';
                         SUSPEND;
                    END
               /*o_user_name         = '';
               o_primer_nombre     = '';
               o_segundo_nombre    = '';
               o_apellidos         = '';
               o_estado_activo     = NULL;
               o_administrador     = NULL;
               o_tag_nombre        = '';
               o_tag_valor         = '';
               SUSPEND;*/
          END

END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_CANTIDAD_FILAS (
    TNCODSUC D_ID )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE lcNombreTabla D_VARCHAR_25;
   DECLARE VARIABLE lnCantidadFilas D_ID;
   DECLARE VARIABLE lcComando D_VARCHAR_255; 
BEGIN
  FOR
      SELECT
         RDB$RELATION_NAME
      FROM
         RDB$RELATIONS
      WHERE
         RDB$SYSTEM_FLAG = 0 AND
         RDB$RELATION_TYPE = 0
      ORDER BY
         RDB$RELATION_NAME
      INTO
         :lcNombreTabla
   DO BEGIN
      lcComando = 'SELECT COUNT(*) FROM ' || lcNombreTabla ;
      EXECUTE STATEMENT (lcComando) INTO :lnCantidadFilas ;
      UPDATE OR INSERT INTO V_RECCOUNT
               (ID, TABLA, CANTIDAD)
        VALUES (:tnCodSuc , :lcNombreTabla, :lnCantidadFilas)
      MATCHING (TABLA);
   END
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_CLIENTE_CC (
    ID D_ID,
    PNOMBRE D_NOMBRES,
    SNOMBRE D_NOMBRES,
    APELLIDOS D_APELLIDOS,
    SEXO D_SEXO,
    CORREO D_CORREO,
    SALDO D_DINERO )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE CORREO_ANTERIOR D_CORREO;
DECLARE VARIABLE SALDO_ANTERIOR D_DINERO;
BEGIN
     /*Actualizamos los atributos basicos*/
     UPDATE V_PERSONAS a
     SET 
          a.PNOMBRE = :PNOMBRE, 
          a.SNOMBRE = :SNOMBRE, 
          a.APELLIDOS = :APELLIDOS, 
          a.SEXO = :SEXO
     WHERE
          a.ID = :ID;
          
     /*Recuperamos el correo anteriordel cliente.*/
     CORREO_ANTERIOR = (
                         SELECT e.EMAIL 
                         FROM V_CONTACTOS_EMAIL e 
                         WHERE e.ID_PERSONA = :ID AND e.ESTADO AND e.POR_DEFECTO
               );

     /*Si el correo anterior es diferente al correo actual, lo actualizamos. 
     En caso contrario no.*/
     IF(TRIM(UPPER(:CORREO_ANTERIOR)) <> TRIM(UPPER(:CORREO)))THEN BEGIN
          /*Eliminamos cualquier correo por defecto de cliente.*/
          UPDATE V_CONTACTOS_EMAIL e
          SET
               e.POR_DEFECTO = FALSE
          WHERE 
               e.ID_PERSONA = :ID;
          
          /*Insertamos un correo nuevo el cual sera activo y por defecto del cliente.*/
          INSERT INTO V_CONTACTOS_EMAIL (ID_PERSONA, EMAIL)
          VALUES (:ID, :CORREO);
     END
     
     /*Investigamos el saldo_anterior del cliente. Si es nulo obtenemos 0.00*/
     SALDO_ANTERIOR = COALESCE(
                                   (
                                        SELECT a.SALDO 
                                        FROM V_PERSONAS_CLIENTES_ATR a 
                                        WHERE a.ID = :ID
                                   ), 
                                   0.00
                              );
     
     /*Si el saldo anterior es 0.00, agregamos el nuevo saldo al cliente.*/
     IF(SALDO_ANTERIOR = 0.00)THEN BEGIN
          UPDATE V_PERSONAS_CLIENTES_ATR a
          SET
               a.SALDO = :SALDO
          WHERE
               a.ID = :ID;
     END ELSE BEGIN
          /*Pero si el saldo anterior es diferente del saldo actual, 
          sumamos o restamo la cantidad de SALDO.*/
          IF(SALDO_ANTERIOR <> :SALDO)THEN BEGIN
               UPDATE V_PERSONAS_CLIENTES_ATR a
               SET
                    a.SALDO = a.SALDO + :SALDO
               WHERE
                    a.ID = :ID;
          END
     END
          
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_CLIENTE_SB (
    I_ID D_ID,
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
SQL SECURITY INVOKER

AS
BEGIN
     /*Validamos que el id se encuentre en la vista V_PERSONAS_CLIENTES*/
     IF(
          (SELECT (1)
          FROM V_PERSONAS_CLIENTES c
          WHERE c.ID = :I_ID) IS NULL
     
     )THEN EXCEPTION E_CLIENTE_NO_ENCONTRADO;
     
     /*Entidad PERSONA*/
     UPDATE V_PERSONAS a SET 
          a.PERSONA = :I_PERSONA, 
          a.PNOMBRE = :I_PNOMBRE, 
          a.SNOMBRE = :I_SNOMBRE, 
          a.APELLIDOS = :I_APELLIDOS, 
          a.SEXO = :I_SEXO, 
          a.FECHA_NACIMIENTO = :I_FECHA_NACIMIENTO, 
          a.ESTADO = :I_ESTADO
     WHERE
          a.ID = :I_ID;
     
     --Atributo GENERALES
     UPDATE V_GENERALES a SET 
          a.CEDULA = :I_CEDULA, 
          a.ID_TIPO_SANGRE = 0, 
          a.ESTADO_CIVIL = :I_ESTADO_CIVIL 
     WHERE
          a.ID_PERSONA = :I_ID;
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_DEUDA_ESTADO (
    E_ID_DEUDA D_ID NOT NULL,
    E_OBJ D_ESTADO_C_I_P_A_N_T NOT NULL )
RETURNS (
    S_SALIDA D_VARCHAR_15 )
SQL SECURITY DEFINER

AS
BEGIN
    
    IF((SELECT (1) 
          FROM V_DEUDAS d 
          WHERE d.ID = :e_id_Deuda) IS NULL)THEN
    BEGIN
          s_salida = 'No encontrada;';
          SUSPEND;
          EXCEPTION E_DEUDA_NO_ENCONTRADA;
    END
    
    IF(:e_obj = 'i')THEN
    BEGIN
        UPDATE V_DEUDAS a
        SET 
            a.ESTADO = 'i'
        WHERE
            a.ID = :e_id_Deuda;
        s_salida = 'Iniciada';
        SUSPEND;
    END
    
    IF(:e_obj = 'p')THEN
    BEGIN
        UPDATE V_DEUDAS a
        SET 
            a.ESTADO = 'p'
        WHERE
            a.ID = :e_id_Deuda;
        s_salida = 'Pagada';
        SUSPEND;
    END
    
    IF(:e_obj = 'a')THEN
    BEGIN
        UPDATE V_DEUDAS a
        SET 
            a.ESTADO = 'a'
        WHERE
            a.ID = :e_id_Deuda;
        s_salida = 'Abonada';
        SUSPEND;
    END
    
    IF(:e_obj = 'n')THEN
    BEGIN
        UPDATE V_DEUDAS a
        SET 
            a.ESTADO = 'n'
        WHERE
            a.ID = :e_id_Deuda;
        s_salida = 'Nulada';
        SUSPEND;
    END
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_DIRECCION_CLIENTE (
    I_ID D_ID,
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_DIRECCION D_VARCHAR_255,
    I_ESTADO D_BOOLEAN_T,
    I_POR_DEFECTO D_BOOLEAN_T )
SQL SECURITY DEFINER

AS
BEGIN
     IF((SELECT (1) 
          FROM V_FACTURAS f 
          WHERE f.ID_CONTACTOS_DIRECCIONES = :I_ID) = 1)THEN
          EXCEPTION E_DIRECCION_EN_USO;
     
     UPDATE CONTACTOS_DIRECCIONES a
     SET 
          a.ID_PROVINCIA = :I_ID_PROVINCIA, 
          a.ID_MUNICIPIO = :I_ID_MUNICIPIO, 
          a.ID_DISTRITO_MUNICIPAL = :I_ID_DISTRITO_MUNICIPAL, 
          a.DIRECCION = :I_DIRECCION, 
          a.ESTADO = :I_ESTADO, 
          a.POR_DEFECTO = :I_POR_DEFECTO
     WHERE
          a.ID = :I_ID;
          
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_ESTUDIANTE (
    I_ID D_ID,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER

AS
BEGIN
     UPDATE V_PERSONAS a SET 
          a.PNOMBRE = :I_PNOMBRE, 
          a.SNOMBRE = :I_SNOMBRE, 
          a.APELLIDOS = :I_APELLIDOS, 
          a.SEXO = :I_SEXO, 
          a.FECHA_NACIMIENTO = :I_FECHA_NACIMIENTO, 
          a.ESTADO = :I_ESTADO
     WHERE
          a.ID = :I_ID;
     
     --Se actualizan los padres si es que estan registrados en la vista V_PADRES. 
     --UPDATE V_PADRES a SET a.ID = :I_ID_PADRE WHERE a.ID_HIJO = :I_ID;
     
     --UPDATE V_PADRES a SET a.ID = :I_ID_MADRE WHERE a.ID_HIJO = :I_ID;
     /*
          Debe de obtenerse las relaciones entre padre he hijo de la tabla RELACION_FAMILIAR.
     */
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_OR_INSERT_FACTURA (
    I_ID D_ID,
    I_ID_CLIENTE D_ID,
    I_ID_CONTACTOS_TEL D_ID,
    I_ID_CONTACTOS_DIRECCIONES D_ID,
    I_ID_CONTACTOS_EMAIL D_ID,
    I_ID_TURNO D_ID,
    I_TOTAL D_DINERO,
    I_EFECTIVO D_DINERO,
    I_ESTADO_FACTURA D_ESTADO_C_I_P_A_N_T,
    I_NOMBRE_TEMP D_NOMBRES )
RETURNS (
    O_ID D_ID )
SQL SECURITY DEFINER

AS
BEGIN
     /*Si el efectivo es menor que el total mandar excepcion.*/
     IF(I_TOTAL < I_EFECTIVO)THEN
          EXCEPTION E_EFECTIVO_MENOR_TOTAL;
     
     /*Validamos que el turno del usuario esté activo*/
     IF(( SELECT (1) 
          FROM V_TURNOS t 
          WHERE t.ID = :I_ID_TURNO AND t.ESTADO) IS NULL)THEN
          EXCEPTION E_CAJERO_TURNO_INACTIVO;
     
     /*Validamos que el telefono del usuario esté activo */
     IF(:I_ID_CONTACTOS_TEL <> 0 AND 
          (SELECT (1) 
               FROM V_CONTACTOS_TEL t 
               WHERE t.ID = :I_ID_CONTACTOS_TEL AND t.ESTADO) IS NULL)THEN
                    EXCEPTION E_TELEFONO_INACTIVO;
          
     
     
     /*Validamos que el correo del usuario esté activo */
     IF(:I_ID_CONTACTOS_EMAIL <> 0 AND 
          (SELECT (1) 
               FROM V_CONTACTOS_EMAIL e 
               WHERE e.ID = :I_ID_CONTACTOS_EMAIL AND e.ESTADO) IS NULL)THEN
                    EXCEPTION E_CORREO_INACTIVO;
     
     
     /*Validamos que la direccion del usuario esté activa */
     IF(:I_ID_CONTACTOS_DIRECCIONES <> 0 AND 
          (SELECT (1) 
               FROM V_CONTACTOS_DIRECCIONES e 
               WHERE e.ID = :I_ID_CONTACTOS_DIRECCIONES AND e.ESTADO) IS NULL)THEN
                    EXCEPTION E_DIRECCION_INACTIVO;
     
     
     
     UPDATE OR INSERT INTO V_FACTURAS (ID, ID_CLIENTE, ID_CONTACTOS_TEL, ID_CONTACTOS_DIRECCIONES,
     ID_CONTACTOS_EMAIL, ID_TURNO, TOTAL, EFECTIVO, ESTADO_FACTURA, NOMBRE_TEMP)
     VALUES(:I_ID, :I_ID_CLIENTE, :I_ID_CONTACTOS_TEL, :I_ID_CONTACTOS_DIRECCIONES, 
          :I_ID_CONTACTOS_EMAIL, :I_ID_TURNO, :I_TOTAL, :I_EFECTIVO, :I_ESTADO_FACTURA,
          :I_NOMBRE_TEMP )
     MATCHING (ID)
     
     RETURNING (ID) 
     
     INTO :O_ID;
     
     SUSPEND;
     
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_PACIENTE (
    I_ID_PACIENTE D_ID,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ID_TIPO_SANGRE D_ID,
    I_ID_ARS D_ID,
    I_NONSS D_VARCHAR_25,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_ARS D_BOOLEAN_T )
SQL SECURITY INVOKER

AS
BEGIN
     --Se actualizan los campos de la vista V_PERSONAS
     UPDATE V_PERSONAS a
     SET 
          a.PNOMBRE = :I_PNOMBRE, 
          a.SNOMBRE = :I_SNOMBRE, 
          a.APELLIDOS = :I_APELLIDOS, 
          a.SEXO = :I_SEXO, 
          a.FECHA_NACIMIENTO = :I_FECHA_NACIMIENTO, 
          a.ESTADO = :I_ESTADO
     WHERE
          a.ID = :I_ID_PACIENTE;
          
     --Se actualizan los padres si es que estan registrados en la vista V_PADRES. 
     --UPDATE V_PADRES a SET a.ID = :I_ID_PADRE WHERE a.ID_HIJO = :I_ID_PACIENTE;
     
     --UPDATE V_PADRES a SET a.ID = :I_ID_MADRE WHERE a.ID_HIJO = :I_ID_PACIENTE;
     /*
          Debe de obtenerse las relaciones entre padre he hijo de la tabla RELACION_FAMILIAR.
     */
     
     --Se actualizan los campos de la vista V_GENERALES
     UPDATE V_GENERALES a
     SET 
          a.CEDULA = :I_CEDULA, 
          a.ID_TIPO_SANGRE = :I_ID_TIPO_SANGRE 
     WHERE
          a.ID_PERSONA = :I_ID_PACIENTE;
     
     --Se actualizan los campos de la vista V_ASEGURADOS
     UPDATE V_ASEGURADOS a
     SET 
          a.ID_ARS = :I_ID_ARS, 
          a.NO_NSS = :I_NONSS, 
          a.ESTADO = :I_ESTADO_ARS
     WHERE
          a.ID_PERSONA = :I_ID_PACIENTE;

  
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_PADRES (
    I_ID D_ID,
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_ID_CODIGOPOSTAL D_ID,
    I_ID_TIPO_SANGRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_DIRECCION D_VARCHAR_70,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
SQL SECURITY DEFINER

AS
BEGIN

     UPDATE V_PERSONAS a
     SET  
          a.PNOMBRE = :I_PNOMBRE, 
          a.SNOMBRE = :I_SNOMBRE, 
          a.APELLIDOS = :I_APELLIDOS, 
          a.SEXO = :I_SEXO, 
          a.FECHA_NACIMIENTO = :I_FECHA_NACIMIENTO, 
          a.ESTADO = :I_ESTADO
     WHERE
          a.ID = :I_ID;
          
     UPDATE V_GENERALES a
     SET
          a.ID_TIPO_SANGRE = :I_ID_TIPO_SANGRE, 
          a.CEDULA = :I_CEDULA, 
          a.ESTADO_CIVIL = :I_ESTADO_CIVIL
     WHERE
          a.ID_PERSONA = :I_ID;
          
     UPDATE V_CONTACTOS_DIRECCIONES a
     SET 
          a.ID_PROVINCIA = :I_ID_PROVINCIA, 
          a.ID_MUNICIPIO = :I_ID_MUNICIPIO, 
          a.ID_DISTRITO_MUNICIPAL = :I_ID_DISTRITO_MUNICIPAL, 
          a.ID_CODIGO_POSTAL = :I_ID_CODIGOPOSTAL,  
          a.DIRECCION = :I_DIRECCION
     WHERE
          a.ID_PERSONA = :I_ID;
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_PROVEEDORES (
    I_ID D_ID,
    I_CODIGO_PROVEEDOR D_CODIGO,
    I_PERSONA D_PERSONA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T )
SQL SECURITY DEFINER

AS
BEGIN
     
     UPDATE PERSONAS a
     SET 
          a.PERSONA = :I_PERSONA, 
          a.PNOMBRE = :I_PNOMBRE, 
          a.SNOMBRE = :I_SNOMBRE, 
          a.APELLIDOS = :I_APELLIDOS, 
          a.SEXO = :I_SEXO, 
          a.FECHA_NACIMIENTO = :I_FECHA_NACIMIENTO, 
          a.ESTADO = :I_ESTADO
     WHERE
          a.ID = :I_ID;
     
     /*UPDATE V_PROVEEDORES a
     SET 
          a.CODIGO_PROVEEDOR = :I_CODIGO_PROVEEDOR 
     WHERE
          a.ID = :I_ID;*/
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_USUARIOS (
    I_USER_NAME D_USER_NAME,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F,
    I_DESCRIPCION D_BLOB_TEXTO )
SQL SECURITY DEFINER

AS
DECLARE VARIABLE V_ID D_ID; 
DECLARE VARIABLE V_SQL D_VARCHAR_255;
BEGIN
     /*Validando que el usuario este registrado en la app*/
     IF((SELECT (1) FROM SEC$USERS r WHERE TRIM(r.SEC$USER_NAME) LIKE (TRIM(:I_USER_NAME))) IS NULL)THEN
          EXCEPTION E_USUARIO_NO_ENCONTRADO;
     
          
     V_SQL = 'ALTER USER '||:I_USER_NAME||
     ' FIRSTNAME '''||I_PNOMBRE||
     ''' MIDDLENAME '''||I_SNOMBRE||
     ''' LASTNAME '''||I_APELLIDOS||
     ''''||iif(I_ESTADO, ' ACTIVE ',' INACTIVE ') ||
     iif(I_ADMINISTRADOR, ' GRANT ',' REVOKE ') || 
     ' ADMIN ROLE USING PLUGIN Srp ';
     
     EXECUTE STATEMENT V_SQL;
     
     IF(I_CLAVE != NULL)THEN
     BEGIN
          V_SQL = 'ALTER USER '||:I_USER_NAME||' PASSWORD '''||I_CLAVE;
          EXECUTE STATEMENT V_SQL;
     END
     
     EXECUTE STATEMENT 'COMMENT ON USER '||:I_USER_NAME||' is '''||:I_DESCRIPCION||'''';
     /*
     Se actualizo el dia 19 05 2022, Nota: se quito el atributo PASSWORD de el 
     V_SQL porque modificaba el PASSWORD del usuario si venia, la linea 39 se 
     encargar de hacer esa actualizacion. 
     */
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_VALIDAR_USUARIO (
    I_USER_NAME D_USER_NAME )
RETURNS (
    O_USER_NAME D_USER_NAME )
SQL SECURITY DEFINER

AS
BEGIN
     IF((SELECT (1) FROM V_USUARIOS u WHERE TRIM(u.USERNAME) LIKE TRIM(:I_USER_NAME)) IS NULL)THEN
          EXCEPTION E_USUARIO_NO_ENCONTRADO;
     O_USER_NAME = TRIM(:I_USER_NAME);
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SYSTEM_ENCRIPTAR (
    TCTEXTO D_BLOB_TEXTO,
    TCACCION CHAR(1),
    TCNUMEROENCRIPTACION D_VARCHAR_255,
    TCNUMEROREPETICION D_VARCHAR_255 )
RETURNS (
    FTCNUEVOTEXTO D_BLOB_TEXTO )
SQL SECURITY INVOKER

AS
DECLARE VARIABLE lnI          SMALLINT;
DECLARE VARIABLE lnJ          SMALLINT;
DECLARE VARIABLE lnK          SMALLINT;
DECLARE VARIABLE lcCaracter   CHAR(1);
DECLARE VARIABLE lnAscii      SMALLINT;
DECLARE VARIABLE lnValor1     SMALLINT;
DECLARE VARIABLE lnValor2     SMALLINT;
DECLARE VARIABLE lnNuevoAscii SMALLINT;
BEGIN 
   ftcNuevoTexto = '';     -- El texto que se devolverá
   lnI = 1;
   lnJ = 1;
   lnK = 1;
 
   WHILE (lnI <= CHAR_LENGTH(tcTexto)) DO BEGIN
      lcCaracter    = SUBSTRING(tcTexto FROM lnI FOR 1);     -- Obtiene el caracter que está en la posición lnI
      lnAscii       = ASCII_VAL(lcCaracter);                  -- Halla el código ASCII del caracter
      lnValor1      = CAST(SUBSTRING(tcNumeroEncriptacion FROM lnJ FOR 1) AS SMALLINT);
      lnValor2      = CAST(SUBSTRING(tcNumeroRepeticion FROM lnK FOR 1) AS SMALLINT);
      lnNuevoAscii  = MOD((lnAscii + IIF(tcAccion = 'E', 1, -1) * lnValor1 * lnValor2), 256);
      lnNuevoAscii  = lnNuevoAscii + IIF(lnNuevoAscii < 0, 256, 0);
      ftcNuevoTexto = ftcNuevoTexto || ASCII_CHAR(lnNuevoAscii);
      lnI = lnI + 1;
      lnJ = lnJ + 1;
      lnJ = IIF(lnJ > CHAR_LENGTH(tcNumeroEncriptacion), 1, lnJ);
      lnK = lnK + 1;
      lnK = IIF(lnK > CHAR_LENGTH(tcNumeroRepeticion), 1, lnK);
   END
   SUSPEND;
 
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SYSTEM_SET_LICENCIA (
    E_FCHV CHAR(10),
    E_IDMAC VARCHAR(80),
    CLAVE1 CHAR(7),
    CLAVE2 CHAR(7) )
SQL SECURITY DEFINER

AS
declare variable V_FCHA varchar(20);
declare variable V_FCHI char(10);
BEGIN
    V_FCHI = (SELECT * FROM SYSTEM_ENCRIPTAR(current_date, 'E', :clave1, :clave2));
    V_FCHA = (SELECT * 
              FROM SYSTEM_ENCRIPTAR( 
              EXTRACT(DAY FROM CURRENT_DATE)||'.'||
              EXTRACT(MONTH FROM CURRENT_DATE)||'.'||
              EXTRACT(YEAR FROM CURRENT_DATE),
              'E',
              :clave1,
              :clave2));
    E_FCHV = (SELECT * FROM SYSTEM_ENCRIPTAR(:E_FCHV, 'E', :clave1, :clave2));
    E_IDMAC = (SELECT * FROM SYSTEM_ENCRIPTAR(:E_IDMAC, 'E', :clave1, :clave2));
    
    --Condicion necesaria para insertar el dato correctamente
    IF ((SELECT COUNT(*) FROM E_S_SYS) = 0) THEN
    BEGIN
        INSERT INTO E_S_SYS(ID_E_S_SYS, FCHI, FCHA, FCHV, IDMAC)
        VALUES(1, :V_FCHI, :V_FCHA, :E_FCHV, :E_IDMAC);
    END ELSE BEGIN
        UPDATE E_S_SYS a
        SET a.FCHI = :V_FCHI,
            a.FCHA = :V_FCHA,
            a.FCHV = :E_FCHV,
            a.IDMAC = :E_IDMAC;
    END
    
END
^
SET TERM ; ^


ALTER TABLE ANALISIS ADD CONSTRAINT FK_ANALISIS_1
  FOREIGN KEY (ID_PACIENTE) REFERENCES PERSONAS_PACIENTES (ID) ON DELETE NO ACTION;
ALTER TABLE ANTECEDENTES ADD CONSTRAINT FK_ANTECEDENTES_0
  FOREIGN KEY (ID_CONSULTA) REFERENCES CONSULTAS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
CREATE UNIQUE INDEX IDX_ANTECEDENTES1 ON ANTECEDENTES (ID,ID_CONSULTA);
COMMENT ON TABLE ANTECEDENTES IS 'Es una tabla utilizada para almacenar los antecedentes de los pacientes del sistema, dicho antecedente describe la condicion de los paciente en el momento de la consulta. ';
COMMENT ON TABLE ARS IS 'Tabla que almacenas las propiedades basicas de los seguros con lo que opera el sistema.

Descripcion seria el nombre de la aseguradora, la converConsulta guardar el valor en porciento de lo que el seguro cubre por consulta.';
ALTER TABLE ASEGURADOS ADD CONSTRAINT FK_ASEGURADOS_0
  FOREIGN KEY (ID_ARS) REFERENCES ARS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE ASEGURADOS ADD CONSTRAINT FK_ASEGURADOS_1
  FOREIGN KEY (ID_PERSONA) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE CODIGOS_POSTALES ADD CONSTRAINT LOCALIDADES_POSTALES_FK
  FOREIGN KEY (IDPROVINCIA) REFERENCES PROVINCIAS (ID);
CREATE INDEX CODIGO_POSTAL_IDX ON CODIGOS_POSTALES (CODIGO_POSTAL);
ALTER TABLE CONSULTAS ADD CONSTRAINT FK_CONSULTAS_0
  FOREIGN KEY (ID_PACIENTE) REFERENCES PERSONAS_PACIENTES (ID) ON DELETE NO ACTION;
ALTER TABLE CONSULTAS ADD CONSTRAINT FK_CONSULTAS_1
  FOREIGN KEY (ID_CONTROL_CONSULTA) REFERENCES CONTROL_CONSULTA (ID) ON DELETE NO ACTION;
ALTER TABLE CONSULTAS_APROBADAS ADD TOTALCOSTO COMPUTED BY (CAST((costo - (costo * (descuento/100))) as D_DINERO));
ALTER TABLE CONSULTAS_APROBADAS ADD CONSTRAINT CONSULTAS_APROBADAS_FK
  FOREIGN KEY (ID) REFERENCES CONSULTAS (ID);
COMMENT ON COLUMN CONTACTOS_DIRECCIONES.ID IS 'Identificador del registro.';
COMMENT ON COLUMN CONTACTOS_DIRECCIONES.ID_PERSONA IS 'Identificador de la personas en el sistema.';
COMMENT ON COLUMN CONTACTOS_DIRECCIONES.ID_PROVINCIA IS 'Identificador de la pronvincia que tiene registrada la persona.';
COMMENT ON COLUMN CONTACTOS_DIRECCIONES.ID_MUNICIPIO IS 'Identificador del municipio que tiene registrada la persona.';
COMMENT ON COLUMN CONTACTOS_DIRECCIONES.ID_DISTRITO_MUNICIPAL IS 'Identificador del distrito municipal que tiene registrada la persona.';
COMMENT ON COLUMN CONTACTOS_DIRECCIONES.ID_CODIGO_POSTAL IS 'Identificador del codigo postal que tiene registrada la persona.';
COMMENT ON COLUMN CONTACTOS_DIRECCIONES.DIRECCION IS 'Direccion de la persona en la cual se debe registrar el nombre de la calle y numero de la casa o referencia.';
COMMENT ON COLUMN CONTACTOS_DIRECCIONES.FECHA IS 'Fecha en la que se hizo el registro en el sistema.';
COMMENT ON COLUMN CONTACTOS_DIRECCIONES.ESTADO IS 'Este campo indica si la direccion de la persona sigue utilizando  dicha direccion.';
COMMENT ON COLUMN CONTACTOS_DIRECCIONES.POR_DEFECTO IS 'Este campo indica si la direccion es la principal utilizada por el sistema.';
ALTER TABLE CONTACTOS_DIRECCIONES ADD CONSTRAINT FK_CONTACTOS_DIRECCIONES_0
  FOREIGN KEY (ID_PERSONA) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE CONTACTOS_DIRECCIONES ADD CONSTRAINT FK_CONTACTOS_DIRECCIONES_1
  FOREIGN KEY (ID_PROVINCIA) REFERENCES PROVINCIAS (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE CONTACTOS_DIRECCIONES ADD CONSTRAINT FK_CONTACTOS_DIRECCIONES_2
  FOREIGN KEY (ID_MUNICIPIO) REFERENCES MUNICIPIOS (ID);
ALTER TABLE CONTACTOS_DIRECCIONES ADD CONSTRAINT FK_CONTACTOS_DIRECCIONES_3
  FOREIGN KEY (ID_DISTRITO_MUNICIPAL) REFERENCES DISTRITOS_MUNICIPALES (ID);
ALTER TABLE CONTACTOS_DIRECCIONES ADD CONSTRAINT FK_CONTACTOS_DIRECCIONES_4
  FOREIGN KEY (ID_CODIGO_POSTAL) REFERENCES CODIGOS_POSTALES (ID);
COMMENT ON TABLE CONTACTOS_DIRECCIONES IS 'Tabla que almacena la direcciones de las personas en el sistema.

Se supone que estos registros no deben de eliminarse al menos que 
no tenga registros asociado a la llave primaria.
';
ALTER TABLE CONTACTOS_EMAIL ADD CONSTRAINT FK_CONTACTOS_EMAIL_1
  FOREIGN KEY (ID_PERSONA) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE CONTACTOS_TEL ADD CONSTRAINT FK_CONTACTOS_TEL_1
  FOREIGN KEY (ID_PERSONA) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
COMMENT ON COLUMN CONTROL_CONSULTA.USER_NAME IS 'Este campo es utilizando para guardar el usuario que va a tener consultas programadas cierto dias.';
COMMENT ON COLUMN CONTROL_CONSULTA.USER_NAME_ IS 'Este campo guarda el usuario que realizó el registro. ';
COMMENT ON COLUMN DEUDAS.ID IS 'Identificador de la deuda.';
COMMENT ON COLUMN DEUDAS.ID_CLIENTE IS 'Identificador del Cliente';
COMMENT ON COLUMN DEUDAS.ID_FACTURA IS 'Factura la cual se le asocia una factura a credito, 
si es igual a cero 0 es porque no es una factura, 
viene siendo una deuda fuera de sistema de facturacion. ';
COMMENT ON COLUMN DEUDAS.CONCEPTO IS 'Concepto por el cual se registra la deuda.';
COMMENT ON COLUMN DEUDAS.MONTO IS 'El monto de la deuda';
COMMENT ON COLUMN DEUDAS.FECHA IS 'La fecha de la deuda, se inserta SOLA';
COMMENT ON COLUMN DEUDAS.HORA IS 'La Hora tambien se Inserta SOLA';
COMMENT ON COLUMN DEUDAS.ESTADO IS 'Estado si es Deuda Inicial (i), Pagada (p), Abonada (a), Nulada (n).';
ALTER TABLE DEUDAS ADD CONSTRAINT DEUDAS_FK_1
  FOREIGN KEY (ID_FACTURA) REFERENCES FACTURAS (ID);
ALTER TABLE DEUDAS ADD CONSTRAINT FK_DEUDAS_1
  FOREIGN KEY (ID_CLIENTE) REFERENCES PERSONAS_CLIENTES (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
CREATE INDEX IDX_DEUDAS1 ON DEUDAS (ESTADO);
COMMENT ON TABLE DEUDAS IS 'Tabla que almacenas las deudas del sistema, tanto deuda por facturacion o externas. ';
ALTER TABLE DISTRITOS_MUNICIPALES ADD CONSTRAINT IDMUNICIPIO_IDX
  FOREIGN KEY (IDMUNICIPIO) REFERENCES MUNICIPIOS (ID);
ALTER TABLE D_DEUDAS_PAGAS ADD CONSTRAINT FK_D_DEUDAS_PAGAS_0
  FOREIGN KEY (ID_DEUDAS) REFERENCES DEUDAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
COMMENT ON TABLE D_DEUDAS_PAGAS IS 'En esta tabla llevamos los pagos de los cliente a las deudas registrada en la tabla de Deudas.';
ALTER TABLE D_FACTURAS ADD CONSTRAINT FK_D_FACTURAS_0
  FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS (ID);
ALTER TABLE D_FACTURAS ADD CONSTRAINT FK_D_FACTURAS_1
  FOREIGN KEY (ID_FACTURA) REFERENCES FACTURAS (ID);
ALTER TABLE D_GUIA_VIGILANCIA_DESARROLLO ADD CONSTRAINT FK_DETALLE_GUIA_VIG_2
  FOREIGN KEY (ID_GVD) REFERENCES GUIA_VIGILANCIA_DESARROLLO (ID);
ALTER TABLE D_GUIA_VIGILANCIA_DESARROLLO ADD CONSTRAINT FK_D_GUIA_VIGILANCIA_DESAR_0
  FOREIGN KEY (ID_PACIENTE) REFERENCES PERSONAS_PACIENTES (ID) ON DELETE NO ACTION;
ALTER TABLE D_MOTIVO_CONSULTA ADD CONSTRAINT FK_D_MOTIVO_CONSULTA_1
  FOREIGN KEY (IDCONSULTA) REFERENCES CONSULTAS (ID) ON DELETE CASCADE;
ALTER TABLE D_MOTIVO_CONSULTA ADD CONSTRAINT FK_D_MOTIVO_CONSULTA_2
  FOREIGN KEY (IDMCONSULTA) REFERENCES MOTIVO_CONSULTA (ID) ON DELETE CASCADE;
ALTER TABLE D_RECETAS ADD CONSTRAINT FK_D_RECETAS_0
  FOREIGN KEY (ID_MEDICAMENTO) REFERENCES PRODUCTOS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE D_RECETAS ADD CONSTRAINT FK_D_RECETAS_1
  FOREIGN KEY (ID_RECETA) REFERENCES RECETAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE ENTRADA_PRODUCTOS ADD CONSTRAINT FK_ENTRADA_PRODUCTOS_0
  FOREIGN KEY (IDPROVEDOR) REFERENCES PERSONAS_PROVEEDORES (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE ENTRADA_PRODUCTOS ADD CONSTRAINT FK_ENTRADA_PRODUCTOS_1
  FOREIGN KEY (IDPRODUCTO) REFERENCES PRODUCTOS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
COMMENT ON COLUMN E_S_SYS.ID_E_S_SYS IS 'Identificador unico de la empresa.';
COMMENT ON COLUMN E_S_SYS.NOMBRE IS 'Campo que almacena el nombre de la empresa';
COMMENT ON COLUMN E_S_SYS.TELEFONOS IS 'Campo que almacena los numeros telefonico de la empresa.';
COMMENT ON COLUMN E_S_SYS.FCHI IS 'Fecha de inicio de servicio de la empresa. ';
COMMENT ON COLUMN E_S_SYS.FCHA IS 'Fecha actual de la empresa.';
COMMENT ON COLUMN E_S_SYS.FCHV IS 'Fecha de vencimiento de la licencia del servicio. ';
COMMENT ON COLUMN E_S_SYS.IDMAC IS 'Identificador unico del equipo.';
COMMENT ON COLUMN E_S_SYS.DIRECCION IS 'Direccion del local donde opera el sistema.';
COMMENT ON COLUMN E_S_SYS.MENSAJE_FOOTER IS 'Mensaje que se presentan en el pie de la factura. ';
COMMENT ON COLUMN E_S_SYS.LOGO IS 'Logo tipo de la empresa, que se presenta en la ventana principal. ';
COMMENT ON TABLE E_S_SYS IS 'Esta tabla tiene la finalidad de almacenar datos importantes del negocio. ';
COMMENT ON COLUMN FACTURAS.ID IS 'Identificador de la tabla facturas.';
COMMENT ON COLUMN FACTURAS.ID_CLIENTE IS 'Identificador del cliente';
COMMENT ON COLUMN FACTURAS.ID_CONTACTOS_TEL IS 'Es el contacto telefonico del cliente por defecto y es el asignado para la factura.';
COMMENT ON COLUMN FACTURAS.ID_CONTACTOS_DIRECCIONES IS 'Es la direccion del cliente por defecto y es la asignada para la factura.';
COMMENT ON COLUMN FACTURAS.ID_CONTACTOS_EMAIL IS 'Es el contacto de correo del cliente por defecto y es el asignado para la factura.';
COMMENT ON COLUMN FACTURAS.ID_TURNO IS 'Turno que tiene asignado el cajero para realizar las operaciones de factura.';
COMMENT ON COLUMN FACTURAS.FECHA_HORA IS 'Fecha y hora de la creacion de la factura. ';
COMMENT ON COLUMN FACTURAS.TOTAL IS 'Este campo almacena el total de la factura.';
COMMENT ON COLUMN FACTURAS.EFECTIVO IS 'Es el dinero que entrega el cliente al cajero.';
COMMENT ON COLUMN FACTURAS.ESTADO_FACTURA IS 'Este campo sirve para ver el estado de la factura que puede ser:
c = Contado
i = Iniciada
p = Pagado
a = Credito
n = nula
t = temporal';
COMMENT ON COLUMN FACTURAS.NOMBRE_TEMP IS 'Nombre utilizado de manera temporal de la factura, para indentificar el cliente.';
ALTER TABLE FACTURAS ADD CONSTRAINT FK_FACTURAS_0
  FOREIGN KEY (ID_CLIENTE) REFERENCES PERSONAS_CLIENTES (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE FACTURAS ADD CONSTRAINT FK_FACTURAS_1
  FOREIGN KEY (ID_CONTACTOS_TEL) REFERENCES CONTACTOS_TEL (ID);
ALTER TABLE FACTURAS ADD CONSTRAINT FK_FACTURAS_3
  FOREIGN KEY (ID_CONTACTOS_EMAIL) REFERENCES CONTACTOS_EMAIL (ID);
ALTER TABLE FACTURAS ADD CONSTRAINT FK_FACTURAS_4
  FOREIGN KEY (ID_TURNO) REFERENCES TURNOS (ID);
ALTER TABLE FACTURAS ADD CONSTRAINT FK_FACTURAS_5
  FOREIGN KEY (ID_CONTACTOS_DIRECCIONES) REFERENCES CONTACTOS_DIRECCIONES (ID);
COMMENT ON TABLE FACTURAS IS 'El campo estado puede ser  p=Pagado, c=credito, a=abono.';
ALTER TABLE GENERALES ADD CONSTRAINT FK_GENERALES_0
  FOREIGN KEY (ID_TIPO_SANGRE) REFERENCES TIPOS_SANGRE (ID);
ALTER TABLE GENERALES ADD CONSTRAINT GENERALES_FK
  FOREIGN KEY (ID_PERSONA) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
COMMENT ON COLUMN GUIA_VIGILANCIA_DESARROLLO.ID IS 'Identificador para indentificar las caracteristicas del niño a su edad.';
COMMENT ON COLUMN GUIA_VIGILANCIA_DESARROLLO.EDAD IS 'Las edades que registran aqui son en meses';
COMMENT ON COLUMN GUIA_VIGILANCIA_DESARROLLO.CARACT_DESARR_EVALUAR IS 'Describe el comportamiento de niño a su edad.';
ALTER TABLE HUELLAS ADD CONSTRAINT FK_HUELLAS_0
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE INSCRIPCIONES ADD CONSTRAINT FK_INSCRIPCIONES_0
  FOREIGN KEY (ID_ESTUDIANTE) REFERENCES PERSONAS_ESTUDIANTES (ID) ON DELETE NO ACTION;
ALTER TABLE INSCRIPCIONES ADD CONSTRAINT FK_TANDAS
  FOREIGN KEY (ID_TANDA) REFERENCES TANDAS (ID);
ALTER TABLE MENSAJES ADD CONSTRAINT FK_MENSAJES_0
  FOREIGN KEY (ID_PACIENTE) REFERENCES PERSONAS_PACIENTES (ID) ON DELETE NO ACTION;
ALTER TABLE METRICAS ADD CONSTRAINT FK_METRICAS_1
  FOREIGN KEY (IDCONSULTA) REFERENCES CONSULTAS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE MUNICIPIOS ADD CONSTRAINT IDPROVINCIA_IDX
  FOREIGN KEY (IDPROVINCIA) REFERENCES PROVINCIAS (ID);
COMMENT ON COLUMN PERSONAS.ID IS 'Identificador de la Persona en el sistema';
COMMENT ON COLUMN PERSONAS.PERSONA IS 'Identidad de una persona F Fisica o J Juridica.';
COMMENT ON COLUMN PERSONAS.PNOMBRE IS 'Primer nombre de la persona, como se encuentra en la cedula de identidad.';
COMMENT ON COLUMN PERSONAS.SNOMBRE IS 'Segundo nombre de la persona. Este campo puede ser nulo o vacio.';
COMMENT ON COLUMN PERSONAS.APELLIDOS IS 'Apellidos Paternos + Maternos';
COMMENT ON COLUMN PERSONAS.SEXO IS 'El sexo solo se define como Masculino y Femenino';
COMMENT ON COLUMN PERSONAS.FECHA_NACIMIENTO IS 'Fecha de nacimiento, este campo debe ser actualizado por una persona autorizada.';
COMMENT ON COLUMN PERSONAS.FECHA_INGRESO IS 'Este campo nadie deberia de modificarlo.';
COMMENT ON COLUMN PERSONAS.FECHA_HORA_ULTIMO_UPDATE IS 'Este campo debe ser actualizado cada vez que el registro se actualice. ';
COMMENT ON COLUMN PERSONAS.ESTADO IS 'Este campo hace referencia a estado en el sistema de la persona, si es true activo o false inactivo.';
COMMENT ON COLUMN PERSONAS.USER_NAME IS 'Ident. del usuario que registro a la persona al sistema.';
COMMENT ON COLUMN PERSONAS.ROL_USUARIO IS 'Conocer el rol que tenia ese usuario cuando registro esta persona.';
CREATE INDEX IDX_PERSONAS1 ON PERSONAS (PNOMBRE);
CREATE INDEX IDX_PERSONAS2 ON PERSONAS (SNOMBRE);
CREATE INDEX IDX_PERSONAS3 ON PERSONAS (APELLIDOS);
CREATE INDEX IDX_PERSONAS4 ON PERSONAS (FECHA_NACIMIENTO);
CREATE INDEX IDX_PERSONAS5 ON PERSONAS (FECHA_INGRESO);
CREATE INDEX IDX_PERSONAS6 ON PERSONAS (PERSONA);
CREATE INDEX IDX_PERSONAS7 ON PERSONAS (SEXO);
COMMENT ON TABLE PERSONAS IS 'Objetivos:
La entidad Persona es una tabla que guardar todos los registros de los clientes, estudiantes, proveedores, padres entre otros, la cual debe almacenar los atributos mas basicos de estos en una sola tabla.

Nota:
	1) Los registros de esta tabla no deben borrarse.

Reglas:

[SELECT]

[INSERT]

[UPDATE]

[DELETE]

';
ALTER TABLE PERSONAS_CLIENTES ADD CONSTRAINT FK_PERSONAS_CLIENTES_1
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE PERSONAS_CLIENTES_ATR ADD CONSTRAINT FK_PERSONAS_CLIENTES_ATR_1
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE PERSONAS_ESTUDIANTES ADD CONSTRAINT FK_PERSONAS_ESTUDIANTES_0
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE PERSONAS_ESTUDIANTES_ATR ADD CONSTRAINT FK_PERSONAS_ESTUDIANTES_ATR_0
  FOREIGN KEY (ID) REFERENCES PERSONAS_ESTUDIANTES (ID) ON DELETE NO ACTION;
ALTER TABLE PERSONAS_PACIENTES ADD CONSTRAINT FK_PERSONAS_PACIENTES_0
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE PERSONAS_PACIENTES_ATR ADD MASA_CEFALICA COMPUTED BY (CAST(PESO_NACIMIENTO_KG/(ALTURA*ALTURA) as D_MEDIDA));
ALTER TABLE PERSONAS_PACIENTES_ATR ADD CONSTRAINT FK_PERSONAS_PACIENTES_ATR_0
  FOREIGN KEY (ID_PACIENTE) REFERENCES PERSONAS_PACIENTES (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE PERSONAS_PADRES ADD CONSTRAINT FK_PERSONAS_PADRES_0
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE PERSONAS_PROVEEDORES ADD CONSTRAINT FK_PERSONAS_PROVEEDORES_0
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE PERSONAS_PROVEEDORES_ATR ADD CONSTRAINT FK_PERSONAS_PROVEEDORES_ATR_0
  FOREIGN KEY (ID) REFERENCES PERSONAS_PROVEEDORES (ID) ON DELETE NO ACTION;
ALTER TABLE PRODUCTOS ADD CONSTRAINT FK_PRODUCTOS_0
  FOREIGN KEY (ID_CATEGORIA) REFERENCES CATEGORIAS (ID);
CREATE UNIQUE INDEX RECCOUNT_IDX1 ON RECCOUNT (TABLA);
ALTER TABLE RECETAS ADD CONSTRAINT FK_RECETAS_1
  FOREIGN KEY (IDCONSULTA) REFERENCES CONSULTAS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE RELACION_PADRE_ESTUDIANTE ADD CONSTRAINT FK_RELACION_PADRE_ESTUDIANTE_0
  FOREIGN KEY (ID_PADRE_O_MADRE) REFERENCES PERSONAS_PADRES (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE RELACION_PADRE_ESTUDIANTE ADD CONSTRAINT FK_RELACION_PADRE_ESTUDIANTE_1
  FOREIGN KEY (ID_ESTUDIANTE) REFERENCES PERSONAS_ESTUDIANTES (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE RELACION_PADRE_PACIENTE ADD CONSTRAINT FK_RELACION_PADRE_PACIENTE_0
  FOREIGN KEY (ID_PADRE_O_MADRE) REFERENCES PERSONAS_PADRES (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE RELACION_PADRE_PACIENTE ADD CONSTRAINT FK_RELACION_PADRE_PACIENTE_1
  FOREIGN KEY (ID_PACIENTE) REFERENCES PERSONAS_PACIENTES (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
ALTER TABLE SINTOMAS ADD CONSTRAINT FK_SINTOMAS_0
  FOREIGN KEY (ID_PACIENTE) REFERENCES PERSONAS_PACIENTES (ID) ON DELETE NO ACTION;
COMMENT ON COLUMN TANDAS.ID IS 'Identificador de la tanda en el sistema.';
COMMENT ON COLUMN TANDAS.ANNO_INICIAL IS 'Es el año que se piensa impartir la docencia al grupo.';
COMMENT ON COLUMN TANDAS.ANNO_FINAL IS 'Es el año que se piensa en termina el curso registrado.';
COMMENT ON COLUMN TANDAS.HORA_INICIO IS 'Hora que empienza la clase.';
COMMENT ON COLUMN TANDAS.HORA_FINAL IS 'Hora que termina la clase.';
COMMENT ON COLUMN TANDAS.CANTIDAD_ESTUDIANTES IS 'Cantidad de estudiantes que soporta la clase. ';
COMMENT ON COLUMN TANDAS.EDAD_MINIMA IS 'La edad minina admitida por el curso.';
COMMENT ON COLUMN TANDAS.EDAD_MAXIMA IS 'La edad maxima admitida por el curso.';
CREATE INDEX IDX_TURNOS1 ON TURNOS (TURNO_USUARIO);
COMMENT ON TABLE TURNOS IS 'Tabla que almacena los turnos de los cajeros en el sistema.

Debe:
   *Debe validarse que el usuario exista en el sistema.
   *';
COMMENT ON VIEW GET_CATEGORIA_ACTIVAS IS 'De la tabla de PRODUCTOS traemos las clases de las CATEGORIAS que estan en uso en la tabla.';
COMMENT ON VIEW GET_ROL IS 'Vista que nos permite obtener los roles de los usuarios.';
COMMENT ON VIEW V_ANALISIS IS 'Es una tabla que almacena las analiticas de cada paciente del sistema. Para indicar una analitica usamos un valor booleano para validar si el paciende debe realizarse dicho analisis. ';
COMMENT ON VIEW V_ARS IS 'Tabla que almacenas las propiedades basicas de los seguros con lo que opera el sistema.

Descripcion seria el nombre de la aseguradora, la converConsulta guardar el valor en porciento de lo que el seguro cubre por consulta.';
COMMENT ON VIEW V_PERSONAS IS 'Tabla para almacenar las personas tanto clientes, provedores, padres Entre otros.';
COMMENT ON VIEW V_TURNOS IS 'Tabla utilizada para guardar los turnos de los cajeros del sistema.';
COMMENT ON EXCEPTION E_CAJERO_TURNO_INACTIVO IS 'Este excepcion es lanzada cuando el cajero no cuenta con un turno activado en la vista V_TURNOS. ';
COMMENT ON EXCEPTION E_CORREO_INACTIVO IS 'Exception lanzada cuando un correo se encuentra inactivo o eliminado de la vista V_CONTACTS_TEL.';
COMMENT ON EXCEPTION E_DIRECCION_INACTIVO IS 'Exception lanzada cuando una direccion de una persona no se encuentra registada en la vista V_DIRECCIONES.';
COMMENT ON EXCEPTION E_TELEFONO_INACTIVO IS 'Exception lanzada cuando el telefono de una persona se encuentra inactivo o ha sido eliminado de la vista de V_CONTACTS_TEL.';
GRANT RRR_CAJERO TO JHIRONSEL WITH ADMIN OPTION;
GRANT RRR_CAJERO TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_DOCTOR TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_GERENTE TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_PADRE TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_RRHH TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_SECRETARIA TO JHIRONSEL WITH ADMIN OPTION;
GRANT RRR_SECRETARIA TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_SOFTSURENA TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_VENDEDOR TO SYSDBA WITH ADMIN OPTION;
GRANT EXECUTE
 ON PROCEDURE ACTUALIZAR_ESTADISTICAS_INDICES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE ACTUALIZAR_ESTADISTICAS_INDICES TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE ACTUALIZAR_TABLA_PIVOT TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE ACTUALIZAR_TABLA_PIVOT TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE ADMIN_HABILITAR_TURNO TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE ADMIN_HABILITAR_TURNO TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE CREAR_TABLA_PIVOT TO ROLE RDB$ADMIN;

GRANT EXECUTE
 ON PROCEDURE CREAR_TABLA_PIVOT TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE PARSER TO ROLE RDB$ADMIN;

GRANT EXECUTE
 ON PROCEDURE PARSER TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE PRO_PERMISOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE PRO_PERMISOS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_ARS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_ARS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_CATEGORIAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_CATEGORIAS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_CLIENTE_CC TO  JHIRONSEL WITH GRANT OPTION;

GRANT EXECUTE, EXECUTE
 ON PROCEDURE SP_DELETE_CLIENTE_SB TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE, EXECUTE
 ON PROCEDURE SP_DELETE_CLIENTE_SB TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_ESTUDIANTE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_ESTUDIANTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_PACIENTE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_PACIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_HALLAR_PALABRAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_HALLAR_PALABRAS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_ARS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_ARS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_CARTON_BINGO TO ROLE RDB$ADMIN;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_CARTON_BINGO TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE, EXECUTE
 ON PROCEDURE SP_INSERT_CATEGORIAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE, EXECUTE
 ON PROCEDURE SP_INSERT_CATEGORIAS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_CLIENTE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_CLIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_CLIENTE_CC TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_CLIENTE_CC TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE, EXECUTE
 ON PROCEDURE SP_INSERT_CLIENTE_SB TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE, EXECUTE
 ON PROCEDURE SP_INSERT_CLIENTE_SB TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_DIRECCIONES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_DIRECCIONES TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_DOCTOR TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_DOCTOR TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_ENTRADA_PRODUCTOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_ENTRADA_PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_ESTUDIANTE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_ESTUDIANTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_FACTURA TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_FACTURA TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PACIENTE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PACIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PADRES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PADRES TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PERSONA TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PERSONA TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PERSONA_CLIENTES_ID TO  JHIRONSEL WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PROVEEDOR TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PROVEEDOR TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_TURNO TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_TURNO TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_USUARIOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_USUARIOS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_RECCOUNT TO  "PUBLIC";

GRANT EXECUTE
 ON PROCEDURE SP_RECCOUNT TO ROLE RDB$ADMIN;

GRANT EXECUTE
 ON PROCEDURE SP_RECCOUNT TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_RECCOUNT_ESTADO TO  "PUBLIC";

GRANT EXECUTE
 ON PROCEDURE SP_RECCOUNT_ESTADO TO ROLE RDB$ADMIN;

GRANT EXECUTE
 ON PROCEDURE SP_RECCOUNT_ESTADO TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_SELECT_USUARIOS_TAGS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_SELECT_USUARIOS_TAGS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_CANTIDAD_FILAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_CANTIDAD_FILAS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE, EXECUTE
 ON PROCEDURE SP_UPDATE_CLIENTE_CC TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE, EXECUTE
 ON PROCEDURE SP_UPDATE_CLIENTE_CC TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE, EXECUTE
 ON PROCEDURE SP_UPDATE_CLIENTE_SB TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE, EXECUTE
 ON PROCEDURE SP_UPDATE_CLIENTE_SB TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_DEUDA_ESTADO TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_DEUDA_ESTADO TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_DIRECCION_CLIENTE TO  JHIRONSEL WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_ESTUDIANTE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_ESTUDIANTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_OR_INSERT_FACTURA TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_OR_INSERT_FACTURA TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_PACIENTE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_PACIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_PADRES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_PADRES TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_PROVEEDORES TO ROLE RDB$ADMIN;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_PROVEEDORES TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_USUARIOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_USUARIOS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_VALIDAR_USUARIO TO ROLE RDB$ADMIN;

GRANT EXECUTE
 ON PROCEDURE SP_VALIDAR_USUARIO TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SYSTEM_ENCRIPTAR TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SYSTEM_ENCRIPTAR TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SYSTEM_SET_LICENCIA TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SYSTEM_SET_LICENCIA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ANALISIS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ANALISIS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ANTECEDENTES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ANTECEDENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ARS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ARS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ASEGURADOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ASEGURADOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CARTONES_BINGO TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CARTONES_BINGO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CATEGORIAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CATEGORIAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CODIGOS_POSTALES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CODIGOS_POSTALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONSULTAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONSULTAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONSULTAS_APROBADAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONSULTAS_APROBADAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTACTOS_DIRECCIONES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTACTOS_DIRECCIONES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTACTOS_EMAIL TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTACTOS_EMAIL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTACTOS_TEL TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTACTOS_TEL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTROL_CONSULTA TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTROL_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON DEUDAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON DEUDAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON DISTRITOS_MUNICIPALES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON DISTRITOS_MUNICIPALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_DEUDAS_PAGAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_DEUDAS_PAGAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_FACTURAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_GUIA_VIGILANCIA_DESARROLLO TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_GUIA_VIGILANCIA_DESARROLLO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_MOTIVO_CONSULTA TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_MOTIVO_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_RECETAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_RECETAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ENTRADA_PRODUCTOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ENTRADA_PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON E_S_SYS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON E_S_SYS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FACTURAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GENERALES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GENERALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GUIA_VIGILANCIA_DESARROLLO TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GUIA_VIGILANCIA_DESARROLLO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON HUELLAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON HUELLAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON INSCRIPCIONES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON INSCRIPCIONES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MENSAJES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MENSAJES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON METRICAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON METRICAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MOTIVO_CONSULTA TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MOTIVO_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MUNICIPIOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MUNICIPIOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_CLIENTES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_CLIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_CLIENTES_ATR TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_CLIENTES_ATR TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_ESTUDIANTES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_ESTUDIANTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_ESTUDIANTES_ATR TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_ESTUDIANTES_ATR TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_PACIENTES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_PACIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_PACIENTES_ATR TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_PACIENTES_ATR TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_PADRES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_PADRES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_PROVEEDORES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_PROVEEDORES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_PROVEEDORES_ATR TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS_PROVEEDORES_ATR TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PLAN_CUENTA_CONTABLE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PRODUCTOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PROVINCIAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PROVINCIAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON RECCOUNT TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON RECCOUNT TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON RECETAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON RECETAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON RELACION_PADRE_ESTUDIANTE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON RELACION_PADRE_ESTUDIANTE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON RELACION_PADRE_PACIENTE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON RELACION_PADRE_PACIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SINTOMAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SINTOMAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TANDAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TANDAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TIPOS_SANGRE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TIPOS_SANGRE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TURNOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TURNOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CAJEROS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CAJEROS_DISPONIBLES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CATEGORIA_ACTIVAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CATEGORIA_ACTIVAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CLIENTES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CLIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CLIENTES_CC TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CLIENTES_SB TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT REFERENCES(ID), SELECT
 ON GET_CLIENTES_SB TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CLIENTES_SB TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_DEUDAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_DEUDAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_DIRECCION_BY_ID TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT REFERENCES(ID,ID_CODIGO_POSTAL,ID_DISTRITO_MUNICIPAL,ID_MUNICIPIO,ID_PROVINCIA,ID_PERSONA), SELECT
 ON GET_DIRECCION_BY_ID TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_DIRECCION_BY_ID TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_D_FACTURAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_D_FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_ESTUDIANTES_SV TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_ESTUDIANTES_SV TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PACIENTES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PACIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PERSONAS_ID TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PERSONAS_ID TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON GET_PRIVILEGIOS TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PRIVILEGIOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PRIVILEGIOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PRODUCTOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON GET_ROL TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_ROL TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_ROL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_ROLES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_ROLES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_TANDAS_DETALLADAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_TANDAS_DETALLADAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_TEMPORALES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_TEMPORALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ANALISIS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT SELECT
 ON V_ANALISIS TO ROLE RRR_DOCTOR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ANALISIS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ANTECEDENTES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT SELECT
 ON V_ANTECEDENTES TO ROLE RRR_DOCTOR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ANTECEDENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ARS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT SELECT
 ON V_ARS TO ROLE RRR_DOCTOR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ARS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ASEGURADOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ASEGURADOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CARTONES_BINGO TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CARTONES_BINGO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CATEGORIAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CATEGORIAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CODIGOS_POSTALES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CODIGOS_POSTALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONSULTAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONSULTAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONSULTAS_APROBADAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONSULTAS_APROBADAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTACTOS_DIRECCIONES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT SELECT
 ON V_CONTACTOS_DIRECCIONES TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTACTOS_DIRECCIONES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTACTOS_EMAIL TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT REFERENCES(ID,ID_PERSONA), SELECT
 ON V_CONTACTOS_EMAIL TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTACTOS_EMAIL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTACTOS_TEL TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTACTOS_TEL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTROL_CONSULTA TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTROL_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_DEUDAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_DEUDAS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_DISTRITOS_MUNICIPALES TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_DISTRITOS_MUNICIPALES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_DISTRITOS_MUNICIPALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_DEUDAS_PAGAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_DEUDAS_PAGAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_FACTURAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_GUIA_VIGILANCIA_DESARROLLO TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT SELECT
 ON V_D_GUIA_VIGILANCIA_DESARROLLO TO ROLE RRR_DOCTOR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_GUIA_VIGILANCIA_DESARROLLO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_MOTIVO_CONSULTA TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_MOTIVO_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_RECETAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_RECETAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ENTRADA_PRODUCTOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ENTRADA_PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_E_S_SYS TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_E_S_SYS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_E_S_SYS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_FACTURAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT INSERT
 ON V_FACTURAS TO ROLE RRR_CAJERO;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_FCH_LC TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_FCH_LC TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_FCH_LC TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_GENERALES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT SELECT
 ON V_GENERALES TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_GENERALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_GUIA_VIGILANCIA_DESARROLLO TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_GUIA_VIGILANCIA_DESARROLLO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_HUELLAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_HUELLAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_INSCRIPCION TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_INSCRIPCION TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_MENSAJES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_MENSAJES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_METRICAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_METRICAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_MOTIVO_CONSULTA TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_MOTIVO_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_MUNICIPIOS TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_MUNICIPIOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_MUNICIPIOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT SELECT
 ON V_PERSONAS TO ROLE RRR_CAJERO;

GRANT SELECT
 ON V_PERSONAS TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_CLIENTES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT SELECT
 ON V_PERSONAS_CLIENTES TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_CLIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_CLIENTES_ATR TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_ESTUDIANTES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_ESTUDIANTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_ESTUDIANTES_ATR TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_ESTUDIANTES_ATR TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_ESTUDIANTES_VER TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_ESTUDIANTES_VER TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_PACIENTES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_PACIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_PACIENTES_ART TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_PACIENTES_ART TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_PADRES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_PADRES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_PROVEEDORES TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS_PROVEEDORES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PRODUCTOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT SELECT
 ON V_PRODUCTOS TO ROLE RRR_CAJERO;

GRANT SELECT
 ON V_PRODUCTOS TO ROLE RRR_VENDEDOR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_PROVINCIAS TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PROVINCIAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PROVINCIAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_RECCOUNT TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_RECCOUNT TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_RECETAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_RECETAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_SINTOMAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_SINTOMAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TANDAS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TANDAS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_TIME_LIC TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TIME_LIC TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TIME_LIC TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_TIPOS_SANGRE TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TIPOS_SANGRE TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TIPOS_SANGRE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TRANSACCION_ACTUAL TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TRANSACCION_ACTUAL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TURNOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TURNOS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_USUARIOS TO  "PUBLIC" WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_USUARIOS TO ROLE RDB$ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_USUARIOS TO  SYSDBA WITH GRANT OPTION;

