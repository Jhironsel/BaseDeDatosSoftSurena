/********************* ROLES **********************/

CREATE ROLE RRR_CAJERO;
CREATE ROLE RRR_DOCTOR;
CREATE ROLE RRR_GERENTE;
CREATE ROLE RRR_PADRE;
CREATE ROLE RRR_RRHH;
CREATE ROLE RRR_SECRETARIA;
CREATE ROLE RRR_SOFTSURENA;
CREATE ROLE RRR_VENDEDOR;
/********************* UDFS ***********************/

/********************* FUNCTIONS ***********************/

SET TERM ^ ;
CREATE FUNCTION F_INSERT_CLIENTE_SB (
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
RETURNS D_ID

BEGIN SUSPEND; END^
SET TERM ; ^

/****************** SEQUENCES ********************/

CREATE SEQUENCE G_ID_DIRECCIONES START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE G_ID_PERSONA START WITH 1 INCREMENT BY 1;
/******************** DOMAINS *********************/

CREATE DOMAIN D_APELLIDOS
 AS VARCHAR(40)
 CHECK (value similar to '[[:ALPHA:]-'' .ÑñÁáÉéÍíÓóÚú]*' escape '@')
 COLLATE UTF8;
CREATE DOMAIN D_BLOB_BINARIO
 AS BLOB SUB_TYPE 0
;
CREATE DOMAIN D_BLOB_TEXTO
 AS BLOB SUB_TYPE 1
 COLLATE UTF8;
CREATE DOMAIN D_BOOLEAN_F
 AS BOOLEAN
 DEFAULT FALSE
 NOT NULL
;
CREATE DOMAIN D_BOOLEAN_T
 AS BOOLEAN
 DEFAULT TRUE
;
CREATE DOMAIN D_CEDULA
 AS CHAR(13)
 CHECK (value similar to '[[:DIGIT:]]{3}[-][[:DIGIT:]]{7}[-][[:DIGIT:]]{1}')
 COLLATE UTF8;
CREATE DOMAIN D_CLAVE
 AS VARCHAR(30)
 COLLATE UTF8;
CREATE DOMAIN D_CODIGO
 AS VARCHAR(20)
 COLLATE UTF8;
CREATE DOMAIN D_CODIGO_PAI
 AS CHAR(7)
 COLLATE UTF8;
CREATE DOMAIN D_CORREO
 AS VARCHAR(100)
 CHECK (trim(VALUE) SIMILAR TO '[[:ALNUM:]-_.]*@[[:ALNUM:]-_]*.[[:ALPHA:].]*' and 
     ascii_val(SUBSTRING(VALUE FROM 1 FOR 1)) > 65 and ascii_val(SUBSTRING(VALUE FROM 1 FOR 1)) < 90 or 
     ascii_val(SUBSTRING(VALUE FROM 1 FOR 1)) > 97 and ascii_val(SUBSTRING(VALUE FROM 1 FOR 1)) < 122)
 COLLATE UTF8;
CREATE DOMAIN D_DEDO
 AS CHAR(2)
 DEFAULT 'IN'
 NOT NULL
 CHECK (value in('PU', 'IN', 'MA', 'AN', 'ME'))
 COLLATE UTF8;
CREATE DOMAIN D_DESCUENTO
 AS NUMERIC(5,2)
 DEFAULT 0.00
 CHECK(VALUE >= 0 AND VALUE <= 100)
;
CREATE DOMAIN D_DIA
 AS CHAR(2)
 DEFAULT 'LU'
 CHECK (value in('LU', 'MA', 'MI', 'JU', 'VI', 'SA', 'DO'))
 COLLATE UTF8;
CREATE DOMAIN D_DINERO
 AS NUMERIC(18,2)
 DEFAULT 0.00
;
CREATE DOMAIN D_EDAD
 AS SMALLINT
 DEFAULT 0
 NOT NULL
 CHECK (VALUE >= 0)
;
CREATE DOMAIN D_ESTADO_CIVIL
 AS CHAR(1)
 DEFAULT 'S'
 CHECK (VALUE IN ('S', 'C', 'D', 'V', 'U', 'X'))
 COLLATE UTF8;
CREATE DOMAIN D_ESTADO_C_I_P_A_N_T
 AS CHAR(1)
 DEFAULT 'i'
 CHECK (LOWER(VALUE) IN('c','i', 'p', 'a', 'n', 't'))
 COLLATE UTF8;
CREATE DOMAIN D_ESTADO_MENSAJES
 AS CHAR(1)
 DEFAULT 'N'
 NOT NULL
 CHECK (VALUE IN('N', 'L', 'R', 'B'))
 COLLATE UTF8;
CREATE DOMAIN D_FECHA
 AS DATE
 DEFAULT CURRENT_DATE
;
CREATE DOMAIN D_FECHA_HORA
 AS TIMESTAMP
 DEFAULT CURRENT_TIMESTAMP
;
CREATE DOMAIN D_HORA
 AS TIME
 DEFAULT CURRENT_TIME
;
CREATE DOMAIN D_ID
 AS INTEGER
 DEFAULT NULL
 CHECK (VALUE >= -1)
;
CREATE DOMAIN D_IDUSUARIO
 AS VARCHAR(31)
 DEFAULT current_user
 NOT NULL
 COLLATE UTF8;
CREATE DOMAIN D_INSERT_DELETE
 AS CHAR(1)
 DEFAULT 'I'
 NOT NULL
 CHECK (UPPER(value) in('I', 'D'))
 COLLATE UTF8;
CREATE DOMAIN D_MEDIDA
 AS NUMERIC(18,2)
 DEFAULT 0.00
;
CREATE DOMAIN D_NOMBRES
 AS VARCHAR(40)
 CHECK (value similar to '[[:ALPHA:]-'' .ÑñÁáÉéÍíÓóÚú]*' escape '@')
 COLLATE UTF8;
CREATE DOMAIN D_PERSONA
 AS CHAR(1)
 DEFAULT 'F'
 CHECK (VALUE in ('F', 'J', 'X'))
 COLLATE UTF8;
CREATE DOMAIN D_PUNTO_CARDINALES
 AS VARCHAR(5)
 DEFAULT 'N/A'
 CHECK (VALUE IN('Norte', 'Este', 'Sur', 'Oeste', 'N/A'))
 COLLATE UTF8;
CREATE DOMAIN D_ROL
 AS CHAR(31)
 DEFAULT CURRENT_ROLE
 NOT NULL
 COLLATE UTF8;
CREATE DOMAIN D_SANGRE_SIMBOLOS
 AS VARCHAR(3)
 DEFAULT 'N/A'
 CHECK (VALUE in('N/A','O-','O+', 'A-', 'A+', 'B-', 'B+', 'AB-', 'AB+'))
 COLLATE UTF8;
CREATE DOMAIN D_SEXO
 AS CHAR(1)
 DEFAULT 'M'
 CHECK (UPPER(value) = 'M' or UPPER(value) = 'F' or UPPER(value) = 'X')
 COLLATE UTF8;
CREATE DOMAIN D_TELEFONO
 AS CHAR(16)
 CHECK (value similar to '[+][1][(][[:digit:]]{3}[)][ ][[:digit:]]{3}[-][[:digit:]]{4}')
 COLLATE UTF8;
CREATE DOMAIN D_TURNO
 AS SMALLINT
 DEFAULT 0
 CHECK (value >= 1)
;
CREATE DOMAIN D_VARCHAR_15
 AS VARCHAR(15)
 COLLATE UTF8;
CREATE DOMAIN D_VARCHAR_25
 AS VARCHAR(25)
 COLLATE UTF8;
CREATE DOMAIN D_VARCHAR_255
 AS VARCHAR(255)
 COLLATE UTF8;
CREATE DOMAIN D_VARCHAR_45
 AS VARCHAR(45)
 COLLATE UTF8;
CREATE DOMAIN D_VARCHAR_70
 AS VARCHAR(70)
 COLLATE UTF8;
/******************* PROCEDURES ******************/

SET TERM ^ ;
CREATE PROCEDURE ADMIN_HABILITAR_TURNO (
    IDUSUARIO D_IDUSUARIO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE PRO_PERMISOS (
    CONSULTAR D_BOOLEAN_F,
    INSERTAR D_BOOLEAN_F,
    ACTUALIZAR D_BOOLEAN_F,
    BORRAR D_BOOLEAN_F,
    REFERENCIA D_BOOLEAN_F,
    VISTA D_VARCHAR_45,
    LOGINUSER D_IDUSUARIO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_ARS (
    V_ID D_ID,
    ESTADO D_BOOLEAN_T )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_CATEGORIAS (
    V_ID D_ID,
    ESTADO D_BOOLEAN_T )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_CLIENTE_SB (
    V_ID D_ID,
    I_ESTADO D_BOOLEAN_T )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_ESTUDIANTE (
    V_ID D_ID,
    I_ESTADO D_BOOLEAN_T )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_PACIENTE (
    V_ID D_ID,
    I_ESTADO D_BOOLEAN_T )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_HALLAR_PALABRAS (
    FTCTEXTO D_BLOB_TEXTO )
RETURNS (
    FTCPALABRA D_VARCHAR_45 )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_ARS (
    DESCRIPCION D_VARCHAR_45,
    COVER_CONSULTA_POR_C D_DESCUENTO,
    ESTADO D_BOOLEAN_T )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_CATEGORIAS (
    DESCRIPCION D_VARCHAR_25,
    IMAGEN_TEXTO D_BLOB_TEXTO,
    ESTADO D_BOOLEAN_T )
RETURNS (
    V_ID D_ID )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_CLIENTE (
    I_ID D_ID,
    I_ESTADO D_BOOLEAN_T )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_CLIENTE_SB (
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
RETURNS (
    V_ID D_ID )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_DIRECCIONES (
    I_ID_PERSONA D_ID,
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_ID_CODIGO_POSTAL D_ID,
    I_DIRECCION D_VARCHAR_255 )
RETURNS (
    O_ID D_ID )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_DOCTOR (
    I_IDUSUARIO D_IDUSUARIO,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ROL D_ROL,
    I_COD_EXEQUATUR D_VARCHAR_70,
    I_ESPECIALIDAD D_VARCHAR_70,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F )
RETURNS (
    O_SQL D_BLOB_TEXTO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_ENTRADA_PRODUCTOS (
    ID_PROVEEDOR D_ID,
    COD_FACTURA D_CODIGO,
    LINEA D_ID,
    ID_PRODUCTO D_ID,
    ENTRADA D_DINERO,
    FECHA_VECIMIENTO D_FECHA )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_ESTUDIANTE (
    I_ID_ARS D_ID,
    I_NO_NSS D_VARCHAR_25,
    I_ID_TIPO_SANGRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_MATRICULA D_VARCHAR_15,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_GENERALES (
    I_ID_PERSONA D_ID,
    I_CEDULA D_CEDULA,
    I_ID_TIPO_SANGRE D_ID,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_PACIENTE (
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_ID_ARS D_ID,
    I_NO_NSS D_VARCHAR_25,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ID_TIPO_SANGRE D_ID,
    I_ESTADO D_BOOLEAN_T )
RETURNS (
    V_ID D_ID )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_PADRES (
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_ID_CODIGOPOSTAL D_ID,
    I_ID_TIPO_SANGRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_DIRECCION D_VARCHAR_70,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
RETURNS (
    O_ID D_ID )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_PERSONA (
    I_PERSONA D_PERSONA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T )
RETURNS (
    V_ID D_ID )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_PROVEEDOR (
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_DIRECCION D_VARCHAR_255,
    I_ESTADO D_BOOLEAN_T,
    I_CODIGO_PROVEEDOR D_CODIGO )
RETURNS (
    V_ID D_ID )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_INSERT_USUARIOS (
    I_IDUSUARIO D_IDUSUARIO,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F,
    I_DESCRIPCION D_BLOB_TEXTO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_RECCOUNT (
    TCOPERAC TYPE OF D_INSERT_DELETE,
    TCTABLAX TYPE OF D_VARCHAR_45 )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_RECCOUNT_ESTADO (
    TCOPERAC TYPE OF D_INSERT_DELETE,
    TCTABLAX TYPE OF D_VARCHAR_45,
    ESTADO TYPE OF D_BOOLEAN_F )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_SELECT_USUARIOS_TAGS (
    I_USER_NAME D_IDUSUARIO NOT NULL DEFAULT 'all' )
RETURNS (
    O_USER_NAME D_IDUSUARIO,
    O_PRIMER_NOMBRE D_NOMBRES,
    O_SEGUNDO_NOMBRE D_NOMBRES,
    O_APELLIDOS D_APELLIDOS,
    O_ESTADO_ACTIVO D_BOOLEAN_T,
    O_ADMINISTRADOR D_BOOLEAN_T,
    O_TAG_NOMBRE D_VARCHAR_255,
    O_TAG_VALOR D_VARCHAR_255 )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_CANTIDAD_FILAS (
    TNCODSUC D_ID )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_CLIENTE_SB (
    I_ID D_ID,
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_DEUDA_ESTADO (
    E_ID_DEUDA D_ID NOT NULL,
    E_OBJ D_ESTADO_C_I_P_A_N_T NOT NULL )
RETURNS (
    S_SALIDA D_VARCHAR_15 )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_ESTUDIANTE (
    I_ID D_ID,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_PACIENTE (
    I_ID_PACIENTE D_ID,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ID_TIPO_SANGRE D_ID,
    I_ID_ARS D_ID,
    I_NONSS D_VARCHAR_25,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_ARS D_BOOLEAN_T )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_PADRES (
    I_ID D_ID,
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_ID_CODIGOPOSTAL D_ID,
    I_ID_TIPO_SANGRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_DIRECCION D_VARCHAR_70,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_UPDATE_USUARIOS (
    I_IDUSUARIO D_IDUSUARIO,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F,
    I_DESCRIPCION D_BLOB_TEXTO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SYSTEM_ENCRIPTAR (
    TCTEXTO D_BLOB_TEXTO,
    TCACCION CHAR(1),
    TCNUMEROENCRIPTACION D_VARCHAR_255,
    TCNUMEROREPETICION D_VARCHAR_255 )
RETURNS (
    FTCNUEVOTEXTO D_BLOB_TEXTO )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SYSTEM_SET_LICENCIA (
    E_FCHV CHAR(10),
    E_IDMAC VARCHAR(80),
    CLAVE1 CHAR(7),
    CLAVE2 CHAR(7) )

AS 
BEGIN SUSPEND; 
END^
SET TERM ; ^

/******************* PACKAGES ******************/

/******************** TABLES **********************/

CREATE TABLE ANALISIS
(
  ID D_ID NOT NULL,
  ID_PACIENTE D_ID DEFAULT 0 NOT NULL,
  FECHA_HORA_CREADA D_FECHA_HORA NOT NULL,
  FECHA_HORA_VISTA D_FECHA_HORA NOT NULL,
  T_BHCG D_BOOLEAN_F,
  T_EMB_ORINA D_BOOLEAN_F,
  T_EMB_SANGRE D_BOOLEAN_F,
  T_ANT_AUSTRALIANO_BBSAG D_BOOLEAN_F,
  T_CLAMIDIA_IGA D_BOOLEAN_F,
  T_FTA_ABS D_BOOLEAN_F,
  T_HIV D_BOOLEAN_F,
  T_VDRL D_BOOLEAN_F,
  T_ACIDO_URICO D_BOOLEAN_F,
  T_ANT_FEBRILES D_BOOLEAN_F,
  T_ASO_LATEX D_BOOLEAN_F,
  T_BILIRRUBINA D_BOOLEAN_F,
  T_COLESTEROL_TOTAL D_BOOLEAN_F,
  T_COLESTEROL_HDL D_BOOLEAN_F,
  T_COLESTEROL_HDL_LDL D_BOOLEAN_F,
  T_COPROLOGICO D_BOOLEAN_F,
  T_CREATININA_SUERO D_BOOLEAN_F,
  T_CULTIVO_FARINGE D_BOOLEAN_F,
  T_CULTIVO_HECES D_BOOLEAN_F,
  T_CULTIVO_HERIDA_AEROBICO D_BOOLEAN_F,
  T_CULTIVO_OIDO D_BOOLEAN_F,
  T_CULTIVO_SANGRE D_BOOLEAN_F,
  T_CULTIVO_SEMEN D_BOOLEAN_F,
  T_CULTIVO_URETRA D_BOOLEAN_F,
  T_CULTIVO_VAGINA D_BOOLEAN_F,
  T_ELECTRO_HEMOGLOBINA D_BOOLEAN_F,
  T_ERITROSEDIMENTACION D_BOOLEAN_F,
  T_ESPERMATOGRAMA D_BOOLEAN_F,
  T_ESTRADIOL D_BOOLEAN_F,
  T_ESTROGENO_TOTALES D_BOOLEAN_F,
  T_FACTOR_REUMATOIDE D_BOOLEAN_F,
  T_FALCEMIA D_BOOLEAN_F,
  T_FOSFATASA_ALCALINA D_BOOLEAN_F,
  T_FSH D_BOOLEAN_F,
  T_GLICEMIA D_BOOLEAN_F,
  T_HEMOGLO_GLUCOSILADA D_BOOLEAN_F,
  T_HEMOGRAMA D_BOOLEAN_F,
  T_HEPATITIS_A D_BOOLEAN_F,
  T_HEPATITIS_C D_BOOLEAN_F,
  T_KOH D_BOOLEAN_F,
  T_LH D_BOOLEAN_F,
  T_ORINA D_BOOLEAN_F,
  T_PCR D_BOOLEAN_F,
  T_PROGESTERONA D_BOOLEAN_F,
  T_PROLACTINA D_BOOLEAN_F,
  T_PROTEINAS_TOTALES D_BOOLEAN_F,
  T_PSA_TOTAL D_BOOLEAN_F,
  T_PSA_LIBRE D_BOOLEAN_F,
  T_SANG_OCULT_HECES D_BOOLEAN_F,
  T_SGOT_TGO D_BOOLEAN_F,
  T_SGOT_TGP D_BOOLEAN_F,
  T_T3 D_BOOLEAN_F,
  T_T4 D_BOOLEAN_F,
  T_T4_LIBRE D_BOOLEAN_F,
  T_COOMBS_DIRECTO D_BOOLEAN_F,
  T_COOMBS_INDIRECTO D_BOOLEAN_F,
  T_TESTOSTERONA D_BOOLEAN_F,
  T_TIPIFICACION_SANGUINEA D_BOOLEAN_F,
  T_TOXOPLAS_IGG D_BOOLEAN_F,
  T_TOXOPLAS_IGM D_BOOLEAN_F,
  T_TRIGLICERIDOS D_BOOLEAN_F,
  T_TSH D_BOOLEAN_F,
  T_TUBERCULINA D_BOOLEAN_F,
  T_UREA D_BOOLEAN_F,
  OTROS D_VARCHAR_255,
  ROL D_ROL,
  IDUSUARIO D_IDUSUARIO,
  CONSTRAINT INTEG_1 PRIMARY KEY (ID)
);
CREATE TABLE ANTECEDENTES
(
  ID D_ID NOT NULL,
  ID_PACIENTE D_ID NOT NULL,
  ID_DOCTOR D_ID DEFAULT 0 NOT NULL,
  FECHA D_FECHA NOT NULL,
  DESCRIPCION D_VARCHAR_255 NOT NULL,
  USUARIO D_IDUSUARIO,
  ROL D_ROL,
  CONSTRAINT INTEG_5 PRIMARY KEY (ID)
);
CREATE TABLE ARS
(
  ID D_ID NOT NULL,
  DESCRIPCION D_VARCHAR_45 NOT NULL,
  COVERCONSULTAPORC D_DESCUENTO NOT NULL,
  ESTADO D_BOOLEAN_T NOT NULL,
  ROL D_ROL NOT NULL,
  IDUSUARIO D_IDUSUARIO,
  CONSTRAINT INTEG_10 PRIMARY KEY (ID),
  CONSTRAINT INTEG_2405 UNIQUE (DESCRIPCION)
);
CREATE TABLE ASEGURADOS
(
  ID_PERSONA D_ID NOT NULL,
  ID_ARS D_ID,
  NO_NSS D_VARCHAR_25,
  ESTADO D_BOOLEAN_T NOT NULL,
  CONSTRAINT PK_ASEGURADOS_0 PRIMARY KEY (ID_PERSONA),
  CONSTRAINT UNQ_ASEGURADOS_0 UNIQUE (NO_NSS)
);
CREATE TABLE CATEGORIAS
(
  ID D_ID NOT NULL,
  DESCRIPCION D_VARCHAR_25 NOT NULL,
  IMAGEN_TEXTO D_BLOB_TEXTO,
  FECHA_CREACION D_FECHA NOT NULL,
  ESTADO D_BOOLEAN_T NOT NULL,
  IDUSUARIO D_IDUSUARIO,
  CONSTRAINT INTEG_16 PRIMARY KEY (ID),
  CONSTRAINT UNQ_CATEGORIAS_0 UNIQUE (DESCRIPCION)
);
CREATE TABLE CLIENTES
(
  ID D_ID NOT NULL,
  CONSTRAINT PK_CLIENTES_0 PRIMARY KEY (ID)
);
CREATE TABLE CODIGOS_POSTALES
(
  ID D_ID NOT NULL,
  IDPROVINCIA D_ID,
  LOCALIDAD D_VARCHAR_45,
  CODIGO_POSTAL D_ID,
  CONSTRAINT INTEG_21 PRIMARY KEY (ID)
);
CREATE TABLE CONSULTAS
(
  ID D_ID NOT NULL,
  ID_PACIENTE D_ID,
  ID_CONTROL_CONSULTA D_ID,
  FECHA D_FECHA,
  TURNO D_TURNO,
  ESTADO D_BOOLEAN_T,
  IDUSUARIO D_IDUSUARIO,
  CONSTRAINT INTEG_22 PRIMARY KEY (ID)
);
CREATE TABLE CONSULTAS_APROBADAS
(
  ID D_ID NOT NULL,
  COD_AUTORIZACION D_VARCHAR_15 NOT NULL,
  COSTO D_DINERO NOT NULL,
  DESCUENTO D_DESCUENTO NOT NULL,
  IDUSUARIO D_IDUSUARIO,
  CONSTRAINT INTEG_24 PRIMARY KEY (ID),
  CONSTRAINT INTEG_2417 UNIQUE (COD_AUTORIZACION)
);
CREATE TABLE CONTACTOS_EMAIL
(
  ID D_ID NOT NULL,
  ID_PERSONA D_ID NOT NULL,
  EMAIL D_CORREO NOT NULL,
  FECHA D_FECHA NOT NULL,
  CONSTRAINT INTEG_28 PRIMARY KEY (ID),
  CONSTRAINT UNQ_CONTACTOS_EMAIL_0 UNIQUE (ID_PERSONA,EMAIL),
  CONSTRAINT UNQ_CONTACTOS_EMAIL_1 UNIQUE (EMAIL)
);
CREATE TABLE CONTACTOS_TEL
(
  ID D_ID NOT NULL,
  ID_PERSONA D_ID NOT NULL,
  TELEFONO D_TELEFONO NOT NULL,
  TIPO D_VARCHAR_15 NOT NULL,
  FECHA D_FECHA NOT NULL,
  CONSTRAINT INTEG_32 PRIMARY KEY (ID)
);
CREATE TABLE CONTROL_CONSULTA
(
  ID D_ID NOT NULL,
  USER_NAME D_IDUSUARIO,
  CANTIDADPACIENTE D_TURNO,
  DIA D_DIA,
  INICIAL D_HORA,
  FINAL D_HORA,
  IDUSUARIO D_IDUSUARIO,
  ESTADO D_BOOLEAN_T,
  CONSTRAINT INTEG_37 PRIMARY KEY (ID)
);
CREATE TABLE DATOS_NACIMIENTO
(
  ID D_ID NOT NULL,
  PESONACIMIENTOKG D_MEDIDA,
  ALTURA D_MEDIDA,
  PERIMETRO_CEFALICO D_MEDIDA,
  CESAREA D_BOOLEAN_T,
  TIEMPOGESTACION D_MEDIDA,
  IDUSUARIO D_IDUSUARIO,
  CONSTRAINT INTEG_2423 PRIMARY KEY (ID)
);
CREATE TABLE DEUDAS
(
  ID D_ID NOT NULL,
  ID_CLIENTE D_ID NOT NULL,
  ID_FACTURA D_ID NOT NULL,
  CONCEPTO D_VARCHAR_255 NOT NULL,
  MONTO D_DINERO DEFAULT 0.00 NOT NULL,
  FECHA D_FECHA NOT NULL,
  HORA D_HORA NOT NULL,
  ESTADO D_ESTADO_C_I_P_A_N_T NOT NULL,
  CONSTRAINT INTEG_188 PRIMARY KEY (ID)
);
CREATE TABLE DIRECCIONES
(
  ID D_ID NOT NULL,
  ID_PERSONA D_ID NOT NULL,
  ID_PROVINCIA D_ID DEFAULT 0 NOT NULL,
  ID_MUNICIPIO D_ID DEFAULT 0 NOT NULL,
  ID_DISTRITO_MUNICIPAL D_ID DEFAULT 0 NOT NULL,
  ID_CODIGO_POSTAL D_ID DEFAULT 0 NOT NULL,
  DIRECCION D_VARCHAR_255 DEFAULT 'Sin direccion ingresada',
  FECHA D_FECHA NOT NULL,
  CONSTRAINT INTEG_52 PRIMARY KEY (ID)
);
CREATE TABLE DISTRITOS_MUNICIPALES
(
  ID D_ID NOT NULL,
  NOMBRE D_VARCHAR_45,
  IDMUNICIPIO D_ID,
  CONSTRAINT INTEG_59 PRIMARY KEY (ID)
);
CREATE TABLE D_DEUDAS_PAGAS
(
  ID D_ID NOT NULL,
  ID_DEUDAS D_ID NOT NULL,
  MONTO_PAGO D_DINERO NOT NULL,
  FECHA_HORA D_FECHA_HORA DEFAULT CURRENT_TIMESTAMP NOT NULL,
  CONSTRAINT INTEG_60 PRIMARY KEY (ID)
);
CREATE TABLE D_FACTURAS
(
  ID_FACTURA D_ID NOT NULL,
  ID_LINEA D_ID NOT NULL,
  ID_PRODUCTO D_ID NOT NULL,
  PRECIO D_DINERO NOT NULL,
  CANTIDAD D_DINERO NOT NULL,
  CONSTRAINT PK_D_FACTURAS_01 PRIMARY KEY (ID_FACTURA,ID_LINEA)
);
CREATE TABLE D_GUIA_VIGILANCIA_DESARROLLO
(
  ID_GVD D_ID NOT NULL,
  ID_PACIENTE D_ID NOT NULL,
  FECHA D_FECHA_HORA,
  CONSTRAINT INTEG_96 PRIMARY KEY (ID_GVD,ID_PACIENTE)
);
CREATE TABLE D_MOTIVO_CONSULTA
(
  IDCONSULTA D_ID NOT NULL,
  IDMCONSULTA D_ID NOT NULL,
  CONSTRAINT PK_D_MOTIVO_CONSULTA_0 PRIMARY KEY (IDCONSULTA,IDMCONSULTA)
);
CREATE TABLE D_RECETAS
(
  ID_RECETA D_ID NOT NULL,
  LINEA D_TURNO NOT NULL,
  ID_MEDICAMENTO D_ID NOT NULL,
  CANTIDAD D_MEDIDA,
  D_DOSIS D_VARCHAR_255,
  CONSTRAINT CON_DETALLERECETAS PRIMARY KEY (ID_RECETA,LINEA)
);
CREATE TABLE ENTRADA_PRODUCTOS
(
  ID D_ID NOT NULL,
  IDPROVEDOR D_ID NOT NULL,
  COD_FACTURA D_CODIGO NOT NULL,
  LINEA D_ID NOT NULL,
  IDPRODUCTO D_ID NOT NULL,
  ENTRADA D_DINERO NOT NULL,
  FECHAVECIMIENTO D_FECHA,
  ESTADO D_BOOLEAN_T NOT NULL,
  USUARIO D_IDUSUARIO NOT NULL,
  ROL D_ROL,
  CONSTRAINT INTEG_72 PRIMARY KEY (ID),
  CONSTRAINT UNQ_ENTRADA_PRODUCTOS_0 UNIQUE (IDPROVEDOR,COD_FACTURA,IDPRODUCTO)
);
CREATE TABLE ESTUDIANTE
(
  ID D_ID NOT NULL,
  MATRICULA D_VARCHAR_15 NOT NULL,
  CONSTRAINT INTEG_1059 PRIMARY KEY (ID),
  CONSTRAINT UNQ_MATRICULA UNIQUE (MATRICULA)
);
CREATE TABLE E_S_SYS
(
  ID_E_S_SYS D_ID NOT NULL,
  NOMBRE D_NOMBRES,
  TELEFONOS D_VARCHAR_255,
  FCHI D_VARCHAR_25 NOT NULL,
  FCHA D_VARCHAR_25 NOT NULL,
  FCHV D_VARCHAR_25 NOT NULL,
  IDMAC D_VARCHAR_70 NOT NULL,
  DIRECCION D_VARCHAR_255,
  MENSAJE_FOOTER D_VARCHAR_255,
  LOGO D_BLOB_TEXTO,
  CONSTRAINT INTEG_86 PRIMARY KEY (ID_E_S_SYS)
);
CREATE TABLE FACTURAS
(
  ID D_ID NOT NULL,
  ID_CLIENTE D_ID NOT NULL,
  IDTURNO D_ID NOT NULL,
  EFECTIVO D_DINERO NOT NULL,
  CAMBIO D_DINERO NOT NULL,
  FECHA D_FECHA NOT NULL,
  HORA D_HORA NOT NULL,
  ESTADO_FACTURA D_ESTADO_C_I_P_A_N_T,
  IDUSUARIO D_IDUSUARIO NOT NULL,
  NOMBRE_TEMP D_NOMBRES NOT NULL,
  CONSTRAINT INTEG_91 PRIMARY KEY (ID)
);
CREATE TABLE GENERALES
(
  ID_PERSONA D_ID NOT NULL,
  CEDULA D_CEDULA NOT NULL,
  ID_TIPO_SANGRE D_ID,
  ESTADO_CIVIL D_ESTADO_CIVIL,
  CONSTRAINT PK_GENERALES_0 PRIMARY KEY (ID_PERSONA),
  CONSTRAINT UNQ_GENERALES_0 UNIQUE (CEDULA)
);
CREATE TABLE GUIA_VIGILANCIA_DESARROLLO
(
  ID D_ID NOT NULL,
  EDAD D_EDAD,
  CARACT_DESARR_EVALUAR D_VARCHAR_255,
  CONSTRAINT INTEG_103 PRIMARY KEY (ID)
);
CREATE TABLE HISTORIAL_CAMBIOS_PERSONA
(
  ID D_ID NOT NULL,
  ID_PERSONA D_ID NOT NULL,
  FECHA_HORA_ULTIMO_UPDATE D_FECHA_HORA NOT NULL,
  CONSTRAINT INTEG_104 PRIMARY KEY (ID)
);
CREATE TABLE HUELLAS
(
  ID D_ID NOT NULL,
  TIPO_DEDO D_DEDO NOT NULL,
  IMAGEN_TEXTO D_BLOB_TEXTO,
  CONSTRAINT INTEG_107 PRIMARY KEY (ID)
);
CREATE TABLE INSCRIPCIONES
(
  ID D_ID NOT NULL,
  ID_ESTUDIANTE D_ID NOT NULL,
  ID_TANDA D_ID NOT NULL,
  PAGO D_DINERO NOT NULL,
  FECHA_INSCRIPCION D_FECHA_HORA NOT NULL,
  ID_USUARIO D_IDUSUARIO NOT NULL,
  ROL D_ROL NOT NULL,
  CONSTRAINT INTEG_173 PRIMARY KEY (ID)
);
CREATE TABLE MENSAJES
(
  ID D_ID NOT NULL,
  ID_DOCTOR D_ID NOT NULL,
  ID_PACIENTE D_ID DEFAULT 0 NOT NULL,
  HORA D_HORA NOT NULL,
  FECHA D_FECHA NOT NULL,
  MENSAJE D_BLOB_TEXTO NOT NULL,
  ESTADO D_ESTADO_MENSAJES NOT NULL,
  CONSTRAINT INTEG_117 PRIMARY KEY (ID)
);
CREATE TABLE METRICAS
(
  ID D_ID NOT NULL,
  IDCONSULTA D_ID,
  FECHA D_FECHA_HORA,
  PESOKG D_MEDIDA,
  ESTATURAMETRO D_MEDIDA,
  ESCEFALO D_MEDIDA,
  ENF_DETECT D_VARCHAR_255,
  HALLAZGOS_POS D_VARCHAR_255,
  ID_DIAG D_VARCHAR_255,
  TX D_VARCHAR_255,
  COMPLEMENTO D_VARCHAR_255,
  IMAGEN_TEXTO D_BLOB_TEXTO,
  IDUSUARIO D_IDUSUARIO,
  CONSTRAINT INTEG_124 PRIMARY KEY (ID)
);
CREATE TABLE MOTIVO_CONSULTA
(
  ID D_ID NOT NULL,
  DESCRIPCION D_VARCHAR_45 NOT NULL,
  CONSTRAINT INTEG_125 PRIMARY KEY (ID),
  CONSTRAINT INTEG_2565 UNIQUE (DESCRIPCION)
);
CREATE TABLE MUNICIPIOS
(
  ID D_ID NOT NULL,
  NOMBRE D_VARCHAR_45,
  IDPROVINCIA D_ID,
  CONSTRAINT INTEG_127 PRIMARY KEY (ID)
);
CREATE TABLE PACIENTES
(
  ID D_ID NOT NULL,
  CONSTRAINT INTEG_2548 PRIMARY KEY (ID)
);
CREATE TABLE PADRES
(
  ID D_ID NOT NULL,
  ID_HIJO D_ID NOT NULL,
  CONSTRAINT PK_PADRES_0 PRIMARY KEY (ID,ID_HIJO)
);
CREATE TABLE PERSONAS
(
  ID D_ID NOT NULL,
  PERSONA D_PERSONA NOT NULL,
  PNOMBRE D_NOMBRES NOT NULL,
  SNOMBRE D_NOMBRES NOT NULL,
  APELLIDOS D_APELLIDOS NOT NULL,
  SEXO D_SEXO NOT NULL,
  FECHA_NACIMIENTO D_FECHA NOT NULL,
  FECHA_INGRESO D_FECHA_HORA NOT NULL,
  FECHA_HORA_ULTIMO_UPDATE D_FECHA_HORA NOT NULL,
  ESTADO D_BOOLEAN_T NOT NULL,
  IDUSUARIO D_IDUSUARIO,
  ROL_USUARIO D_ROL NOT NULL,
  CONSTRAINT INTEG_132 PRIMARY KEY (ID)
);
CREATE TABLE PRODUCTOS
(
  ID D_ID NOT NULL,
  IDCATEGORIA D_ID NOT NULL,
  CODIGO D_VARCHAR_25 NOT NULL,
  DESCRIPCION D_VARCHAR_70 NOT NULL,
  IMAGEN_TEXTO D_BLOB_TEXTO,
  NOTA D_VARCHAR_255 DEFAULT 'N/A',
  FECHA_CREACION D_FECHA,
  ESTADO D_BOOLEAN_T,
  IDUSUARIO D_IDUSUARIO,
  ROL D_ROL,
  CONSTRAINT INTEG_143 PRIMARY KEY (ID),
  CONSTRAINT INTEG_2475 UNIQUE (CODIGO),
  CONSTRAINT INTEG_2477 UNIQUE (DESCRIPCION)
);
CREATE TABLE PROVEEDORES
(
  ID D_ID NOT NULL,
  CODIGO_PROVEEDOR D_CODIGO NOT NULL,
  CONSTRAINT INTEG_2481 PRIMARY KEY (ID),
  CONSTRAINT INTEG_2482 UNIQUE (CODIGO_PROVEEDOR)
);
CREATE TABLE PROVINCIAS
(
  ID D_ID NOT NULL,
  NOMBRE D_VARCHAR_45 NOT NULL,
  ZONA D_PUNTO_CARDINALES,
  CONSTRAINT INTEG_149 PRIMARY KEY (ID)
);
CREATE TABLE RECCOUNT
(
  ID D_ID NOT NULL,
  TABLA D_VARCHAR_45 NOT NULL,
  CANTIDAD D_ID NOT NULL,
  CONSTRAINT INTEG_151 PRIMARY KEY (ID),
  CONSTRAINT UNQ_RECCOUNT_0 UNIQUE (TABLA)
);
CREATE TABLE RECETAS
(
  ID D_ID NOT NULL,
  IDCONSULTA D_ID NOT NULL,
  FECHA D_FECHA_HORA NOT NULL,
  IDUSUARIO D_IDUSUARIO NOT NULL,
  CONSTRAINT INTEG_154 PRIMARY KEY (ID)
);
CREATE TABLE SINTOMAS
(
  ID D_ID NOT NULL,
  ID_PACIENTE D_ID DEFAULT 0 NOT NULL,
  SINTOMAS D_VARCHAR_255,
  FECHA D_FECHA,
  HORA D_HORA,
  NOTA D_VARCHAR_255,
  IDUSUARIO D_IDUSUARIO,
  CONSTRAINT INTEG_158 PRIMARY KEY (ID)
);
CREATE TABLE TANDAS
(
  ID D_ID NOT NULL,
  ANNO_INICIAL D_FECHA DEFAULT CURRENT_DATE NOT NULL,
  ANNO_FINAL D_FECHA NOT NULL,
  HORA_INICIO D_HORA NOT NULL,
  HORA_FINAL D_HORA NOT NULL,
  LUNES D_BOOLEAN_F,
  MARTES D_BOOLEAN_F,
  MIERCOLES D_BOOLEAN_F,
  JUEVES D_BOOLEAN_F,
  VIERNES D_BOOLEAN_F,
  SABADOS D_BOOLEAN_F,
  DOMINGOS D_BOOLEAN_F,
  CANTIDAD_ESTUDIANTES D_TURNO,
  EDAD_MINIMA D_TURNO,
  EDAD_MAXIMA D_TURNO,
  CON_EDAD D_TURNO,
  ESTADO D_BOOLEAN_T,
  CONSTRAINT INTEG_160 PRIMARY KEY (ID)
);
CREATE TABLE TIPOS_SANGRE
(
  ID D_ID NOT NULL,
  DESCRIPCION D_SANGRE_SIMBOLOS,
  CONSTRAINT INTEG_165 PRIMARY KEY (ID)
);
CREATE TABLE TURNOS
(
  ID D_ID NOT NULL,
  FECHAINICIO D_FECHA NOT NULL,
  HORAINICIO D_HORA NOT NULL,
  FECHAFINAL D_FECHA,
  HORAFINAL D_HORA,
  ESTADO D_BOOLEAN_T,
  IDUSUARIO D_IDUSUARIO,
  ROL D_ROL,
  CONSTRAINT INTEG_166 PRIMARY KEY (ID)
);
/********************* VIEWS **********************/

CREATE VIEW GET_CATEGORIA_ACTIVAS (ID, DESCRIPCION, IMAGEN_TEXTO)
AS select R.ID, R.DESCRIPCION, R.IMAGEN_TEXTO
from V_CATEGORIAS R
join V_PRODUCTOS P on R.ID = P.IDCATEGORIA and P.ESTADO
group by ID, DESCRIPCION, IMAGEN_TEXTO;
CREATE VIEW GET_CLIENTES (ID, ID_PROVINCIA, ID_MUNICIPIO, 
     ID_DISTRITO_MUNICIPAL, ID_CODIGO_POSTAL, ID_TIPO_SANGRE, PERSONA, CEDULA, 
     PNOMBRE, SNOMBRE, APELLIDOS, SEXO, DIRECCION, FECHA_NACIMIENTO, 
     FECHA_INGRESO, FECHA_HORA_ULTIMO_UPDATE, ESTADO, ESTADO_CIVIL, ID_USUARIO, 
     ROL_USUARIO)
AS SELECT r.ID, d.ID_PROVINCIA, d.ID_MUNICIPIO, d.ID_DISTRITO_MUNICIPAL, 
     d.ID_CODIGO_POSTAL, g.ID_TIPO_SANGRE, r.PERSONA, g.CEDULA, r.PNOMBRE, 
     r.SNOMBRE, r.APELLIDOS, r.SEXO, d.DIRECCION, r.FECHA_NACIMIENTO,
     r.FECHA_INGRESO, r.FECHA_HORA_ULTIMO_UPDATE, r.ESTADO, g.ESTADO_CIVIL,
     r.ID_USUARIO, r.ROL_USUARIO
FROM V_CLIENTES c 
INNER JOIN V_PERSONAS r ON r.ID = c.ID
INNER JOIN V_DIRECCIONES d ON d.ID_PERSONA = c.ID
INNER JOIN V_GENERALES g ON g.ID_PERSONA = c.ID;
CREATE VIEW GET_CLIENTES_ESTADO_SB (ID, CEDULA, ESTADO)
AS SELECT r.ID, g.CEDULA,  r.ESTADO
FROM V_CLIENTES c 
INNER JOIN V_PERSONAS r ON r.ID = c.ID
INNER JOIN V_GENERALES g ON g.ID_PERSONA = c.ID;
CREATE VIEW GET_CLIENTES_SB (ID, CEDULA, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, 
     SEXO, FECHA_NACIMIENTO, ESTADO_CIVIL, FECHA_INGRESO, ESTADO)
AS SELECT r.ID, g.CEDULA, r.PERSONA, r.PNOMBRE, r.SNOMBRE, r.APELLIDOS, r.SEXO,  
          r.FECHA_NACIMIENTO, g.ESTADO_CIVIL, r.FECHA_INGRESO, r.ESTADO
FROM V_CLIENTES c 
INNER JOIN V_PERSONAS r ON r.ID = c.ID
INNER JOIN V_GENERALES g ON g.ID_PERSONA = c.ID;
CREATE VIEW GET_DEUDAS (ID, ID_CLIENTE, ID_FACTURA, CONCEPTO, MONTO, FECHA, 
     HORA, ESTADO, P_NOMBRE, S_NOMBRE, APELLIDOS, CEDULA)
AS SELECT r.ID, r.ID_CLIENTE, r.ID_FACTURA, r.CONCEPTO, r.MONTO, r.FECHA, r.HORA,
     r.ESTADO, p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, g.CEDULA
FROM V_DEUDAS r
INNER JOIN V_PERSONAS p ON p.ID = r.ID_CLIENTE
INNER JOIN V_GENERALES g ON g.ID_PERSONA = r.ID_CLIENTE
WHERE r.ESTADO IN('c', 'i', 'a', 't');
CREATE VIEW GET_DIRECCION_BY_ID (ID, ID_PERSONA, ID_PROVINCIA, PROVINCIA, 
     ID_MUNICIPIO, MUNICIPIO, ID_DISTRITO_MUNICIPAL, DISTRITO_MUNICIPAL, 
     ID_CODIGO_POSTAL, CODIGO_POSTAL, DIRECCION, FECHA)
AS SELECT r.ID, r.ID_PERSONA, 
     r.ID_PROVINCIA, p.NOMBRE, 
     r.ID_MUNICIPIO, m.NOMBRE,
     r.ID_DISTRITO_MUNICIPAL, d.NOMBRE, 
     r.ID_CODIGO_POSTAL, c.CODIGO_POSTAL, 
     r.DIRECCION, r.FECHA
FROM V_DIRECCIONES r
LEFT JOIN V_PROVINCIAS p ON p.ID = r.ID_PROVINCIA
LEFT JOIN V_MUNICIPIOS m ON m.ID = r.ID_MUNICIPIO
LEFT JOIN V_DISTRITOS_MUNICIPALES d ON d.ID = r.ID_DISTRITO_MUNICIPAL
LEFT JOIN V_CODIGOS_POSTALES c ON c.ID = r.ID_CODIGO_POSTAL;
CREATE VIEW GET_D_FACTURAS (ID_FACTURA, ID_LINEA, ID_PRODUCTO, DESCRIPCION, 
     PRECIO, CANTIDAD, TOTAL)
AS SELECT r.ID_FACTURA, r.ID_LINEA, r.ID_PRODUCTO, p.DESCRIPCION, r.PRECIO, r.CANTIDAD, (r.PRECIO * r.CANTIDAD) AS TOTAL
FROM V_D_FACTURAS r 
LEFT JOIN V_PRODUCTOS p ON p.ID = r.ID_PRODUCTO;
CREATE VIEW GET_ESTUDIANTES_SV (ID, MATRICULA, ID_PADRE, CEDULA, PNOMBRE, 
     SNOMBRE, APELLIDOS, SEXO, FECHA_NACIMIENTO, ESTADO)
AS SELECT r.ID, e.MATRICULA, pp.ID, g.CEDULA, r.PNOMBRE, r.SNOMBRE, 
     r.APELLIDOS, r.SEXO, r.FECHA_NACIMIENTO, r.ESTADO
FROM V_ESTUDIANTES e 
INNER JOIN V_PERSONAS r ON r.ID = e.ID
INNER JOIN V_GENERALES g ON g.ID_PERSONA = e.ID
INNER JOIN V_PADRES pp ON pp.ID_HIJO = e.ID;
CREATE VIEW GET_PACIENTES (ID, ID_PADRE, ID_ARS, NONSS, ID_TIPO_SANGRE, CEDULA, 
     PNOMBRE, SNOMBRE, APELLIDOS, SEXO, FECHA_NACIMIENTO, FECHA_INGRESO, 
     FECHA_HORA_ULTIMO_UPDATE, ESTADO, ID_USUARIO)
AS SELECT r.ID, pp.ID, a.ID_ARS, a.NO_NSS, g.ID_TIPO_SANGRE, 
     g.CEDULA, p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, p.SEXO, p.FECHA_NACIMIENTO, 
     p.FECHA_INGRESO, p.FECHA_HORA_ULTIMO_UPDATE, p.ESTADO, p.ID_USUARIO
FROM V_PACIENTES r 
INNER JOIN V_PERSONAS p ON p.ID = r.ID
INNER JOIN V_ASEGURADOS a ON a.ID_PERSONA = r.ID
INNER JOIN V_GENERALES g ON g.ID_PERSONA = r.ID
INNER JOIN V_PADRES pp ON pp.ID_HIJO = r.ID;
CREATE VIEW GET_PRIVILEGIOS (USER_NAME, CEDENTE, PRIVILEGIO, OPCION_PERMISO, 
     NOMBRE_RELACION, NOMBRE_CAMPO, TIPO_USUARIO, TIPO_OBJECTO)
AS SELECT r.RDB$USER, r.RDB$GRANTOR, r.RDB$PRIVILEGE, r.RDB$GRANT_OPTION, 
       r.RDB$RELATION_NAME, r.RDB$FIELD_NAME, r.RDB$USER_TYPE, r.RDB$OBJECT_TYPE
FROM RDB$USER_PRIVILEGES r;
CREATE VIEW GET_PRODUCTOS (ID, IDCATEGORIA, DESC_CATEGORIA, IMAGEN_CATEGORIA, 
     CODIGO, DESCRIPCION, IMAGEN_TEXTO, NOTA, FECHA_CREACION, ESTADO)
AS SELECT r.ID, r.IDCATEGORIA, c.DESCRIPCION, c.IMAGEN_TEXTO, r.CODIGO, 
       r.DESCRIPCION, r.IMAGEN_TEXTO, r.NOTA, r.FECHA_CREACION, r.ESTADO
FROM V_PRODUCTOS r
INNER JOIN V_CATEGORIAS c ON r.IDCATEGORIA = c.ID;
CREATE VIEW GET_ROL (USER_NAME, ROL)
AS SELECT UPPER(TRIM(p.RDB$USER)) AS USER_NAME, TRIM(p.RDB$RELATION_NAME) AS ROL
FROM RDB$USER_PRIVILEGES p
WHERE p.RDB$PRIVILEGE = 'M';
CREATE VIEW GET_ROLES (ROL)
AS select RDB$ROLE_NAME
from RDB$ROLES r
--iif(RDB$ROLE_NAME = 'RDB$ADMIN', 'RRR_ADMINISTRADOR', RDB$ROLE_NAME)
where trim(r.rdb$role_name) not like 'RRR_SOFTSURENA';
CREATE VIEW GET_TEMPORALES (ID_FACTURA, NOMBRE_TEMP, PNOMBRE, SNOMBRE, 
     APELLIDOS, FECHA, IDUSUARIO, HORA, ID_TURNO, EFECTIVO, CAMBIO, 
     ESTADO_FACTURA, MONTO, ID_CLIENTE)
AS SELECT f.ID, f.NOMBRE_TEMP, p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, f.FECHA, 
     f.IDUSUARIO, f.HORA, f.ID_TURNO, f.EFECTIVO, f.CAMBIO, f.ESTADO_FACTURA,
          cast(sum((d.CANTIDAD * d.PRECIO )) as D_DINERO) as MONTO, f.ID_CLIENTE
FROM V_FACTURAS f     
LEFT JOIN V_CLIENTES c on c.ID = f.ID_CLIENTE 
LEFT JOIN V_PERSONAS p ON p.ID = f.ID_CLIENTE
LEFT JOIN V_D_FACTURAS d on d.ID_FACTURA = f.ID 
WHERE f.ESTADO_FACTURA = 't' 
GROUP by f.ID, f.NOMBRE_TEMP, p.PNOMBRE, p.SNOMBRE, p.APELLIDOS, f.FECHA, 
          f.IDUSUARIO, f.HORA, f.ID_TURNO, f.EFECTIVO, f.CAMBIO, f.ESTADO_FACTURA, f.ID_CLIENTE;
CREATE VIEW GET_USER_ROLES (ROL, USER_NAME)
AS SELECT DISTINCT r.ROL, p.O_USER_NAME
FROM GET_ROL r 
INNER JOIN SP_SELECT_USUARIOS_TAGS('all') p ON 1=1
where TRIM(r.USER_NAME) like TRIM(p.O_USER_NAME) AND 
r.ROL CONTAINING 'RRR_' OR 
r.ROL LIKE 'RDB$ADMIN';
CREATE VIEW V_ANALISIS (ID, ID_PACIENTE, FECHA_HORA_CREADA, FECHA_HORA_VISTA, 
     T_BHCG, T_EMB_ORINA, T_EMB_SANGRE, T_ANT_AUSTRALIANO_BBSAG, 
     T_CLAMIDIA_IGA, T_FTA_ABS, T_HIV, T_VDRL, T_ACIDO_URICO, T_ANT_FEBRILES, 
     T_ASO_LATEX, T_BILIRRUBINA, T_COLESTEROL_TOTAL, T_COLESTEROL_HDL, 
     T_COLESTEROL_HDL_LDL, T_COPROLOGICO, T_CREATININA_SUERO, 
     T_CULTIVO_FARINGE, T_CULTIVO_HECES, T_CULTIVO_HERIDA_AEROBICO, 
     T_CULTIVO_OIDO, T_CULTIVO_SANGRE, T_CULTIVO_SEMEN, T_CULTIVO_URETRA, 
     T_CULTIVO_VAGINA, T_ELECTRO_HEMOGLOBINA, T_ERITROSEDIMENTACION, 
     T_ESPERMATOGRAMA, T_ESTRADIOL, T_ESTROGENO_TOTALES, T_FACTOR_REUMATOIDE, 
     T_FALCEMIA, T_FOSFATASA_ALCALINA, T_FSH, T_GLICEMIA, 
     T_HEMOGLO_GLUCOSILADA, T_HEMOGRAMA, T_HEPATITIS_A, T_HEPATITIS_C, T_KOH, 
     T_LH, T_ORINA, T_PCR, T_PROGESTERONA, T_PROLACTINA, T_PROTEINAS_TOTALES, 
     T_PSA_TOTAL, T_PSA_LIBRE, T_SANG_OCULT_HECES, T_SGOT_TGO, T_SGOT_TGP, 
     T_T3, T_T4, T_T4_LIBRE, T_COOMBS_DIRECTO, T_COOMBS_INDIRECTO, 
     T_TESTOSTERONA, T_TIPIFICACION_SANGUINEA, T_TOXOPLAS_IGG, T_TOXOPLAS_IGM, 
     T_TRIGLICERIDOS, T_TSH, T_TUBERCULINA, T_UREA, OTROS, IDUSUARIO, ROL)
AS SELECT r.ID, r.ID_PACIENTE, r.FECHA_HORA_CREADA, r.FECHA_HORA_VISTA,
     r.T_BHCG, r.T_EMB_ORINA, r.T_EMB_SANGRE, r.T_ANT_AUSTRALIANO_BBSAG,
     r.T_CLAMIDIA_IGA, r.T_FTA_ABS, r.T_HIV, r.T_VDRL, r.T_ACIDO_URICO,
     r.T_ANT_FEBRILES, r.T_ASO_LATEX, r.T_BILIRRUBINA, r.T_COLESTEROL_TOTAL,
     r.T_COLESTEROL_HDL, r.T_COLESTEROL_HDL_LDL, r.T_COPROLOGICO,
     r.T_CREATININA_SUERO, r.T_CULTIVO_FARINGE, r.T_CULTIVO_HECES,
     r.T_CULTIVO_HERIDA_AEROBICO, r.T_CULTIVO_OIDO, r.T_CULTIVO_SANGRE,
     r.T_CULTIVO_SEMEN, r.T_CULTIVO_URETRA, r.T_CULTIVO_VAGINA,
     r.T_ELECTRO_HEMOGLOBINA, r.T_ERITROSEDIMENTACION, r.T_ESPERMATOGRAMA,
     r.T_ESTRADIOL, r.T_ESTROGENO_TOTALES, r.T_FACTOR_REUMATOIDE, r.T_FALCEMIA,
     r.T_FOSFATASA_ALCALINA, r.T_FSH, r.T_GLICEMIA, r.T_HEMOGLO_GLUCOSILADA,
     r.T_HEMOGRAMA, r.T_HEPATITIS_A, r.T_HEPATITIS_C, r.T_KOH, r.T_LH,
     r.T_ORINA, r.T_PCR, r.T_PROGESTERONA, r.T_PROLACTINA,
     r.T_PROTEINAS_TOTALES, r.T_PSA_TOTAL, r.T_PSA_LIBRE, r.T_SANG_OCULT_HECES,
     r.T_SGOT_TGO, r.T_SGOT_TGP, r.T_T3, r.T_T4, r.T_T4_LIBRE,
     r.T_COOMBS_DIRECTO, r.T_COOMBS_INDIRECTO, r.T_TESTOSTERONA,
     r.T_TIPIFICACION_SANGUINEA, r.T_TOXOPLAS_IGG, r.T_TOXOPLAS_IGM,
     r.T_TRIGLICERIDOS, r.T_TSH, r.T_TUBERCULINA, r.T_UREA, r.OTROS, r.IDUSUARIO,
     r.ROL
FROM ANALISIS r;
CREATE VIEW V_ANTECEDENTES (ID, ID_PACIENTE, ID_DOCTOR, FECHA, DESCRIPCION, 
     USUARIO, ROL)
AS SELECT r.ID, r.ID_PACIENTE, r.ID_DOCTOR, r.FECHA, r.DESCRIPCION, r.USUARIO, r.ROL
FROM ANTECEDENTES r;
CREATE VIEW V_ARS (ID, DESCRIPCION, COVERCONSULTAPORC, IDUSUARIO, ROL, ESTADO)
AS SELECT r.ID, r.DESCRIPCION, r.COVERCONSULTAPORC, r.IDUSUARIO, r.ROL, r.ESTADO
FROM ARS r;
CREATE VIEW V_ASEGURADOS (ID_PERSONA, ID_ARS, NO_NSS, ESTADO)
AS SELECT r.ID_PERSONA, r.ID_ARS, r.NO_NSS, r.ESTADO 
FROM ASEGURADOS r;
CREATE VIEW V_CATEGORIAS (ID, DESCRIPCION, IMAGEN_TEXTO, FECHA_CREACION, 
     ESTADO, IDUSUARIO)
AS SELECT r.ID, r.DESCRIPCION, r.IMAGEN_TEXTO, r.FECHA_CREACION, r.ESTADO, r.IDUSUARIO
FROM CATEGORIAS r;
CREATE VIEW V_CLIENTES (ID)
AS SELECT ID
FROM CLIENTES;
CREATE VIEW V_CODIGOS_POSTALES (ID, IDPROVINCIA, LOCALIDAD, CODIGO_POSTAL)
AS SELECT r.ID, r.IDPROVINCIA, r.LOCALIDAD, r.CODIGO_POSTAL
FROM CODIGOS_POSTALES r;
CREATE VIEW V_CONSULTAS (ID, ID_PACIENTE, ID_CONTROL_CONSULTA, FECHA, TURNO, 
     ESTADO, IDUSUARIO)
AS SELECT r.ID, r.ID_PACIENTE, r.ID_CONTROL_CONSULTA, 
          r.FECHA, r.TURNO, r.ESTADO,r.IDUSUARIO
FROM CONSULTAS r;
CREATE VIEW V_CONSULTAS_APROBADAS (ID, COD_AUTORIZACION, COSTO, DESCUENTO, 
     IDUSUARIO, TOTALCOSTO)
AS SELECT r.ID, r.COD_AUTORIZACION, r.COSTO, r.DESCUENTO, r.IDUSUARIO, r.TOTALCOSTO
FROM CONSULTAS_APROBADAS r;
CREATE VIEW V_CONTACTS_EMAIL (ID, ID_PERSONA, EMAIL, FECHA)
AS SELECT r.ID, r.ID_PERSONA, r.EMAIL, R.FECHA
FROM CONTACTOS_EMAIL r;
CREATE VIEW V_CONTACTS_TEL (ID, ID_PERSONA, TELEFONO, TIPO, FECHA)
AS SELECT r.ID, r.ID_PERSONA, r.TELEFONO, r.TIPO, r.FECHA
FROM CONTACTOS_TEL r;
CREATE VIEW V_CONTROL_CONSULTA (ID, USER_NAME, CANTIDAD_PACIENTE, DIA, INICIAL, 
     FINAL, IDUSUARIO, ESTADO)
AS SELECT r.ID, r.USER_NAME, r.CANTIDADPACIENTE, r.DIA, r.INICIAL, r.FINAL, r.IDUSUARIO, r.ESTADO
FROM CONTROL_CONSULTA r;
CREATE VIEW V_DATOS_NACIMIENTO (ID, PESONACIMIENTOKG, ALTURA, 
     PERIMETRO_CEFALICO, CESAREA, TIEMPOGESTACION, MC, IDUSUARIO)
AS SELECT r.ID, r.PESONACIMIENTOKG, r.ALTURA, r.PERIMETRO_CEFALICO, r.CESAREA, r.TIEMPOGESTACION, r.MC, r.IDUSUARIO
FROM DATOS_NACIMIENTO r;
CREATE VIEW V_DEUDAS (ID, ID_CLIENTE, ID_FACTURA, CONCEPTO, MONTO, FECHA, HORA, 
     ESTADO)
AS SELECT r.ID, r.ID_CLIENTE, r.ID_FACTURA, r.CONCEPTO, r.MONTO,r.FECHA, r.HORA,
          r.ESTADO
FROM DEUDAS r;
CREATE VIEW V_DIRECCIONES (ID, ID_PERSONA, ID_PROVINCIA, ID_MUNICIPIO, 
     ID_DISTRITO_MUNICIPAL, ID_CODIGO_POSTAL, DIRECCION, FECHA)
AS SELECT r.ID, r.ID_PERSONA, r.ID_PROVINCIA, r.ID_MUNICIPIO,
     r.ID_DISTRITO_MUNICIPAL, r.ID_CODIGO_POSTAL, r.DIRECCION, r.FECHA
FROM DIRECCIONES r;
CREATE VIEW V_DISTRITOS_MUNICIPALES (ID, NOMBRE, IDMUNICIPIO)
AS SELECT r.ID, r.NOMBRE, r.IDMUNICIPIO
FROM DISTRITOS_MUNICIPALES r;
CREATE VIEW V_D_DEUDAS_PAGAS (ID, ID_DEUDAS, MONTO_PAGO, FECHA_HORA)
AS SELECT r.ID, r.ID_DEUDAS, r.MONTO_PAGO, r.FECHA_HORA
FROM D_DEUDAS_PAGAS r;
CREATE VIEW V_D_FACTURAS (ID_FACTURA, ID_LINEA, ID_PRODUCTO, PRECIO, CANTIDAD)
AS SELECT r.ID_FACTURA, r.ID_LINEA, r.ID_PRODUCTO, r.PRECIO, r.CANTIDAD
FROM D_FACTURAS r;
CREATE VIEW V_D_GUIA_VIGILANCIA_DESARROLLO (ID_GVD, ID_PACIENTE, FECHA)
AS SELECT r.ID_GVD, r.ID_PACIENTE, r.FECHA
FROM D_GUIA_VIGILANCIA_DESARROLLO r;
CREATE VIEW V_D_MOTIVO_CONSULTA (IDCONSULTA, IDMCONSULTA)
AS SELECT r.IDCONSULTA, r.IDMCONSULTA
FROM D_MOTIVO_CONSULTA r;
CREATE VIEW V_D_RECETAS (ID_RECETA, LINEA, ID_MEDICAMENTO, CANTIDAD, D_DOSIS)
AS SELECT r.ID_RECETA, r.LINEA, r.ID_MEDICAMENTO, r.CANTIDAD, r.D_DOSIS
FROM D_RECETAS r;
CREATE VIEW V_ENTRADA_PRODUCTOS (ID, ID_PROVEDOR, COD_FACTURA, LINEA, 
     ID_PRODUCTO, ENTRADA, FECHAVECIMIENTO, ESTADO, USUARIO, ROL)
AS SELECT r.ID, r.IDPROVEDOR, r.COD_FACTURA, r.LINEA, r.IDPRODUCTO, r.ENTRADA,
     r.FECHAVECIMIENTO, r.ESTADO, r.USUARIO, r.ROL
FROM ENTRADA_PRODUCTOS r;
CREATE VIEW V_ESTUDIANTES (ID, MATRICULA)
AS SELECT r.ID, r.MATRICULA
FROM ESTUDIANTE r;
CREATE VIEW V_E_S_SYS (ID_E_S_SYS, FCHI, FCHA, FCHV, IDMAC, LOGO)
AS SELECT r.ID_E_S_SYS, r.FCHI, r.FCHA, r.FCHV, r.IDMAC, r.LOGO
FROM E_S_SYS r;
CREATE VIEW V_FACTURAS (ID, ID_CLIENTE, ID_TURNO, EFECTIVO, CAMBIO, FECHA, 
     HORA, ESTADO_FACTURA, IDUSUARIO, NOMBRE_TEMP)
AS SELECT r.ID, r.ID_CLIENTE, r.IDTURNO, r.EFECTIVO, r.CAMBIO, r.FECHA, r.HORA, 
r.ESTADO_FACTURA, r.IDUSUARIO, r.NOMBRE_TEMP
FROM FACTURAS r;
CREATE VIEW V_FCH_LC (I, A, V, ID)
AS --Vista para ver los datos de la Tabla E_S_SYS y usando el procedimiento como funcion
SELECT CAST(i.FTCNUEVOTEXTO as D_VARCHAR_70) as i, 
        CAST(a.FTCNUEVOTEXTO as D_VARCHAR_70) as a, 
        CAST(v.FTCNUEVOTEXTO as D_VARCHAR_70) as v,
        CAST(id.FTCNUEVOTEXTO as D_VARCHAR_255) as id
FROM V_E_S_SYS r
    LEFT JOIN SYSTEM_ENCRIPTAR(TRIM(r.FCHI), 'D', '2972015','8661203') i
        on 1=1
    LEFT JOIN SYSTEM_ENCRIPTAR(TRIM(r.FCHA), 'D', '2972015','8661203') a
        on 1=1
    LEFT JOIN SYSTEM_ENCRIPTAR(TRIM(r.FCHV), 'D', '2972015','8661203') v
        on 1=1
    LEFT JOIN SYSTEM_ENCRIPTAR(TRIM(r.IDMAC), 'D', '2972015','8661203') id
        on 1=1;
CREATE VIEW V_GENERALES (ID_PERSONA, CEDULA, ID_TIPO_SANGRE, ESTADO_CIVIL)
AS SELECT r.ID_PERSONA, r.CEDULA, r.ID_TIPO_SANGRE, r.ESTADO_CIVIL
FROM GENERALES r;
CREATE VIEW V_GUIA_VIGILANCIA_DESARROLLO (ID, EDAD, CARACT_DESARR_EVALUAR)
AS SELECT r.ID, r.EDAD, r.CARACT_DESARR_EVALUAR
FROM GUIA_VIGILANCIA_DESARROLLO r;
CREATE VIEW V_HUELLAS (ID, TIPO_DEDO, IMAGEN_TEXTO)
AS SELECT ID, TIPO_DEDO, IMAGEN_TEXTO
FROM HUELLAS;
CREATE VIEW V_INSCRIPCION (ID, ID_ESTUDIANTE, ID_TANDA, PAGO, FECHA_INSCRIPCION)
AS SELECT r.ID, r.ID_ESTUDIANTE, r.ID_TANDA, r.PAGO, r.FECHA_INSCRIPCION
FROM INSCRIPCIONES r;
CREATE VIEW V_MENSAJES (ID, ID_DOCTOR, ID_PACIENTE, HORA, FECHA, MENSAJE, ESTADO
     )
AS SELECT r.ID, r.ID_DOCTOR, r.ID_PACIENTE, r.HORA, r.FECHA, r.MENSAJE, r.ESTADO
FROM MENSAJES r;
CREATE VIEW V_METRICAS (ID, IDCONSULTA, FECHA, PESOKG, ESTATURAMETRO, ESCEFALO, 
     NF_DETECT, HALLAZGOS_POS, ID_DIAG, TX, COMPLEMENTO, IMAGEN_TEXTO, IDUSUARIO
     )
AS SELECT r.ID, r.IDCONSULTA, r.FECHA, r.PESOKG, r.ESTATURAMETRO, r.ESCEFALO,
     r.ENF_DETECT, r.HALLAZGOS_POS, r.ID_DIAG, r.TX, r.COMPLEMENTO,
     r.IMAGEN_TEXTO, r.IDUSUARIO
FROM METRICAS r;
CREATE VIEW V_MOTIVO_CONSULTA (ID, DESCRIPCION)
AS SELECT r.ID, r.DESCRIPCION
FROM MOTIVO_CONSULTA r;
CREATE VIEW V_MUNICIPIOS (ID, NOMBRE, IDPROVINCIA)
AS SELECT r.ID, r.NOMBRE, r.IDPROVINCIA
FROM MUNICIPIOS r;
CREATE VIEW V_PACIENTES (ID)
AS SELECT r.ID
FROM PACIENTES r;
CREATE VIEW V_PADRES (ID, ID_HIJO)
AS SELECT r.ID, r.ID_HIJO
FROM PADRES r;
CREATE VIEW V_PERSONAS (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
     FECHA_NACIMIENTO, FECHA_INGRESO, FECHA_HORA_ULTIMO_UPDATE, ESTADO, 
     ID_USUARIO, ROL_USUARIO)
AS SELECT r.ID, r.PERSONA, r.PNOMBRE, r.SNOMBRE,
     r.APELLIDOS, r.SEXO, r.FECHA_NACIMIENTO, r.FECHA_INGRESO, 
     r.FECHA_HORA_ULTIMO_UPDATE, r.ESTADO, r.IDUSUARIO, r.ROL_USUARIO
FROM PERSONAS r;
CREATE VIEW V_PRODUCTOS (ID, IDCATEGORIA, CODIGO, DESCRIPCION, IMAGEN_TEXTO, 
     NOTA, FECHA_CREACION, ESTADO, IDUSUARIO, ROL)
AS SELECT r.ID, r.IDCATEGORIA, r.CODIGO, r.DESCRIPCION, r.IMAGEN_TEXTO, 
     r.NOTA, r.FECHA_CREACION, r.ESTADO, r.IDUSUARIO, r.ROL
FROM PRODUCTOS r;
CREATE VIEW V_PROVEEDORES (ID, CODIGO_PROVEEDOR)
AS SELECT r.ID, r.CODIGO_PROVEEDOR
FROM PROVEEDORES r;
CREATE VIEW V_PROVINCIAS (ID, NOMBRE, ZONA)
AS SELECT r.ID, r.NOMBRE, r.ZONA
FROM PROVINCIAS r;
CREATE VIEW V_RECCOUNT (ID, TABLA, CANTIDAD)
AS SELECT r.ID, r.TABLA, r.CANTIDAD
FROM RECCOUNT r;
CREATE VIEW V_RECETAS (ID, IDCONSULTA, FECHA, IDUSUARIO)
AS SELECT r.ID, r.IDCONSULTA, r.FECHA, r.IDUSUARIO
FROM RECETAS r;
CREATE VIEW V_SINTOMAS (ID, ID_PACIENTE, SINTOMAS, FECHA, HORA, NOTA, IDUSUARIO)
AS SELECT r.ID, r.ID_PACIENTE, r.SINTOMAS, r.FECHA, r.HORA, r.NOTA, r.IDUSUARIO
FROM SINTOMAS r;
CREATE VIEW V_TANDAS (ID, ANNO_INICIAL, ANNO_FINAL, HORA_INICIO, HORA_FINAL, 
     LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADOS, DOMINGOS, 
     CANTIDAD_ESTUDIANTES, EDAD_MINIMA, EDAD_MAXIMA, CON_EDAD, ESTADO)
AS SELECT r.ID, r.ANNO_INICIAL, r.ANNO_FINAL, r.HORA_INICIO, r.HORA_FINAL, r.LUNES,
     r.MARTES, r.MIERCOLES, r.JUEVES, r.VIERNES, r.SABADOS, r.DOMINGOS,
     r.CANTIDAD_ESTUDIANTES, r.EDAD_MINIMA, r.EDAD_MAXIMA, r.CON_EDAD, r.ESTADO
FROM TANDAS r;
CREATE VIEW V_TIME_LIC (D)
AS --Vista para obtener los dias que falta de la licencia...
SELECT DATEDIFF(DAY FROM CURRENT_DATE TO CAST(TRIM(s.FTCNUEVOTEXTO) as DATE)) as D
FROM E_S_SYS e
LEFT JOIN SYSTEM_ENCRIPTAR(e.FCHV, 'D', '2972015','8661203') s on 1=1;
CREATE VIEW V_TIPOS_SANGRE (ID, DESCRIPCION)
AS SELECT r.ID, r.DESCRIPCION
FROM TIPOS_SANGRE r;
CREATE VIEW V_TRANSACCION_ACTUAL (TNIDENTIFICADORTRANSACCION, 
     TNIDENTIFICADORCONEXION, TCESTADOTRANSACCION, TDFECHAHORA, 
     TNULTIMATRANSACCION, TNOLDESTINTERESTINGTRANSACTION, 
     TNOLDESTACTIVETRANSACTION, TCMODOAISLAMIENTO, TCTIEMPOESPERA, TCREADONLY, 
     TCAUTOCOMMIT, TCAUTOUNDO, TNIDENTIFICADORESTADISTICAS)
AS SELECT
   MON$TRANSACTION_ID             AS tnIdentificadorTransaccion,
   MON$ATTACHMENT_ID              AS tnIdentificadorConexion,
   IIF(MON$STATE = 1, 'ACTIVA', 'INACTIVA') AS tcEstadoTransaccion,
   MON$TIMESTAMP                  AS tdFechaHora,
   MON$TOP_TRANSACTION            AS tnUltimaTransaccion,
   MON$OLDEST_TRANSACTION         AS tnOldestInterestingTransaction,
   MON$OLDEST_ACTIVE              AS tnOldestActiveTransaction,
   DECODE(MON$ISOLATION_MODE, 
   0, 'Acceso exclusivo', 
   1, 'Lecturas repetidas', 
   2, 'Lee filas confirmadas inmediatamente', 
   3, 'No lee una fila si otra transacción la usa') AS tcModoAislamiento,
   DECODE(MON$LOCK_TIMEOUT, 
   -1, 'Espera por siempre', 
   0, 'No espera', 
   'Espera ' || MON$LOCK_TIMEOUT || ' segundos') AS tcTiempoEspera,
   IIF(MON$READ_ONLY = 1, 'Read Only', 'Read Write')               AS tcReadOnly,
   IIF(MON$AUTO_COMMIT = 1, 'Auto COMMIT', 'No auto COMMIT')       AS tcAutoCommit,
   IIF(MON$AUTO_UNDO = 1, 'Tiene savepoint', 'No tiene savepoint') AS tcAutoUndo,
   MON$STAT_ID                                                     AS tnIdentificadorEstadisticas
FROM
   MON$TRANSACTIONS
WHERE
   MON$ATTACHMENT_ID  = CURRENT_CONNECTION AND
   MON$TRANSACTION_ID = CURRENT_TRANSACTION;
CREATE VIEW V_TURNOS (ID, FECHAINICIO, HORAINICIO, FECHAFINAL, HORAFINAL, 
     ESTADO, IDUSUARIO, ROL)
AS SELECT r.ID, r.FECHAINICIO, r.HORAINICIO, r.FECHAFINAL, r.HORAFINAL, r.ESTADO, r.IDUSUARIO, r.ROL
FROM TURNOS r;
/******************* EXCEPTIONS *******************/

CREATE EXCEPTION ERROR
'';
/******************** TRIGGERS ********************/

SET TERM ^ ;
CREATE TRIGGER FACTURAS_BD FOR FACTURAS ACTIVE
BEFORE DELETE POSITION 0

AS
BEGIN
     if ( old.ESTADO_FACTURA  <> 'n') THEN
          EXCEPTION ERROR 'La factura no puede ser eliminada porque su estado no es nula.';
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER PERSONAS_AIUD FOR PERSONAS ACTIVE
AFTER INSERT OR UPDATE OR DELETE POSITION 0

AS
BEGIN
     if(DELETING)THEN
          POST_EVENT 'del_persona';
     if(UPDATING)THEN
          POST_EVENT 'upd_persona';
     if(INSERTING)THEN
          POST_EVENT 'ins_persona';
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER PRODUCTOS_AI FOR PRODUCTOS ACTIVE
AFTER INSERT POSITION 0

AS
BEGIN
     POST_EVENT 'addProducto';
END
^
SET TERM ; ^
/******************** DB TRIGGERS ********************/

SET TERM ^ ;
CREATE TRIGGER SYSTEM_SHAREWARE ACTIVE
ON CONNECT POSITION 0

AS
 DECLARE VARIABLE v_Fchi D_FECHA;
 DECLARE VARIABLE v_Fcha D_FECHA;
 DECLARE VARIABLE v_Fchv D_FECHA;
 DECLARE VARIABLE c_Fchi D_VARCHAR_70;
 DECLARE VARIABLE c_Fcha D_VARCHAR_70;
 DECLARE VARIABLE c_Fchv D_VARCHAR_70;
BEGIN    
    IF(CURRENT_ROLE <> 'RRR_SOFTSURENA')THEN
    BEGIN
        IF((SELECT (1) FROM V_FCH_LC) IS NULL)THEN
        BEGIN
            UPDATE E_S_SYS a
            SET 
                a.FCHI = (SELECT p.FTCNUEVOTEXTO
                                        FROM SYSTEM_ENCRIPTAR (
                                          EXTRACT(DAY FROM CURRENT_DATE) ||'.'||
                                          EXTRACT(MONTH FROM CURRENT_DATE) ||'.'||
                                          EXTRACT(YEAR FROM CURRENT_DATE), 
                                          'E', '2972015', '8661203') p), 
                a.FCHA = (SELECT p.FTCNUEVOTEXTO
                                        FROM SYSTEM_ENCRIPTAR (
                                          EXTRACT(DAY FROM CURRENT_DATE) ||'.'||
                                          EXTRACT(MONTH FROM CURRENT_DATE) ||'.'||
                                          EXTRACT(YEAR FROM CURRENT_DATE), 
                                          'E', '2972015', '8661203') p), 
                a.FCHV = (SELECT p.FTCNUEVOTEXTO
                                        FROM SYSTEM_ENCRIPTAR (
                                          EXTRACT(DAY FROM CURRENT_DATE) ||'.'||
                                          EXTRACT(MONTH FROM CURRENT_DATE) ||'.'||
                                          EXTRACT(YEAR FROM CURRENT_DATE), 
                                          'E', '2972015', '8661203') p), 
                a.IDMAC = '';
        END ELSE BEGIN        
            SELECT r.FCHI, r.FCHA, r.FCHV
              FROM E_S_SYS r
            INTO 
                :c_Fchi, :c_Fcha, :c_Fchv; 
                
            v_Fchi = (SELECT CAST(p.FTCNUEVOTEXTO as DATE)
                        FROM SYSTEM_ENCRIPTAR (:c_Fchi, 'D', '2972015', '8661203') p);
            v_Fcha = (SELECT CAST(p.FTCNUEVOTEXTO as DATE)
                        FROM SYSTEM_ENCRIPTAR (:c_Fcha, 'D', '2972015', '8661203') p);
            v_Fchv = (SELECT CAST(p.FTCNUEVOTEXTO as DATE)
                        FROM SYSTEM_ENCRIPTAR (:c_Fchv, 'D', '2972015', '8661203') p);

            IF(CURRENT_DATE < v_Fchi)THEN
            BEGIN
                EXCEPTION ERROR 'Fecha no permitida, error 911';
            END
            
            IF(CURRENT_DATE < v_Fcha)THEN
            BEGIN
                EXCEPTION ERROR 'Fecha Modificada, error 911';
            END
            
            IF(CURRENT_DATE > v_Fchv)THEN
            BEGIN
                EXCEPTION ERROR 'La base de Datos expirada, error 911';
            END
            
            if((SELECT r.D FROM V_TIME_LIC r) < 0) THEN
            BEGIN
                EXCEPTION ERROR 'La base de Datos expirada, error 911';
            END
            
            UPDATE E_S_SYS a SET a.FCHA = (SELECT p.FTCNUEVOTEXTO
                                            FROM SYSTEM_ENCRIPTAR (
                                              EXTRACT(DAY FROM CURRENT_DATE) ||'.'||
                                              EXTRACT(MONTH FROM CURRENT_DATE) ||'.'||
                                              EXTRACT(YEAR FROM CURRENT_DATE), 
                                              'E', '2972015', '8661203') p);
        END        
    END
END
^
SET TERM ; ^
/******************** DDL TRIGGERS ********************/


COMMENT ON ROLE RRR_CAJERO IS 'El rol de cajero es solo para uso de manejo de creacion de factruras.';
COMMENT ON ROLE RRR_SECRETARIA IS 'La secretaria es un rol que permite ingresar clientes al sistema de bebidas.';
COMMENT ON ROLE RRR_SOFTSURENA IS 'Es un rol que puede ser usado para hacer ajuste importante del sistema.';
COMMENT ON ROLE RRR_VENDEDOR IS 'El vendedor podrá hacer consultas a las tablas de productos para conocer las existencia de los productos que el surta a la empresa.';
SET TERM ^ ;
ALTER FUNCTION F_INSERT_CLIENTE_SB (
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
RETURNS D_ID


AS
DECLARE VARIABLE V_ID D_ID; 
BEGIN
     V_ID = GEN_ID(G_ID_PERSONA, 1);
     /*Validaciones de insercion*/
     INSERT INTO V_PERSONAS (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
     FECHA_NACIMIENTO, ESTADO)
     VALUES (
       :V_ID,
       :I_PERSONA,
       :I_PNOMBRE,
       :I_SNOMBRE,
       :I_APELLIDOS,
       :I_SEXO,
       :I_FECHA_NACIMIENTO,
       :I_ESTADO);
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);   
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     --Ingresando el cliente
     INSERT INTO V_CLIENTES(ID) VALUES(:V_ID);
     --Guardamos cantidad de registros por estado
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_CLIENTES');
     --Ingresando el cliente
     INSERT INTO V_GENERALES(ID_PERSONA, CEDULA, ID_TIPO_SANGRE, ESTADO_CIVIL) 
     VALUES(
          :V_ID,
          :I_CEDULA,
          0,
          :I_ESTADO_CIVIL
     );
     --Guardamos cantidad de registros por estado
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_GENERALES');
     
     RETURN V_ID;
END
^
SET TERM ; ^


COMMENT ON DOMAIN D_CEDULA IS 'Esto es una cedula por ejemplo: 000-0012345-2';
COMMENT ON DOMAIN D_ESTADO_CIVIL IS 'El dominio D_ESTADO_CIVIL admitirá una sola letra mayúscula la cual puede ser:
S(soltero)
C(casado)
D(divorciado)
V(viudo)
U(Union Libre)
';
COMMENT ON DOMAIN D_ESTADO_C_I_P_A_N_T IS 'Estado si es Deuda Inicial (i), Pagada (p), Abonada (a), Nulada (n), Temporal (t), Credito (c).';
SET TERM ^ ;
ALTER PROCEDURE ADMIN_HABILITAR_TURNO (
    IDUSUARIO D_IDUSUARIO )


AS
begin
    insert into V_TURNOS (IDUSUARIO)
    values (:IDUSUARIO);
end
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE PRO_PERMISOS (
    CONSULTAR D_BOOLEAN_F,
    INSERTAR D_BOOLEAN_F,
    ACTUALIZAR D_BOOLEAN_F,
    BORRAR D_BOOLEAN_F,
    REFERENCIA D_BOOLEAN_F,
    VISTA D_VARCHAR_45,
    LOGINUSER D_IDUSUARIO )


AS
begin
     /*Procedimiento actualizado el 22 de abril del 2022*/
     execute statement 'revoke all on '||:VISTA||' from '||:loginUser;
     
     if (:INSERTAR) then
     begin
      execute statement 'grant insert on '||:VISTA||' to '||:loginUser;
     end

     if (:CONSULTAR) then
     begin
      execute statement 'grant select on '||:VISTA||' to '||:loginUser;
     end

     if (:ACTUALIZAR) then
     begin
      execute statement 'grant update on '||:VISTA||' to '||:loginUser;
     end

     if (:BORRAR) then
     begin
      execute statement 'grant delete on '||:VISTA||' to '||:loginUser;
     end
     
     if (:REFERENCIA) then
     begin
      execute statement 'grant REFERENCES on '||:VISTA||' to '||:loginUser;
     end
end
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_ARS (
    V_ID D_ID,
    ESTADO D_BOOLEAN_T )


AS
BEGIN
     /*Procedimiento actualizado el 22 de abril 2022*/
     
     DELETE FROM V_ARS a WHERE a.ID = :V_ID;

     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('D', 'V_ARS', :ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_ARS');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_CATEGORIAS (
    V_ID D_ID,
    ESTADO D_BOOLEAN_T )


AS
BEGIN
     /*Procedimiento revizado el 22 de abril 2022*/
     DELETE FROM V_CATEGORIAS a WHERE a.ID = :V_ID;

     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('D', 'V_CATEGORIAS', :ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_CATEGORIAS');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_CLIENTE_SB (
    V_ID D_ID,
    I_ESTADO D_BOOLEAN_T )


AS
BEGIN
     IF (:V_ID = 0) THEN
          EXCEPTION ERROR 'Registro generico no puede ser eliminado.';
     
     DELETE FROM V_CONTACTS_TEL c WHERE c.ID_PERSONA = :V_ID;
     
     DELETE FROM V_CONTACTS_EMAIL e WHERE e.ID_PERSONA = :V_ID;
     
     DELETE FROM V_CLIENTES a WHERE a.ID = :V_ID;
     
     DELETE FROM V_DIRECCIONES a WHERE a.ID_PERSONA = :V_ID;
     
     DELETE FROM V_GENERALES a WHERE a.ID_PERSONA = :V_ID;
     
     DELETE FROM V_PERSONAS a WHERE a.ID = :V_ID;

     
     /*Guardamos cantidad de registros por estado*/
     IF((SELECT CANTIDAD FROM V_RECCOUNT WHERE TABLA LIKE 'V_PERSONAS'||' '||:I_ESTADO) > 0)THEN
          EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('D', 'V_PERSONAS', :I_ESTADO);
          
     IF((SELECT CANTIDAD FROM V_RECCOUNT WHERE TABLA LIKE 'GET_CLIENTES_ESTADO_SB'||' '||:I_ESTADO) > 0)THEN
          EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('D', 'GET_CLIENTES_ESTADO_SB', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     IF((SELECT CANTIDAD FROM V_RECCOUNT WHERE TABLA LIKE 'V_PERSONAS') > 0)THEN
          EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_PERSONAS');
     IF((SELECT CANTIDAD FROM V_RECCOUNT WHERE TABLA LIKE 'V_CLIENTES') > 0)THEN
          EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_CLIENTES');
     IF((SELECT CANTIDAD FROM V_RECCOUNT WHERE TABLA LIKE 'V_GENERALES') > 0)THEN
          EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_GENERALES');
     IF((SELECT CANTIDAD FROM V_RECCOUNT WHERE TABLA LIKE 'V_DIRECCIONES') > 0)THEN
          EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_DIRECCIONES');
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_ESTUDIANTE (
    V_ID D_ID,
    I_ESTADO D_BOOLEAN_T )


AS
BEGIN
     DELETE FROM V_ESTUDIANTES e WHERE e.ID = :V_ID;
     DELETE FROM V_ASEGURADOS a WHERE a.ID_PERSONA = :V_ID;
     DELETE FROM V_GENERALES g WHERE g.ID_PERSONA = :V_ID;
     DELETE FROM V_PERSONAS p WHERE p.ID = :V_ID;

     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('D', 'V_PERSONAS', :I_ESTADO);
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('D', 'V_ESTUDIANTES', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_ASEGURADOS');
     EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_GENERALES');
     EXECUTE PROCEDURE SP_RECCOUNT('D', 'V_ESTUDIANTES');
     
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_PACIENTE (
    V_ID D_ID,
    I_ESTADO D_BOOLEAN_T )


AS
BEGIN          
          
     DELETE FROM V_PACIENTES p WHERE p.ID = :V_ID;
     DELETE FROM V_ASEGURADOS a WHERE a.ID_PERSONA = :V_ID;
     DELETE FROM V_GENERALES g WHERE g.ID_PERSONA = :V_ID;
     DELETE FROM V_PERSONAS p WHERE p.ID = :V_ID;
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PACIENTES', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_ASEGURADOS');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_GENERALES');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PACIENTES');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_HALLAR_PALABRAS (
    FTCTEXTO D_BLOB_TEXTO )
RETURNS (
    FTCPALABRA D_VARCHAR_45 )


AS
DECLARE VARIABLE lnI D_ID;
DECLARE VARIABLE lnInicio D_ID;
DECLARE VARIABLE lnLongitud D_ID;
BEGIN
 
   lnI        = 1;
   lnInicio   = 1;
   ftcTexto   = ftcTexto || ' ';
   lnLongitud = CHARACTER_LENGTH(ftcTexto);
 
   WHILE (lnI <= lnLongitud) DO BEGIN
      IF(CAST(SUBSTRING(ftcTexto FROM lnI FOR 1) AS D_VARCHAR_45) NOT SIMILAR TO '[[:ALNUM:]]' AND POSITION(SUBSTRING(ftcTexto FROM lnI FOR 1) IN 'áéíóúñÁÉÍÓÚÑ') = 0) THEN BEGIN
         IF(lnI > lnInicio) THEN BEGIN
            ftcPalabra = SUBSTRING(ftcTexto FROM lnInicio FOR lnI - lnInicio);
            SUSPEND;
         END
         lnInicio = lnI + 1;
      END
      lnI = lnI + 1;
   END
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_ARS (
    DESCRIPCION D_VARCHAR_45,
    COVER_CONSULTA_POR_C D_DESCUENTO,
    ESTADO D_BOOLEAN_T )


AS
DECLARE VARIABLE V_ID D_ID;
BEGIN
     /*Procedimiento actualizado el 22 de abril 2022*/
     
     INSERT INTO V_ARS (DESCRIPCION, COVERCONSULTAPORC, ESTADO)
     VALUES (:DESCRIPCION, :COVER_CONSULTA_POR_C, :ESTADO);
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_ARS', :ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_ARS');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_CATEGORIAS (
    DESCRIPCION D_VARCHAR_25,
    IMAGEN_TEXTO D_BLOB_TEXTO,
    ESTADO D_BOOLEAN_T )
RETURNS (
    V_ID D_ID )


AS
BEGIN
     /*Procedimiento revizado el 22 de abril 2022*/
     INSERT INTO V_CATEGORIAS (ID, DESCRIPCION, IMAGEN_TEXTO, ESTADO)
     VALUES (:V_ID,:DESCRIPCION, :IMAGEN_TEXTO, :ESTADO);
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_CATEGORIAS', :ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_CATEGORIAS');
     
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_CLIENTE (
    I_ID D_ID,
    I_ESTADO D_BOOLEAN_T )


AS
BEGIN
     --Ingresando el cliente
     INSERT INTO V_CLIENTES(ID) VALUES(:I_ID);
     
     --Guardamos la cantidad de registro por tabla.
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_CLIENTES');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_CLIENTE_SB (
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
RETURNS (
    V_ID D_ID )


AS
BEGIN
     V_ID = GEN_ID(G_ID_PERSONA, 1);
     /*Validaciones de insercion*/
     INSERT INTO V_PERSONAS (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
     FECHA_NACIMIENTO, ESTADO) VALUES (
          :V_ID,
          :I_PERSONA,
          :I_PNOMBRE,
          :I_SNOMBRE,
          :I_APELLIDOS,
          :I_SEXO,
          :I_FECHA_NACIMIENTO,
          :I_ESTADO);
       
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);   
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     --Ingresando el cliente
     INSERT INTO V_CLIENTES(ID) VALUES(:V_ID);
     --Guardamos cantidad de registros por estado
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_CLIENTES');
     --Ingresando el cliente
     INSERT INTO V_GENERALES(ID_PERSONA, CEDULA, ID_TIPO_SANGRE, ESTADO_CIVIL) 
     VALUES(
          :V_ID,
          :I_CEDULA,
          0,
          :I_ESTADO_CIVIL
     );
     --Guardamos cantidad de registros por estado
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_GENERALES');
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_DIRECCIONES (
    I_ID_PERSONA D_ID,
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_ID_CODIGO_POSTAL D_ID,
    I_DIRECCION D_VARCHAR_255 )
RETURNS (
    O_ID D_ID )


AS
BEGIN
     /*Obtenemos el ID de la tabla */
     O_ID = GEN_ID(G_ID_DIRECCIONES, 1);
     
     INSERT INTO V_DIRECCIONES (ID, ID_PERSONA, ID_PROVINCIA, ID_MUNICIPIO,
          ID_DISTRITO_MUNICIPAL, ID_CODIGO_POSTAL, DIRECCION)
     VALUES (
          :O_ID,
          :I_ID_PERSONA, 
          :I_ID_PROVINCIA, 
          :I_ID_MUNICIPIO, 
          :I_ID_DISTRITO_MUNICIPAL, 
          :I_ID_CODIGO_POSTAL, 
          :I_DIRECCION
     );
     
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_DOCTOR (
    I_IDUSUARIO D_IDUSUARIO,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ROL D_ROL,
    I_COD_EXEQUATUR D_VARCHAR_70,
    I_ESPECIALIDAD D_VARCHAR_70,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F )
RETURNS (
    O_SQL D_BLOB_TEXTO )


AS
DECLARE VARIABLE V_ID D_ID; 
DECLARE VARIABLE V_SQL D_VARCHAR_255;
BEGIN
     IF((SELECT DISTINCT (1) FROM SP_SELECT_USUARIOS_TAGS (TRIM(:I_IDUSUARIO))) = 1)THEN
          EXCEPTION ERROR 'Usuario registrado!';
     
     IF((SELECT r.ROL FROM GET_ROLES r WHERE TRIM(r.ROL) like TRIM(:i_rol)) IS NULL)THEN
          EXCEPTION ERROR 'Rol no encontrado';
     
     V_ID = GEN_ID(G_ID_PERSONA, 1);
          
     V_SQL = 'CREATE USER '||:i_idusuario||' PASSWORD '''||i_clave||''' FIRSTNAME '''||i_pnombre||''' MIDDLENAME '''||i_snombre||''' LASTNAME '''||i_apellidos||''''||
     
     iif(i_estado, ' ACTIVE',' INACTIVE') ||
     
     iif(i_administrador, ' GRANT ',' REVOKE ') || 
     ' ADMIN ROLE USING PLUGIN Srp '||
     'TAGS(id='''||v_id||''', gui=''0'', uid=''0'', rol='''||TRIM(i_rol)||''', exe='''||i_cod_exequatur||''', esp='''||i_especialidad||''');';
     
     
     EXECUTE STATEMENT V_SQL;
     
     O_SQL = :V_ID;
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_ENTRADA_PRODUCTOS (
    ID_PROVEEDOR D_ID,
    COD_FACTURA D_CODIGO,
    LINEA D_ID,
    ID_PRODUCTO D_ID,
    ENTRADA D_DINERO,
    FECHA_VECIMIENTO D_FECHA )


AS
BEGIN
     
     INSERT INTO ENTRADA_PRODUCTOS (IDPROVEDOR, COD_FACTURA, LINEA, IDPRODUCTO,
     ENTRADA, FECHAVECIMIENTO)
     VALUES (:ID_PROVEEDOR, :COD_FACTURA, :LINEA, :ID_PRODUCTO, :ENTRADA, 
          :FECHA_VECIMIENTO
     );
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_ESTUDIANTE (
    I_ID_ARS D_ID,
    I_NO_NSS D_VARCHAR_25,
    I_ID_TIPO_SANGRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_MATRICULA D_VARCHAR_15,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID )


AS
DECLARE VARIABLE V_ID D_ID; 
BEGIN
     /*Obtenemos el ID de la tabla */
     V_ID = GEN_ID(G_ID_PERSONA, 1);
     
     --Campos de quedeberia de tener los estudiantes agregado.
     -- ID_ARS, NONSS, :I_ID_ARS, :I_NO_NSS, 
     
     INSERT INTO V_PERSONAS (ID, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
           FECHA_NACIMIENTO, ESTADO)
     VALUES (
          :V_ID, 
          :I_PNOMBRE, 
          :I_SNOMBRE, 
          :I_APELLIDOS, 
          :I_SEXO, 
          :I_FECHA_NACIMIENTO, 
          :I_ESTADO
     );
     
     INSERT INTO V_GENERALES (ID_PERSONA, CEDULA, ID_TIPO_SANGRE)
     VALUES (
          :V_ID, 
          :I_CEDULA, 
          :I_ID_TIPO_SANGRE
     );

     
     INSERT INTO V_ASEGURADOS (ID_PERSONA, ID_ARS, NO_NSS)
     VALUES (
          :V_ID, 
          :I_ID_ARS,
          :I_NO_NSS
     );
     
     /*Ingresar identificador en ESTUDIANTE*/
     INSERT INTO V_ESTUDIANTES (ID, MATRICULA)
     VALUES (
          :V_ID, 
          :I_MATRICULA
     );
     
     IF(:I_ID_PADRE > 0)THEN
          INSERT INTO V_PADRES(ID, ID_HIJO) VALUES(:I_ID_PADRE, :V_ID);
     
     IF(:I_ID_MADRE > 0)THEN
          INSERT INTO V_PADRES(ID, ID_HIJO) VALUES(:I_ID_MADRE, :V_ID);
     

     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_ESTUDIANTES', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_ESTUDIANTES');
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_GENERALES (
    I_ID_PERSONA D_ID,
    I_CEDULA D_CEDULA,
    I_ID_TIPO_SANGRE D_ID,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )


AS
BEGIN
     --Ingresando el cliente
     INSERT INTO V_GENERALES(ID_PERSONA, CEDULA, ID_TIPO_SANGRE, ESTADO_CIVIL) 
     VALUES(
          :I_ID_PERSONA,
          :I_CEDULA,
          :I_ID_TIPO_SANGRE,
          :I_ESTADO_CIVIL
     );
     
     --Guardamos la cantidad de registro por tabla.
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_GENERALES');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_PACIENTE (
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_ID_ARS D_ID,
    I_NO_NSS D_VARCHAR_25,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ID_TIPO_SANGRE D_ID,
    I_ESTADO D_BOOLEAN_T )
RETURNS (
    V_ID D_ID )


AS
BEGIN
     /*Obtenemos el ID de la tabla...*/
     V_ID = GEN_ID(G_ID_PERSONA, 1);
     
     /*Ingresando los datos general en persona...*/
     INSERT INTO V_PERSONAS (ID,  PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
          FECHA_NACIMIENTO, ESTADO)
     VALUES (
          :V_ID,
           
          :I_PNOMBRE, 
          :I_SNOMBRE, 
          :I_APELLIDOS, 
          :I_SEXO, 
          :I_FECHA_NACIMIENTO,
          :I_ESTADO
     );
     
     INSERT INTO V_GENERALES (ID_PERSONA, ID_TIPO_SANGRE, CEDULA) 
     VALUES (
          :V_ID,
          :I_ID_TIPO_SANGRE, 
          :I_CEDULA
     );
     
     INSERT INTO V_ASEGURADOS (ID_PERSONA, ID_ARS, NO_NSS)
     VALUES (
          :V_ID, 
          :I_ID_ARS, 
          :I_NO_NSS
     );
     
     /*Insertamos en la vista de pacientes*/
     INSERT INTO V_PACIENTES (ID)
     VALUES (
          :V_ID
     );
     IF(:I_ID_PADRE > 0)THEN
          INSERT INTO V_PADRES(ID, ID_HIJO) VALUES(:I_ID_PADRE, :V_ID);
     
     IF(:I_ID_MADRE > 0)THEN
          INSERT INTO V_PADRES(ID, ID_HIJO) VALUES(:I_ID_MADRE, :V_ID);
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PACIENTES', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PACIENTES');
     
     SUSPEND;

END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_PADRES (
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_ID_CODIGOPOSTAL D_ID,
    I_ID_TIPO_SANGRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_DIRECCION D_VARCHAR_70,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )
RETURNS (
    O_ID D_ID )


AS
BEGIN
     /*Obtenemos el ID de la tabla */
     O_ID = GEN_ID(G_ID_PERSONA, 1);
     
     /*Alguna validacion antes de insertar*/
     INSERT INTO V_PERSONAS(ID, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
          FECHA_NACIMIENTO, ESTADO)
     VALUES(
          :O_ID,
          :I_PNOMBRE, 
          :I_SNOMBRE, 
          :I_APELLIDOS, 
          :I_SEXO,
          :I_FECHA_NACIMIENTO, 
          :I_ESTADO 
     );
     
     INSERT INTO V_GENERALES (ID_PERSONA, ID_TIPO_SANGRE, CEDULA, ESTADO_CIVIL)
     VALUES (
          :O_ID,
          :I_ID_TIPO_SANGRE, 
          :I_CEDULA,
          :I_ESTADO_CIVIL
     );
     
     INSERT INTO V_DIRECCIONES (ID_PERSONA, ID_PROVINCIA, ID_MUNICIPIO,
     ID_DISTRITO_MUNICIPAL, ID_CODIGO_POSTAL, DIRECCION)
     VALUES (
          :O_ID,  
          :I_ID_PROVINCIA, 
          :I_ID_MUNICIPIO, 
          :I_ID_DISTRITO_MUNICIPAL, 
          :I_ID_CODIGOPOSTAL,  
          :I_DIRECCION
     );

     /*Ingresar identificador en padres*/
     INSERT INTO V_PADRES(ID) VALUES (:O_ID);
     SUSPEND;
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PADRES', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PADRES');
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_PERSONA (
    I_PERSONA D_PERSONA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T )
RETURNS (
    V_ID D_ID )


AS
BEGIN
     /*Validaciones de insercion*/
     INSERT INTO V_PERSONAS (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
     FECHA_NACIMIENTO, ESTADO)
     VALUES (
     0,
       :i_PERSONA,
       :i_PNOMBRE,
       :i_SNOMBRE,
       :i_APELLIDOS,
       :i_SEXO,
       :i_FECHA_NACIMIENTO,
       :i_ESTADO) 
     RETURNING ID
     INTO :V_ID ;
     
     /*Aqui se insertaba en la vista V_CLIENTES y en V_GENERALES*/
     
     
     /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_PROVEEDOR (
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_DIRECCION D_VARCHAR_255,
    I_ESTADO D_BOOLEAN_T,
    I_CODIGO_PROVEEDOR D_CODIGO )
RETURNS (
    V_ID D_ID )


AS
BEGIN
     /*Obtenemos el ID de la tabla */
     V_ID = GEN_ID(G_ID_PERSONA, 1);
     
     --La entidad persona que almacena datos generales.
     INSERT INTO V_PERSONAS (ID, PERSONA, PNOMBRE, SNOMBRE, APELLIDOS, SEXO, 
          ESTADO)
     VALUES (
          :V_ID, 
          :i_persona, 
          :i_pnombre, 
          :i_snombre, 
          :i_apellidos, 
          :i_sexo, 
          :i_estado
     );
          
     INSERT INTO V_GENERALES (ID_PERSONA, CEDULA) 
     VALUES (
          :V_ID,
          :i_cedula
     );
     
     --Direcion del proveedor.
     INSERT INTO V_DIRECCIONES (ID_PERSONA, ID_PROVINCIA, ID_MUNICIPIO, DIRECCION)
     VALUES (:V_ID, :i_id_provincia, :i_id_municipio, :i_direccion);
     
     --Almacenamos datos solo del proveedor. 
     INSERT INTO V_PROVEEDORES (ID, CODIGO_PROVEEDOR)
     VALUES (:V_ID, :i_codigo_proveedor);

      /*Guardamos cantidad de registros por estado*/
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PERSONAS', :I_ESTADO);
     EXECUTE PROCEDURE SP_RECCOUNT_ESTADO('I', 'V_PROVEEDORES', :I_ESTADO);
     
     /*Guardamos cantidad total de los registros en padres*/
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PERSONAS');
     EXECUTE PROCEDURE SP_RECCOUNT('I', 'V_PROVEEDORES');
     
     SUSPEND;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_INSERT_USUARIOS (
    I_IDUSUARIO D_IDUSUARIO,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F,
    I_DESCRIPCION D_BLOB_TEXTO )


AS
DECLARE VARIABLE V_SQL D_VARCHAR_255;
BEGIN
     IF((SELECT (1) FROM SEC$USERS r WHERE TRIM(r.SEC$USER_NAME) LIKE TRIM(:I_IDUSUARIO)) = 1)THEN
          EXCEPTION ERROR 'Usuario registrado!';
     
          
     V_SQL = 'CREATE USER '||:i_idusuario 
          ||' PASSWORD '''||:i_clave
          ||''' FIRSTNAME '''||:i_pnombre
          ||''' MIDDLENAME '''||:i_snombre
          ||''' LASTNAME '''||:i_apellidos
          ||''''|| iif(:i_estado, ' ACTIVE ',' INACTIVE ') 
          || iif(:i_administrador, ' GRANT ',' REVOKE ') 
          || ' ADMIN ROLE USING PLUGIN Srp;';
          
     
     EXECUTE STATEMENT V_SQL;
     
     EXECUTE STATEMENT 'COMMENT ON USER '||:i_idusuario||' is '''||:I_DESCRIPCION||'''';
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_RECCOUNT (
    TCOPERAC TYPE OF D_INSERT_DELETE,
    TCTABLAX TYPE OF D_VARCHAR_45 )


AS
declare variable LCCOMANDO D_VARCHAR_255;
declare variable LNCANTIDADFILAS D_ID;
DECLARE VARIABLE v_id D_ID;
BEGIN
/*
     Este RECCOUNT agrega la tabla tomando encuentra el estado del registro.
*/
     --Nos aseguramos que sea una operacion definida
     IF (tcOperac <> 'I' and tcOperac <> 'D') THEN
      EXCEPTION error 'Operacion no definida';--FIN
     
     --Se trata de actualizar la tabla de RECCOUNT
     UPDATE V_RECCOUNT r
     SET
       r.CANTIDAD = r.CANTIDAD + IIF(:tcOperac = 'I', 1, -1)
     WHERE r.TABLA = :tcTablax;

 
     IF (ROW_COUNT = 0) THEN BEGIN -- No se encontró la tabla en RECCOUNT, por lo tanto hay que agregarla
      lcComando = 'SELECT COUNT(*) FROM ' || tcTablax;
      EXECUTE STATEMENT (lcComando) INTO :lnCantidadFilas;
      INSERT INTO V_RECCOUNT(tabla, cantidad)
          VALUES (:tcTablax, :lnCantidadFilas);
     END
 
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_RECCOUNT_ESTADO (
    TCOPERAC TYPE OF D_INSERT_DELETE,
    TCTABLAX TYPE OF D_VARCHAR_45,
    ESTADO TYPE OF D_BOOLEAN_F )


AS
declare variable LCCOMANDO D_VARCHAR_255;
declare variable LNCANTIDADFILAS D_ID;
BEGIN
/*
     Este RECCOUNT agrega la tabla tomando encuentra el estado del registro.
*/
     --Nos aseguramos que sea una operacion definida
     IF (tcOperac <> 'I' and tcOperac <> 'D') THEN
      EXCEPTION error 'Operacion no definida';--FIN

     --Se trata de actualizar la tabla de RECCOUNT
     UPDATE V_RECCOUNT r
     SET
       r.CANTIDAD = r.CANTIDAD + IIF(:tcOperac = 'I', 1, -1)
     WHERE r.TABLA = :tcTablax||' '||:ESTADO;--FIN

     -- No se encontró la tabla en RECCOUNT, por lo tanto hay que agregarla
     IF (ROW_COUNT = 0) THEN BEGIN 
      lcComando = 'SELECT COUNT(*) FROM ' || tcTablax ||' WHERE ESTADO IS '||ESTADO;
      EXECUTE STATEMENT (lcComando) INTO :lnCantidadFilas;
      INSERT INTO V_RECCOUNT(tabla, cantidad)
          VALUES (:tcTablax||' '||:ESTADO , :lnCantidadFilas);
     END
 
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_SELECT_USUARIOS_TAGS (
    I_USER_NAME D_IDUSUARIO NOT NULL DEFAULT 'all' )
RETURNS (
    O_USER_NAME D_IDUSUARIO,
    O_PRIMER_NOMBRE D_NOMBRES,
    O_SEGUNDO_NOMBRE D_NOMBRES,
    O_APELLIDOS D_APELLIDOS,
    O_ESTADO_ACTIVO D_BOOLEAN_T,
    O_ADMINISTRADOR D_BOOLEAN_T,
    O_TAG_NOMBRE D_VARCHAR_255,
    O_TAG_VALOR D_VARCHAR_255 )


AS
DECLARE VARIABLE V_USER_NAME       D_IDUSUARIO;
     DECLARE VARIABLE V_PRIMER_NOMBRE   D_NOMBRES;
     DECLARE VARIABLE V_SEGUNDO_NOMBRE  D_NOMBRES;
     DECLARE VARIABLE V_APELLIDOS       D_APELLIDOS;
     DECLARE VARIABLE V_ESTADO_ACTIVO   D_BOOLEAN_T;
     DECLARE VARIABLE V_ADMINISTRADOR   D_BOOLEAN_T;
     DECLARE VARIABLE V_TAG_NOMBRE      D_VARCHAR_255;
     DECLARE VARIABLE V_TAG_VALOR       D_VARCHAR_255;
BEGIN
     /*Validacion no está funcionando. Debeido al Dominio del campo no permite 
     Nulos.*/
     if(I_USER_NAME IS NULL) THEN I_USER_NAME = 'all';
     
     FOR SELECT 
            CAST(U.SEC$USER_NAME AS D_IDUSUARIO) AS USUARIO,
            U.SEC$FIRST_NAME                  AS PRIMER_NOMBRE,
            U.SEC$MIDDLE_NAME                 AS SEGUNDO_NOMBRE,
            U.SEC$LAST_NAME                   AS APELLIDO,
            U.SEC$ACTIVE                      AS ESTA_ACTIVO,
            U.SEC$ADMIN                       AS ES_ADMIN,
            '-' AS NoValor1, '-' AS NoValor2
          FROM 
            SEC$USERS U --Tabla que nos permite obtener los usuarios del sistema.
          WHERE TRIM(U.SEC$USER_NAME) = TRIM(UPPER(:i_user_name)) OR 
                TRIM(:i_user_name) = 'all'
          INTO o_user_name, o_primer_nombre, o_segundo_nombre, o_apellidos, 
               o_estado_activo, o_administrador, o_tag_nombre, o_tag_valor
               
          DO BEGIN
               SUSPEND;
                         
               FOR SELECT r.SEC$USER_NAME,  r.SEC$KEY AS TAG_NOMBRE, 
                         r.SEC$VALUE AS TAG_VALOR
                    FROM SEC$USER_ATTRIBUTES r /*Tabla que nos brinda la informacion o
                    Atributos de los usuarios.*/
                    WHERE TRIM(r.SEC$USER_NAME) = TRIM(:o_user_name)
                    INTO v_user_name, v_tag_nombre, v_tag_valor
                    DO BEGIN
                         o_user_name         = v_user_name;
                         o_primer_nombre     = 'TAGS';
                         o_segundo_nombre    = 'TAGS';
                         o_apellidos         = 'TAGS';
                         o_estado_activo     = FALSE;
                         o_administrador     = FALSE;
                         o_tag_nombre        = v_tag_nombre;
                         o_tag_valor         = v_tag_valor;
                         SUSPEND;
                    END
               o_user_name         = '';
               o_primer_nombre     = '';
               o_segundo_nombre    = '';
               o_apellidos         = '';
               o_estado_activo     = NULL;
               o_administrador     = NULL;
               o_tag_nombre        = '';
               o_tag_valor         = '';
               SUSPEND;
          END

END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_CANTIDAD_FILAS (
    TNCODSUC D_ID )


AS
DECLARE VARIABLE lcNombreTabla D_VARCHAR_25;
   DECLARE VARIABLE lnCantidadFilas D_ID;
   DECLARE VARIABLE lcComando D_VARCHAR_255; 
BEGIN
  FOR
      SELECT
         RDB$RELATION_NAME
      FROM
         RDB$RELATIONS
      WHERE
         RDB$SYSTEM_FLAG = 0 AND
         RDB$RELATION_TYPE = 0
      ORDER BY
         RDB$RELATION_NAME
      INTO
         :lcNombreTabla
   DO BEGIN
      lcComando = 'SELECT COUNT(*) FROM ' || lcNombreTabla ;
      EXECUTE STATEMENT (lcComando) INTO :lnCantidadFilas ;
      UPDATE OR INSERT INTO V_RECCOUNT
               (ID, TABLA, CANTIDAD)
        VALUES (:tnCodSuc , :lcNombreTabla, :lnCantidadFilas)
      MATCHING (TABLA);
   END
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_CLIENTE_SB (
    I_ID D_ID,
    I_PERSONA D_PERSONA,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )


AS
BEGIN
     /*Entidad PERSONA*/
     UPDATE V_PERSONAS a SET 
          a.PERSONA = :I_PERSONA, 
          a.PNOMBRE = :I_PNOMBRE, 
          a.SNOMBRE = :I_SNOMBRE, 
          a.APELLIDOS = :I_APELLIDOS, 
          a.SEXO = :I_SEXO, 
          a.FECHA_NACIMIENTO = :I_FECHA_NACIMIENTO, 
          a.ESTADO = :I_ESTADO
     WHERE
          a.ID = :I_ID;
     
     --Atributo GENERALES
     UPDATE V_GENERALES a SET 
          a.CEDULA = :I_CEDULA, 
          a.ID_TIPO_SANGRE = 0, 
          a.ESTADO_CIVIL = :I_ESTADO_CIVIL 
     WHERE
          a.ID_PERSONA = :I_ID;
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_DEUDA_ESTADO (
    E_ID_DEUDA D_ID NOT NULL,
    E_OBJ D_ESTADO_C_I_P_A_N_T NOT NULL )
RETURNS (
    S_SALIDA D_VARCHAR_15 )


AS
BEGIN
    
    IF((SELECT (1) FROM V_DEUDAS d WHERE d.ID = :e_id_Deuda) IS NULL)THEN
    BEGIN
          s_salida = 'No encontrada;';
          SUSPEND;
          EXCEPTION ERROR 'Deuda no encontrada...';
    END
    
    IF(:e_obj = 'i')THEN
    BEGIN
        UPDATE V_DEUDAS a
        SET 
            a.ESTADO = 'i'
        WHERE
            a.ID = :e_id_Deuda;
        s_salida = 'Iniciada';
        SUSPEND;
    END
    
    IF(:e_obj = 'p')THEN
    BEGIN
        UPDATE V_DEUDAS a
        SET 
            a.ESTADO = 'p'
        WHERE
            a.ID = :e_id_Deuda;
        s_salida = 'Pagada';
        SUSPEND;
    END
    
    IF(:e_obj = 'a')THEN
    BEGIN
        UPDATE V_DEUDAS a
        SET 
            a.ESTADO = 'a'
        WHERE
            a.ID = :e_id_Deuda;
        s_salida = 'Abonada';
        SUSPEND;
    END
    
    IF(:e_obj = 'n')THEN
    BEGIN
        UPDATE V_DEUDAS a
        SET 
            a.ESTADO = 'n'
        WHERE
            a.ID = :e_id_Deuda;
        s_salida = 'Nulada';
        SUSPEND;
    END
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_ESTUDIANTE (
    I_ID D_ID,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T )


AS
BEGIN
     UPDATE V_PERSONAS a SET 
          a.PNOMBRE = :I_PNOMBRE, 
          a.SNOMBRE = :I_SNOMBRE, 
          a.APELLIDOS = :I_APELLIDOS, 
          a.SEXO = :I_SEXO, 
          a.FECHA_NACIMIENTO = :I_FECHA_NACIMIENTO, 
          a.ESTADO = :I_ESTADO
     WHERE
          a.ID = :I_ID;
     
     --Se actualizan los padres si es que estan registrados en la vista V_PADRES. 
     UPDATE V_PADRES a SET a.ID = :I_ID_PADRE WHERE a.ID_HIJO = :I_ID;
     
     UPDATE V_PADRES a SET a.ID = :I_ID_MADRE WHERE a.ID_HIJO = :I_ID;
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_PACIENTE (
    I_ID_PACIENTE D_ID,
    I_ID_PADRE D_ID,
    I_ID_MADRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ID_TIPO_SANGRE D_ID,
    I_ID_ARS D_ID,
    I_NONSS D_VARCHAR_25,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_ARS D_BOOLEAN_T )


AS
BEGIN
     --Se actualizan los campos de la vista V_PERSONAS
     UPDATE V_PERSONAS a
     SET 
          a.PNOMBRE = :I_PNOMBRE, 
          a.SNOMBRE = :I_SNOMBRE, 
          a.APELLIDOS = :I_APELLIDOS, 
          a.SEXO = :I_SEXO, 
          a.FECHA_NACIMIENTO = :I_FECHA_NACIMIENTO, 
          a.ESTADO = :I_ESTADO
     WHERE
          a.ID = :I_ID_PACIENTE;
          
     --Se actualizan los padres si es que estan registrados en la vista V_PADRES. 
     UPDATE V_PADRES a SET a.ID = :I_ID_PADRE WHERE a.ID_HIJO = :I_ID_PACIENTE;
     
     UPDATE V_PADRES a SET a.ID = :I_ID_MADRE WHERE a.ID_HIJO = :I_ID_PACIENTE;
     
     --Se actualizan los campos de la vista V_GENERALES
     UPDATE V_GENERALES a
     SET 
          a.CEDULA = :I_CEDULA, 
          a.ID_TIPO_SANGRE = :I_ID_TIPO_SANGRE 
     WHERE
          a.ID_PERSONA = :I_ID_PACIENTE;
     
     --Se actualizan los campos de la vista V_ASEGURADOS
     UPDATE V_ASEGURADOS a
     SET 
          a.ID_ARS = :I_ID_ARS, 
          a.NO_NSS = :I_NONSS, 
          a.ESTADO = :I_ESTADO_ARS
     WHERE
          a.ID_PERSONA = :I_ID_PACIENTE;

  
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_PADRES (
    I_ID D_ID,
    I_ID_PROVINCIA D_ID,
    I_ID_MUNICIPIO D_ID,
    I_ID_DISTRITO_MUNICIPAL D_ID,
    I_ID_CODIGOPOSTAL D_ID,
    I_ID_TIPO_SANGRE D_ID,
    I_CEDULA D_CEDULA,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_SEXO D_SEXO,
    I_DIRECCION D_VARCHAR_70,
    I_FECHA_NACIMIENTO D_FECHA,
    I_ESTADO D_BOOLEAN_T,
    I_ESTADO_CIVIL D_ESTADO_CIVIL )


AS
BEGIN

     UPDATE V_PERSONAS a
     SET  
          a.PNOMBRE = :I_PNOMBRE, 
          a.SNOMBRE = :I_SNOMBRE, 
          a.APELLIDOS = :I_APELLIDOS, 
          a.SEXO = :I_SEXO, 
          a.FECHA_NACIMIENTO = :I_FECHA_NACIMIENTO, 
          a.ESTADO = :I_ESTADO
     WHERE
          a.ID = :I_ID;
          
     UPDATE V_GENERALES a
     SET
          a.ID_TIPO_SANGRE = :I_ID_TIPO_SANGRE, 
          a.CEDULA = :I_CEDULA, 
          a.ESTADO_CIVIL = :I_ESTADO_CIVIL
     WHERE
          a.ID_PERSONA = :I_ID;
          
     UPDATE V_DIRECCIONES a
     SET 
          a.ID_PROVINCIA = :I_ID_PROVINCIA, 
          a.ID_MUNICIPIO = :I_ID_MUNICIPIO, 
          a.ID_DISTRITO_MUNICIPAL = :I_ID_DISTRITO_MUNICIPAL, 
          a.ID_CODIGO_POSTAL = :I_ID_CODIGOPOSTAL,  
          a.DIRECCION = :I_DIRECCION
     WHERE
          a.ID_PERSONA = :I_ID;
     
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SP_UPDATE_USUARIOS (
    I_IDUSUARIO D_IDUSUARIO,
    I_CLAVE D_CLAVE,
    I_PNOMBRE D_NOMBRES,
    I_SNOMBRE D_NOMBRES,
    I_APELLIDOS D_APELLIDOS,
    I_ESTADO D_BOOLEAN_T,
    I_ADMINISTRADOR D_BOOLEAN_F,
    I_DESCRIPCION D_BLOB_TEXTO )


AS
DECLARE VARIABLE V_ID D_ID; 
DECLARE VARIABLE V_SQL D_VARCHAR_255;
BEGIN
     /*Validando que el usuario este registrado en la app*/
     IF((SELECT (1) FROM SEC$USERS r WHERE TRIM(r.SEC$USER_NAME) LIKE (TRIM(:I_IDUSUARIO))) IS NULL)THEN
          EXCEPTION ERROR 'Usuario NO registrado!';
     
          
     V_SQL = 'ALTER USER '||:I_IDUSUARIO||
     ' FIRSTNAME '''||i_pnombre||
     ''' MIDDLENAME '''||i_snombre||
     ''' LASTNAME '''||i_apellidos||
     ''''||iif(i_estado, ' ACTIVE ',' INACTIVE ') ||
     iif(i_administrador, ' GRANT ',' REVOKE ') || 
     ' ADMIN ROLE USING PLUGIN Srp ';
     
     EXECUTE STATEMENT V_SQL;
     
     IF(I_CLAVE != NULL)THEN
     BEGIN
          V_SQL = 'ALTER USER '||:I_IDUSUARIO||' PASSWORD '''||i_clave;
          EXECUTE STATEMENT V_SQL;
     END
     
     EXECUTE STATEMENT 'COMMENT ON USER '||:i_idusuario||' is '''||:I_DESCRIPCION||'''';
     /*
     Se actualizo el dia 19 05 2022, Nota: se quito el atributo PASSWORD de el 
     V_SQL porque modificaba el PASSWORD del usuario si venia, la linea 39 se 
     encargar de hacer esa actualizacion. 
     */
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SYSTEM_ENCRIPTAR (
    TCTEXTO D_BLOB_TEXTO,
    TCACCION CHAR(1),
    TCNUMEROENCRIPTACION D_VARCHAR_255,
    TCNUMEROREPETICION D_VARCHAR_255 )
RETURNS (
    FTCNUEVOTEXTO D_BLOB_TEXTO )


AS
DECLARE VARIABLE lnI          SMALLINT;
DECLARE VARIABLE lnJ          SMALLINT;
DECLARE VARIABLE lnK          SMALLINT;
DECLARE VARIABLE lcCaracter   CHAR(1);
DECLARE VARIABLE lnAscii      SMALLINT;
DECLARE VARIABLE lnValor1     SMALLINT;
DECLARE VARIABLE lnValor2     SMALLINT;
DECLARE VARIABLE lnNuevoAscii SMALLINT;
BEGIN 
   ftcNuevoTexto = '';     -- El texto que se devolverá
   lnI = 1;
   lnJ = 1;
   lnK = 1;
 
   WHILE (lnI <= CHAR_LENGTH(tcTexto)) DO BEGIN
      lcCaracter    = SUBSTRING(tcTexto FROM lnI FOR 1);     -- Obtiene el caracter que está en la posición lnI
      lnAscii       = ASCII_VAL(lcCaracter);                  -- Halla el código ASCII del caracter
      lnValor1      = CAST(SUBSTRING(tcNumeroEncriptacion FROM lnJ FOR 1) AS SMALLINT);
      lnValor2      = CAST(SUBSTRING(tcNumeroRepeticion FROM lnK FOR 1) AS SMALLINT);
      lnNuevoAscii  = MOD((lnAscii + IIF(tcAccion = 'E', 1, -1) * lnValor1 * lnValor2), 256);
      lnNuevoAscii  = lnNuevoAscii + IIF(lnNuevoAscii < 0, 256, 0);
      ftcNuevoTexto = ftcNuevoTexto || ASCII_CHAR(lnNuevoAscii);
      lnI = lnI + 1;
      lnJ = lnJ + 1;
      lnJ = IIF(lnJ > CHAR_LENGTH(tcNumeroEncriptacion), 1, lnJ);
      lnK = lnK + 1;
      lnK = IIF(lnK > CHAR_LENGTH(tcNumeroRepeticion), 1, lnK);
   END
   SUSPEND;
 
END
^
SET TERM ; ^


SET TERM ^ ;
ALTER PROCEDURE SYSTEM_SET_LICENCIA (
    E_FCHV CHAR(10),
    E_IDMAC VARCHAR(80),
    CLAVE1 CHAR(7),
    CLAVE2 CHAR(7) )


AS
declare variable V_FCHA varchar(20);
declare variable V_FCHI char(10);
BEGIN
    V_FCHI = (SELECT * FROM SYSTEM_ENCRIPTAR(current_date, 'E', :clave1, :clave2));
    V_FCHA = (SELECT * 
              FROM SYSTEM_ENCRIPTAR( 
              EXTRACT(DAY FROM CURRENT_DATE)||'.'||
              EXTRACT(MONTH FROM CURRENT_DATE)||'.'||
              EXTRACT(YEAR FROM CURRENT_DATE),
              'E',
              :clave1,
              :clave2));
    E_FCHV = (SELECT * FROM SYSTEM_ENCRIPTAR(:E_FCHV, 'E', :clave1, :clave2));
    E_IDMAC = (SELECT * FROM SYSTEM_ENCRIPTAR(:E_IDMAC, 'E', :clave1, :clave2));
    
    --Condicion necesaria para insertar el dato correctamente
    IF ((SELECT COUNT(*) FROM E_S_SYS) = 0) THEN
    BEGIN
        INSERT INTO E_S_SYS(ID_E_S_SYS, FCHI, FCHA, FCHV, IDMAC)
        VALUES(1, :V_FCHI, :V_FCHA, :E_FCHV, :E_IDMAC);
    END ELSE BEGIN
        UPDATE E_S_SYS a
        SET a.FCHI = :V_FCHI,
            a.FCHA = :V_FCHA,
            a.FCHV = :E_FCHV,
            a.IDMAC = :E_IDMAC;
    END
    
END
^
SET TERM ; ^


ALTER TABLE ANALISIS ADD CONSTRAINT ANALISIS_FK
  FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTES (ID);
ALTER TABLE ANTECEDENTES ADD CONSTRAINT ANTECEDENTES_FK
  FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTES (ID);
ALTER TABLE ASEGURADOS ADD CONSTRAINT FK_ASEGURADOS_0
  FOREIGN KEY (ID_ARS) REFERENCES ARS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE ASEGURADOS ADD CONSTRAINT FK_ASEGURADOS_1
  FOREIGN KEY (ID_PERSONA) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE CLIENTES ADD CONSTRAINT CLIENTES_FK
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE CODIGOS_POSTALES ADD CONSTRAINT LOCALIDADES_POSTALES_FK
  FOREIGN KEY (IDPROVINCIA) REFERENCES PROVINCIAS (ID);
CREATE INDEX CODIGO_POSTAL_IDX ON CODIGOS_POSTALES (CODIGO_POSTAL);
ALTER TABLE CONSULTAS ADD CONSTRAINT CONSULTAS_FK
  FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTES (ID);
ALTER TABLE CONSULTAS ADD CONSTRAINT CONSULTAS_FK_1
  FOREIGN KEY (ID_CONTROL_CONSULTA) REFERENCES CONTROL_CONSULTA (ID);
ALTER TABLE CONSULTAS_APROBADAS ADD TOTALCOSTO COMPUTED BY (CAST((costo - (costo * (descuento/100))) as D_DINERO));
ALTER TABLE CONSULTAS_APROBADAS ADD CONSTRAINT CONSULTAS_APROBADAS_FK
  FOREIGN KEY (ID) REFERENCES CONSULTAS (ID);
ALTER TABLE CONTACTOS_EMAIL ADD CONSTRAINT FK_CONTACTOS_EMAIL_1
  FOREIGN KEY (ID_PERSONA) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE CONTACTOS_TEL ADD CONSTRAINT FK_CONTACTOS_TEL_1
  FOREIGN KEY (ID_PERSONA) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
COMMENT ON COLUMN CONTROL_CONSULTA.USER_NAME IS 'Este campo es utilizando para guardar el usuario que va a tener consultas programadas cierto dias.';
COMMENT ON COLUMN CONTROL_CONSULTA.IDUSUARIO IS 'Este campo guarda el usuario que realizó el registro. ';
ALTER TABLE DATOS_NACIMIENTO ADD MC COMPUTED BY (CAST(pesoNacimientoKG/(altura*altura) as d_Medida));
ALTER TABLE DATOS_NACIMIENTO ADD CONSTRAINT FK_DATOSNACIMIENTO_1
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID);
COMMENT ON COLUMN DEUDAS.ID IS 'Identificador de la deuda.';
COMMENT ON COLUMN DEUDAS.ID_CLIENTE IS 'Identificador del Cliente';
COMMENT ON COLUMN DEUDAS.CONCEPTO IS 'Concepto por el cual se registra la deuda.';
COMMENT ON COLUMN DEUDAS.MONTO IS 'El monto de la deuda';
COMMENT ON COLUMN DEUDAS.FECHA IS 'La fecha de la deuda, se inserta SOLA';
COMMENT ON COLUMN DEUDAS.HORA IS 'La Hora tambien se Inserta SOLA';
COMMENT ON COLUMN DEUDAS.ESTADO IS 'Estado si es Deuda Inicial (i), Pagada (p), Abonada (a), Nulada (n).';
ALTER TABLE DEUDAS ADD CONSTRAINT DEUDAS_FK_1
  FOREIGN KEY (ID_FACTURA) REFERENCES FACTURAS (ID);
ALTER TABLE DEUDAS ADD CONSTRAINT FK_DEUDAS_0
  FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES (ID);
ALTER TABLE DIRECCIONES ADD CONSTRAINT FK_DIRECCIONES_0
  FOREIGN KEY (ID_PERSONA) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE DIRECCIONES ADD CONSTRAINT FK_DIRECCIONES_1
  FOREIGN KEY (ID_PROVINCIA) REFERENCES PROVINCIAS (ID);
ALTER TABLE DIRECCIONES ADD CONSTRAINT FK_DIRECCIONES_2
  FOREIGN KEY (ID_MUNICIPIO) REFERENCES MUNICIPIOS (ID);
ALTER TABLE DIRECCIONES ADD CONSTRAINT FK_DIRECCIONES_3
  FOREIGN KEY (ID_DISTRITO_MUNICIPAL) REFERENCES DISTRITOS_MUNICIPALES (ID);
ALTER TABLE DIRECCIONES ADD CONSTRAINT FK_DIRECCIONES_4
  FOREIGN KEY (ID_CODIGO_POSTAL) REFERENCES CODIGOS_POSTALES (ID);
ALTER TABLE DISTRITOS_MUNICIPALES ADD CONSTRAINT IDMUNICIPIO_IDX
  FOREIGN KEY (IDMUNICIPIO) REFERENCES MUNICIPIOS (ID);
ALTER TABLE D_DEUDAS_PAGAS ADD CONSTRAINT FK_D_DEUDAS_PAGAS_0
  FOREIGN KEY (ID_DEUDAS) REFERENCES DEUDAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
COMMENT ON TABLE D_DEUDAS_PAGAS IS 'En esta tabla llevamos los pagos de los cliente a las deudas registrada en la tabla de Deudas.';
ALTER TABLE D_FACTURAS ADD CONSTRAINT FK_D_FACTURAS_0
  FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS (ID);
ALTER TABLE D_FACTURAS ADD CONSTRAINT FK_D_FACTURAS_1
  FOREIGN KEY (ID_FACTURA) REFERENCES FACTURAS (ID);
ALTER TABLE D_GUIA_VIGILANCIA_DESARROLLO ADD CONSTRAINT FK_DETALLE_GUIA_VIG_1
  FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTES (ID);
ALTER TABLE D_GUIA_VIGILANCIA_DESARROLLO ADD CONSTRAINT FK_DETALLE_GUIA_VIG_2
  FOREIGN KEY (ID_GVD) REFERENCES GUIA_VIGILANCIA_DESARROLLO (ID);
ALTER TABLE D_MOTIVO_CONSULTA ADD CONSTRAINT FK_D_MOTIVO_CONSULTA_1
  FOREIGN KEY (IDCONSULTA) REFERENCES CONSULTAS (ID) ON DELETE CASCADE;
ALTER TABLE D_MOTIVO_CONSULTA ADD CONSTRAINT FK_D_MOTIVO_CONSULTA_2
  FOREIGN KEY (IDMCONSULTA) REFERENCES MOTIVO_CONSULTA (ID) ON DELETE CASCADE;
ALTER TABLE D_RECETAS ADD CONSTRAINT FK_D_RECETAS_0
  FOREIGN KEY (ID_MEDICAMENTO) REFERENCES PRODUCTOS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE D_RECETAS ADD CONSTRAINT FK_D_RECETAS_1
  FOREIGN KEY (ID_RECETA) REFERENCES RECETAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE ENTRADA_PRODUCTOS ADD CONSTRAINT FK_ENTRADA_PRODUCTOS_0
  FOREIGN KEY (IDPROVEDOR) REFERENCES PROVEEDORES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE ENTRADA_PRODUCTOS ADD CONSTRAINT FK_ENTRADA_PRODUCTOS_1
  FOREIGN KEY (IDPRODUCTO) REFERENCES PRODUCTOS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE ESTUDIANTE ADD CONSTRAINT FK_ESTUDIANTE_1
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID);
COMMENT ON COLUMN E_S_SYS.ID_E_S_SYS IS 'Identificador unico de la empresa.';
COMMENT ON COLUMN E_S_SYS.NOMBRE IS 'Campo que almacena el nombre de la empresa';
COMMENT ON COLUMN E_S_SYS.TELEFONOS IS 'Campo que almacena los numeros telefonico de la empresa.';
COMMENT ON COLUMN E_S_SYS.FCHI IS 'Fecha de inicio de servicio de la empresa. ';
COMMENT ON COLUMN E_S_SYS.FCHA IS 'Fecha actual de la empresa.';
COMMENT ON COLUMN E_S_SYS.FCHV IS 'Fecha de vencimiento de la licencia del servicio. ';
COMMENT ON COLUMN E_S_SYS.IDMAC IS 'Identificador unico del equipo.';
COMMENT ON COLUMN E_S_SYS.DIRECCION IS 'Direccion del local donde opera el sistema.';
COMMENT ON COLUMN E_S_SYS.MENSAJE_FOOTER IS 'Mensaje que se presentan en el pie de la factura. ';
COMMENT ON COLUMN E_S_SYS.LOGO IS 'Logo tipo de la empresa, que se presenta en la ventana principal. ';
COMMENT ON TABLE E_S_SYS IS 'Esta tabla tiene la finalidad de almacenar datos importantes del negocio. ';
COMMENT ON COLUMN FACTURAS.ID IS 'Identificador de la tabla facturas.';
COMMENT ON COLUMN FACTURAS.ID_CLIENTE IS 'Identificador del cliente';
COMMENT ON COLUMN FACTURAS.IDTURNO IS 'Turno que tiene asignado el cajero para realizar las operaciones de factura.';
COMMENT ON COLUMN FACTURAS.EFECTIVO IS 'Es el dinero que entrega el cliente al cajero.';
COMMENT ON COLUMN FACTURAS.CAMBIO IS 'Es el cambio que debe entregarle el cajero al cliente.';
COMMENT ON COLUMN FACTURAS.FECHA IS 'Fecha en la que se crea la factura.';
COMMENT ON COLUMN FACTURAS.HORA IS 'La hora en que se realiza la factura en el sistema.';
COMMENT ON COLUMN FACTURAS.ESTADO_FACTURA IS 'Este campo sirve para ver el estado de la factura que puede ser:
c = Contado
i = Iniciada
p = Pagado
a = Credito
n = nula
t = temporal';
COMMENT ON COLUMN FACTURAS.NOMBRE_TEMP IS 'Nombre utilizado de manera temporal de la factura, para indentificar el cliente.';
ALTER TABLE FACTURAS ADD CONSTRAINT FACTURAS_FK
  FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES (ID);
ALTER TABLE FACTURAS ADD CONSTRAINT FK_FACTURA_2
  FOREIGN KEY (IDTURNO) REFERENCES TURNOS (ID);
COMMENT ON TABLE FACTURAS IS 'El campo estado puede ser  p=Pagado, c=credito, a=abono.';
ALTER TABLE GENERALES ADD CONSTRAINT FK_GENERALES_1
  FOREIGN KEY (ID_TIPO_SANGRE) REFERENCES TIPOS_SANGRE (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE GENERALES ADD CONSTRAINT GENERALES_FK
  FOREIGN KEY (ID_PERSONA) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
COMMENT ON COLUMN GUIA_VIGILANCIA_DESARROLLO.ID IS 'Identificador para indentificar las caracteristicas del niño a su edad.';
COMMENT ON COLUMN GUIA_VIGILANCIA_DESARROLLO.EDAD IS 'Las edades que registran aqui son en meses';
COMMENT ON COLUMN GUIA_VIGILANCIA_DESARROLLO.CARACT_DESARR_EVALUAR IS 'Describe el comportamiento de niño a su edad.';
ALTER TABLE HUELLAS ADD CONSTRAINT HUELLAS_FK
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID);
ALTER TABLE INSCRIPCIONES ADD CONSTRAINT FK_ESTUDIANTE
  FOREIGN KEY (ID_ESTUDIANTE) REFERENCES ESTUDIANTE (ID);
ALTER TABLE INSCRIPCIONES ADD CONSTRAINT FK_TANDAS
  FOREIGN KEY (ID_TANDA) REFERENCES TANDAS (ID);
ALTER TABLE MENSAJES ADD CONSTRAINT FK_MENSAJES_0
  FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTES (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE METRICAS ADD CONSTRAINT FK_METRICAS_1
  FOREIGN KEY (IDCONSULTA) REFERENCES CONSULTAS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE MUNICIPIOS ADD CONSTRAINT IDPROVINCIA_IDX
  FOREIGN KEY (IDPROVINCIA) REFERENCES PROVINCIAS (ID);
ALTER TABLE PACIENTES ADD CONSTRAINT FK_PACIENTES_0
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE PADRES ADD CONSTRAINT FK_PADRES_0
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE PADRES ADD CONSTRAINT FK_PADRES_1
  FOREIGN KEY (ID_HIJO) REFERENCES PERSONAS (ID) ON UPDATE CASCADE ON DELETE CASCADE;
COMMENT ON COLUMN PERSONAS.ID IS 'Identificador de la Persona en el sistema';
COMMENT ON COLUMN PERSONAS.PERSONA IS 'Identidad de una persona F Fisica o J Juridica.';
COMMENT ON COLUMN PERSONAS.APELLIDOS IS 'Apellidos Paternos + Maternos';
COMMENT ON COLUMN PERSONAS.SEXO IS 'El sexo solo se define como Masculino y Femenino';
COMMENT ON COLUMN PERSONAS.FECHA_NACIMIENTO IS 'Fecha de nacimiento, este campo debe ser actualizado por una persona autorizada.';
COMMENT ON COLUMN PERSONAS.FECHA_INGRESO IS 'Este campo nadie deberia de modificarlo.';
COMMENT ON COLUMN PERSONAS.FECHA_HORA_ULTIMO_UPDATE IS 'Este campo debe ser actualizado cada vez que el registro se actualice. ';
COMMENT ON COLUMN PERSONAS.ESTADO IS 'Este campo hace referencia a estado en el sistema de la persona, si es true activo o false inactivo.';
COMMENT ON COLUMN PERSONAS.IDUSUARIO IS 'Ident. del usuario que registro a la persona al sistema.';
COMMENT ON COLUMN PERSONAS.ROL_USUARIO IS 'Conocer el rol que tenia ese usuario cuando registro esta persona.';
CREATE INDEX IDX_PERSONAS1 ON PERSONAS (PNOMBRE);
CREATE INDEX IDX_PERSONAS2 ON PERSONAS (SNOMBRE);
CREATE INDEX IDX_PERSONAS3 ON PERSONAS (APELLIDOS);
CREATE INDEX IDX_PERSONAS4 ON PERSONAS (FECHA_NACIMIENTO);
CREATE INDEX IDX_PERSONAS5 ON PERSONAS (FECHA_INGRESO);
ALTER TABLE PRODUCTOS ADD CONSTRAINT FK_PRODUCTOS_0
  FOREIGN KEY (IDCATEGORIA) REFERENCES CATEGORIAS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE PROVEEDORES ADD CONSTRAINT FK_PROVEEDORES_0
  FOREIGN KEY (ID) REFERENCES PERSONAS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
CREATE UNIQUE INDEX RECCOUNT_IDX1 ON RECCOUNT (TABLA);
ALTER TABLE RECETAS ADD CONSTRAINT FK_RECETAS_1
  FOREIGN KEY (IDCONSULTA) REFERENCES CONSULTAS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE SINTOMAS ADD CONSTRAINT SINTOMAS_FK
  FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTES (ID);
COMMENT ON VIEW V_PERSONAS IS 'Tabla para almacenar las personas tanto clientes, provedores, padres Entre otros.';
GRANT RRR_CAJERO TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_DOCTOR TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_GERENTE TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_PADRE TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_RRHH TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_SECRETARIA TO JHIRONSEL WITH ADMIN OPTION;
GRANT RRR_SECRETARIA TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_SOFTSURENA TO SYSDBA WITH ADMIN OPTION;
GRANT RRR_VENDEDOR TO SYSDBA WITH ADMIN OPTION;
GRANT EXECUTE
 ON FUNCTION F_INSERT_CLIENTE_SB TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE ADMIN_HABILITAR_TURNO TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE PRO_PERMISOS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_ARS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_CATEGORIAS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_CLIENTE_SB TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_ESTUDIANTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_PACIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_HALLAR_PALABRAS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_ARS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_CATEGORIAS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_CLIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_CLIENTE_SB TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_DIRECCIONES TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_DOCTOR TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_ENTRADA_PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_ESTUDIANTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_GENERALES TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PACIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PADRES TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PERSONA TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_PROVEEDOR TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_INSERT_USUARIOS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_RECCOUNT TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_RECCOUNT_ESTADO TO  "PUBLIC";

GRANT EXECUTE
 ON PROCEDURE SP_RECCOUNT_ESTADO TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_SELECT_USUARIOS_TAGS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_CANTIDAD_FILAS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_CLIENTE_SB TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_DEUDA_ESTADO TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_ESTUDIANTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_PACIENTE TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_PADRES TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SP_UPDATE_USUARIOS TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SYSTEM_ENCRIPTAR TO  SYSDBA WITH GRANT OPTION;

GRANT EXECUTE
 ON PROCEDURE SYSTEM_SET_LICENCIA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ANALISIS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ANTECEDENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ARS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ASEGURADOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CATEGORIAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CLIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CODIGOS_POSTALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONSULTAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONSULTAS_APROBADAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTACTOS_EMAIL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTACTOS_TEL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CONTROL_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON DATOS_NACIMIENTO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON DEUDAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON DIRECCIONES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON DISTRITOS_MUNICIPALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_DEUDAS_PAGAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_GUIA_VIGILANCIA_DESARROLLO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_MOTIVO_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON D_RECETAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ENTRADA_PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ESTUDIANTE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON E_S_SYS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GENERALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GUIA_VIGILANCIA_DESARROLLO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON HISTORIAL_CAMBIOS_PERSONA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON HUELLAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON INSCRIPCIONES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MENSAJES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON METRICAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MOTIVO_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON MUNICIPIOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PACIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PADRES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PERSONAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PROVEEDORES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PROVINCIAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON RECCOUNT TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON RECETAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SINTOMAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TANDAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TIPOS_SANGRE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TURNOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CATEGORIA_ACTIVAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CLIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CLIENTES_ESTADO_SB TO  SYSDBA WITH GRANT OPTION;

GRANT REFERENCES(ID), SELECT
 ON GET_CLIENTES_SB TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_CLIENTES_SB TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_DEUDAS TO  SYSDBA WITH GRANT OPTION;

GRANT REFERENCES(ID,ID_CODIGO_POSTAL,ID_MUNICIPIO,ID_PROVINCIA,ID_PERSONA,ID_DISTRITO_MUNICIPAL), SELECT
 ON GET_DIRECCION_BY_ID TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_DIRECCION_BY_ID TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_D_FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_ESTUDIANTES_SV TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PACIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON GET_PRIVILEGIOS TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PRIVILEGIOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON GET_ROL TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_ROL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_ROLES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_TEMPORALES TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON GET_USER_ROLES TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON GET_USER_ROLES TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_ANALISIS TO ROLE RRR_DOCTOR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ANALISIS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_ANTECEDENTES TO ROLE RRR_DOCTOR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ANTECEDENTES TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_ARS TO ROLE RRR_DOCTOR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ARS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ASEGURADOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CATEGORIAS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_CLIENTES TO ROLE RRR_CAJERO;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CLIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CODIGOS_POSTALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONSULTAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONSULTAS_APROBADAS TO  SYSDBA WITH GRANT OPTION;

GRANT REFERENCES(ID,ID_PERSONA), SELECT
 ON V_CONTACTS_EMAIL TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTACTS_EMAIL TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_CONTACTS_TEL TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTACTS_TEL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_CONTROL_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_DATOS_NACIMIENTO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_DEUDAS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_DIRECCIONES TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_DIRECCIONES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_DISTRITOS_MUNICIPALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_DEUDAS_PAGAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_D_GUIA_VIGILANCIA_DESARROLLO TO ROLE RRR_DOCTOR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_GUIA_VIGILANCIA_DESARROLLO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_MOTIVO_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_D_RECETAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ENTRADA_PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_ESTUDIANTES TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_E_S_SYS TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_E_S_SYS TO  SYSDBA WITH GRANT OPTION;

GRANT INSERT
 ON V_FACTURAS TO ROLE RRR_CAJERO;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_FACTURAS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_FCH_LC TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_FCH_LC TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_GENERALES TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_GENERALES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_GUIA_VIGILANCIA_DESARROLLO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_HUELLAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_INSCRIPCION TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_MENSAJES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_METRICAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_MOTIVO_CONSULTA TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_MUNICIPIOS TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_MUNICIPIOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PACIENTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PADRES TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_PERSONAS TO ROLE RRR_CAJERO;

GRANT SELECT
 ON V_PERSONAS TO ROLE RRR_SECRETARIA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PERSONAS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_PRODUCTOS TO ROLE RRR_CAJERO;

GRANT SELECT
 ON V_PRODUCTOS TO ROLE RRR_VENDEDOR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PRODUCTOS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PROVEEDORES TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_PROVINCIAS TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_PROVINCIAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_RECCOUNT TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_RECETAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_SINTOMAS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TANDAS TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_TIME_LIC TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TIME_LIC TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT
 ON V_TIPOS_SANGRE TO  "PUBLIC";

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TIPOS_SANGRE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TRANSACCION_ACTUAL TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON V_TURNOS TO  SYSDBA WITH GRANT OPTION;

